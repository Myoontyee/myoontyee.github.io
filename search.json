[{"title":"Geant4的日常可视化使用方式","url":"/article/bb684af9.html","content":"\n\n\n---\n\n**创建时间**：2023年4月18日10:28:24\n**最新更新**：\n\n---\n\n**Problem Description**：\n\n**核心思路**：\n\n---\n\n* 该教程指代在完成[[可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化]]的配置后，日常如何进行Geant4的可视化使用\n\n* 首先打开已经设置好的`XLaunch`配置文件\n\n![Pasted image 20230418103013](Geant4的日常可视化使用方式/Pasted image 20230418103013.png)\n\n* 在此基础上，在运行Geant4的Bash内对应输入如下指令\n\n* WSL 1使用下面这个指令\n```bash:WSL\nexport DISPLAY=localhost:0\n```\n\n* WSL 2使用下面这个指令\n```bash:WSL2\nexport DISPLAY=`cat /etc/resolv.conf | grep nameserver | awk '{print $2}'`:0\n```\n\n\n* 然后运行Geant4对应程序，就能看见GUI\n\n\n# Ref\n","tags":["Geant4"]},{"title":"可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？","url":"/article/c7d01a74.html","content":"\n\n\n* 打开WSL2的bash，输入以下指令\n\n```bash:更新库\nsudo apt update\nsudo apt upgrade\n\n```\n\n```bash:安装依赖环境\n\nsudo apt-get install dpkg-dev g++ gcc binutils libx11-dev libxpm-dev \\\nlibxft-dev libxext-dev python libssl-dev\n\nsudo apt-get install gfortran libpcre3-dev \\\nxlibmesa-glu-dev libglew1.5-dev libftgl-dev \\\nlibmysqlclient-dev libfftw3-dev libcfitsio-dev \\\ngraphviz-dev libavahi-compat-libdnssd-dev \\\nlibldap2-dev python-dev libxml2-dev libkrb5-dev \\\nlibgsl0-dev\n\nsudo apt install libxerces-c-dev \n\nsudo apt install qt5-default qtcreator # 安装QT5\n\nqmake -version # 获取QT5安装路径\nsudo strip --remove-section=.note.ABI-tag /mnt/d/Anaconda/main/lib/libQt5Core.so.5 # 路径需要替换成对应安装路径\n```\n\n* 下载并安装VcXsrv，[下载地址](https://sourceforge.net/projects/vcxsrv/)\n\n\n![Pasted image 20211217235353](可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？/Pasted image 20211217235353.png)\n\n![Pasted image 20211217235403](可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？/Pasted image 20211217235403.png)\n\n\n\n* 安装完成后的设置如下\n  * 这一步更推荐`Multiple windows`而非`One large window`\n\n\n![Pasted image 20211217235633](可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？/Pasted image 20211217235633.png)\n![Pasted image 20211217235514](可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？/Pasted image 20211217235514.png)\n\n\n```ad-info\ntitle:报以下错误解决办法见下\n\nAuthorization required, but no authorization protocol specified\nError: Can't open display\n\n```\n\n* 打开Xlaunch，注意要勾选**Disable access control**，其他为默认选项\n  ![Pasted image 20211217235619](可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？/Pasted image 20211217235619.png)\n\n\n* 安装Ubuntu桌面环境\n\n```bash:安装Ubuntu桌面环境\nsudo apt-get install ubuntu-desktop unity compizconfig-settings-manager\n\n```\n\n* 通过以下代码即可实现在XMing中显示内容\n  * 注意WSL和WSL2的方法不同\n\n```ad-info\nWSL2与WSL相比，在于WSL2使用了Hyper-V，其基于虚拟机技术，所以其每次启动时IP地址不同，不能使用localhost或者127.0.0.1\n\n通常使用指令` cat /etc/resolv.conf | grep nameserver | awk '{print $2}' `来获取当前WSL2的IP地址，故export对应的地址也要做修改\n\n\n\n* Ref\n\t* [wsl2启动桌面_WSL 1 与 WSL 2 有什么区别？到底哪个更适合你](https://blog.csdn.net/weixin_33929779/article/details/112238216)\n```\n\n* WSL 1在`bash`内通过如下指令进行，将图像信息打印到对应窗口\n\n```bash:WSL\nexport DISPLAY=localhost:0\n```\n\n* WSL 2在`bash`内通过如下指令进行，将图像信息打印到对应窗口\n\n```bash:WSL2\nexport DISPLAY=`cat /etc/resolv.conf | grep nameserver | awk '{print $2}'`:0\n```\n\n![Pasted image 20211218090542](可视化配置教程，WSL1与WSL2如何配置可视化？Geant4在WSL1与WSL2内如何实现可视化？/Pasted image 20211218090542.png)\n\n\n* 也可以通过以下指令将export内容输入到`.bashrc`\n\n```bash:将对应内容设为默认启动\necho \"export DISPLAY=`cat /etc/resolv.conf | grep nameserver | awk '{print $2}'`:0\" >> ~/.bashrc \n\nsource ~/.bashrc\n\n```\n\n* Ref\n  * [基于 WSL2 的 Geant4 和 ROOT 安装教程（截至2021/10/5可用）](https://zhuanlan.zhihu.com/p/374051825)\n  * [WSL安装可视化GUI](https://www.daimajiaoliu.com/daima/47944068c900401)\n  * [win10上WSL+vscode+xserver配置linux图形化程序开发环境](https://blog.csdn.net/weixin_30834783/article/details/102144314)\n  * [安装Ubuntu子系统，安装图形化界面到了ccsm那一步报错怎么解决？](https://ask.csdn.net/questions/1091786)\n","tags":["Geant4","WSL"],"categories":["Geant4"]},{"title":"GitHub+Hexo代码仓如何清空Commits以避免信息泄露？","url":"/article/1b2e5417.html","content":"\n---\n\n**创建时间**：2023年3月17日10:38:41\n**最新更新**：2023年3月17日22:44:00\n\n---\n\n**Problem Description**：How to Clear Commits in GitHub+Hexo Code Warehouse to Avoid Information Leakage?\n\n**核心思路**：\n\n* 方法1\n  * 清空代码仓分支并覆盖，注意本教程针对的是基于[GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？](./f338e400.html)教程的部署情况\n* 方法2\n  * 删`.deploy_git`文件夹后重新部署提交\n\n---\n\n* 最终实现效果\n![Pasted image 20230317105349](GitHub-Hexo代码仓如何清空Commits以避免信息泄露？/Pasted-image-20230317105349.png)\n\n---\n\n# 改配置\n* 首先在Windows下的bash内进入Blog代码所在的代码仓\n* 首先修改代码仓的`.git`文件夹，然后在bash内进行以下操作\n\t* 打开`.git/config`，将`url`设置修改为对应的代码仓代码\n\t* 然后进入bash内进行操作，注意操作完需将`url`调整回来\n\n# 清空commits与强制推送\n\n* 新建空白分支\n```bash\ngit checkout --orphan latest_branch\n```\n* 添加所有文件\n```bash\ngit add -A\n```\n* 提交\n```bash\ngit commit -am \".\"\n```\n\n* 强制删除旧分支，此处用的分支是`master`\n\n```bash\ngit branch -D master\n```\n\n* 将当前分支重命名为`master`\n\n```bash\ngit branch -m master\n```\n\n* 强制推送到远程仓库\n```bash\ngit push -f origin master\n```\n\n* 最终实现效果\n![Pasted image 20230317105349](GitHub-Hexo代码仓如何清空Commits以避免信息泄露？/Pasted-image-20230317105349.png)\n\n# 网页部署\n\n* 为了确保网页部署，可以在`bash`内进行如下指令\n```bash\nhexo clean\nhexo g\nhexo d\n```\n\n\n\n# 方法2\n\n* 删除Blog代码目录下`.deploy_git`文件夹\n* 在bash内输入如下指令\n```bash\nhexo clean\nhexo g\nhexo d\n```\n\n# Ref\n* [删除 GitHub 所有 Commit 记录](https://cloud.tencent.com/developer/article/1987447)\n* [Hexo 刪除 github 的 commit 歷史記錄](https://ouoholly.github.io/post/hexo-delete-commit-history-in-github/#%E6%96%B9%E6%B3%95)\n","tags":["Hexo"],"categories":["博客搭建"]},{"title":"Pytorch中神经网络模块nn.Linear概念及示例","url":"/article/a2c031de.html","content":"\n---\n\n**创建时间**：2022年5月30日09:55:15\n**最新更新**：2022年5月30日17:38:01\n\n---\n\n**Problem Description**：Concept and example of neural network module `nn.Linear` in Pytorch\n\n**核心思路**：\n* 对输入数据应用线性变换：$ y=xA^{T}+b $ \n  * 或者说 $ Y=XW^{T}+b $\n    * $ W $ 就是我们关注的权重矩阵\n    * $ b $ 就是我们关注的偏置\n* `torch.nn.Linear(in_features, out_features, bias=True)`\n  * 第一个参数是输入矩阵的列数\n  * 第二个参数是输出矩阵的列数\n  * 第三个参数是有没有偏置 $ bias $\n\n---\n\n* 文本内容参考了[yanghh](https://www.cnblogs.com/yanghh/p/14054163.html)的工作\n\t* 他写的真棒👍！\n\n# 定义\n```Python\nclass\ntorch.nn.Linear(in_features, out_features, bias=True, device=None, dtype=None)\n```\n\n* 用途\n\t* 对输入数据应用线性变换：$ y=xA^{T}+b $ \n\t* 用于设置网络中的全连接层\n* 注意\n\t* 输入与输出都是二维张量\n\t\t* 二维张量的一般形状为 $ [batch \\ size, \\ size] $\n\n## 输入与输出\n* 输入\n\t* $ ( ∗ , H_{ in } ) $\n\t\t* 其中 $ * $ 代表任意数量的维度，可以取None\n\t* $ ( * , H_{ out } ) $\n\t\t* 除了最后一个维度（指 $ H_{ out } $ ）之外的所有维度都与输入的形状相同，并且 $  H_{out} = out \\ features $\n\n## 参数\n* 先关注一下核心公式：\n\t* $ y=xA^{T}+b $\n\t* $ Y=XA^{T}+b $\n* `in_features`\n\t* 每个输入样本的大小，即输入矩阵的列数\n\t* 对应输入二维张量形状 $ [batch \\ size, input \\ size] $ 中的 $ input \\  size $\n\t* 代表每个样本 $ x $ 的特征数\n\t\t* 也是输入层神经元的个数\n* `out_features`\n\t* 每个输出样本的大小，即输出矩阵的列数\n\t* 对应输出二维张量形状 $ [batch \\ size，output \\ size] $ 中的 $ output \\  size $\n\t* 代表每个样本输出 $ y $ 的特征数\n\t\t* 也是输出层神经元的个数\n* `bias`\n\t* 如果设置为 `False`，该层将不会学习附加偏差\n\t* 默认值：`True`\n\t\t* 如果为 `True`，则网络的输出需要再加上一个偏置向量，维度为 $ output \\ size $\n\n\n# 示例与实现\n## 示例\n* 示例内容来自[yanghh](https://www.cnblogs.com/yanghh/p/14054163.html)，详见Ref\n\n* 在将`Transformer`布到`FPGA`上头时，我们其实需要知道权重矩阵`W`和偏置`bias`，单看[手册](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#linear)还不晓得是咋回事（刚入门嘛...），发觉[yanghh](https://www.cnblogs.com/yanghh/p/14054163.html)写的极好的，下面就是他的工作内容\n* 官方手册写的该函数功能为对输入数据应用线性变换：$ y = xA^{T} + b $ \n\t* 这个不直观，实际上做的是如下变换\n\n$$ \\begin{equation}\\label{eq1}\nY = XW^{T}+b\n\n\\end{equation} \n\n$$\n* 其中\n\t* $ X $ 是一个矩阵而非向量\n\t\t* 通常来自于一个 $ batch $ 中的样本，用这个样本组成一个输入矩阵\n\t\t* 矩阵 $ X $ 的每一行代表一个输入样本，如下\n\n\n$$ \\tag{2}\n\n\\begin{matrix}\n\n&Y \n\n\\\\ \n\n&\\left[\\begin{array}{cccccccccc}\n\n? & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\n? & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\n? & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\n? & ? & ? & ? & ? & ? & ? & ? & ? & ?\n\n\\end{array}\\right]_{4 \\times 10}\n\n\\\\\n\n&X   &W^{T} &+ &b\n\n\\\\\n=\n\n&\n\\left[\\begin{array}{llllll}\n\n1 & 3 & 1 & 2 & 5 & 6 \\\\\n2 & 3 & 1 & 5 & 3 & 1 \\\\\n1 & 2 & 4 & 4 & 2 & 3 \\\\\n7 & 8 & 1 & 3 & 5 & 9\n\n\\end{array}\\right]_{4 \\times 6}\n\n&\n\\left[\\begin{array}{llllllllll}\n\n1 & 3 & 5 & 2 & 3 & 4 & 5 & 6 & 7 & 3 \\\\\n2 & 3 & 5 & 6 & 3 & 5 & 6 & 7 & 8 & 6 \\\\\n5 & 4 & 3 & 6 & 3 & 4 & 2 & 4 & 7 & 4 \\\\\n6 & 4 & 2 & 4 & 6 & 7 & 8 & 6 & 4 & 5 \\\\\n6 & 4 & 3 & 2 & 6 & 7 & 8 & 2 & 1 & 7 \\\\\n2 & 4 & 5 & 6 & 3 & 6 & 7 & 4 & 7 & 2\n\n\\end{array}\\right]_{6 \\times 10}\n\n&+\n\n&\n\\left[\\begin{array}{llllllllll}\n\n1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10\n\n\\end{array}\\right]_{1 \\times 10}\n\n\\end{matrix}\n\n$$\n\n* (2)式中\n\t* 输入是一个 $ shape $ 为$(4,6)$的矩阵$X$\n\t\t* 即这个矩阵由 $ 4 $ 个样本组成\n\t\t* 每个样本有 $ 6 $ 个维度的特征\n\t* $ W^{T} $ 代表全连接层的权重矩阵，$ shape $ 为 $ (6, 10) $\n\t\t* 即每个输入样本（ $ X $ 的每一行）在这个矩阵 $ W^{T} $ 的作用下，输出维度变为 $ 10 $（输出一个向量）\n\t* 即输入层有 $ 6 $ 个神经元，输出层有 $ 10 $ 个神经元\n\t* $ b $ 是偏置向量，是 $ bias $ ，它的维度等于输出神经元的个数 $ 10 $\n\t* **广播机制（broadcast mechanism）**\n\t\t* 解释具体见\n\t\t* $ b $ 是 $ 1×10 $ 的向量， $ XW^{T} $ 的输出是一个 $ 4×10 $ 的矩阵\n\t\t\t* 按理来说其没法和一个向量相加啊？\n\t\t\t* 这里应用的是 $ Tensor $ 的**广播机制（broadcast mechanism）**\n\t\t\t\t* 就你平常直接从`GitHub`上搞神经网络代码下来跑，报`broadcast`错误的那个机制 \n\t\t\t* $ (4, 10) $ 的矩阵和 $ (1, 10) $ 向量相乘，由于缺失，触发广播机制，把向量 $ b $ 由 $ (1, 10) $ 变成 $ (4, 10) $ 的矩阵 $ b' $，最终执行的实际操作如下\n\n$$\\tag{3}\n\\begin{matrix}\n&Y \n\n\n\\\\ \n&\\left[\\begin{array}{cccccccccc}\n? & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\n? & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\n? & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\n? & ? & ? & ? & ? & ? & ? & ? & ? & ?\n\\end{array}\\right]_{4 \\times 10}\n\\\\\n&X   &W^{T} &+ &b'\n\\\\\n&=\n\\left[\\begin{array}{llllll}\n1 & 3 & 1 & 2 & 5 & 6 \\\\\n2 & 3 & 1 & 5 & 3 & 1 \\\\\n1 & 2 & 4 & 4 & 2 & 3 \\\\\n7 & 8 & 1 & 3 & 5 & 9\n\\end{array}\\right]_{4 \\times 6}\n\n&\\left[\\begin{array}{llllllllll}\n1 & 3 & 5 & 2 & 3 & 4 & 5 & 6 & 7 & 3 \\\\\n2 & 3 & 5 & 6 & 3 & 5 & 6 & 7 & 8 & 6 \\\\\n5 & 4 & 3 & 6 & 3 & 4 & 2 & 4 & 7 & 4 \\\\\n6 & 4 & 2 & 4 & 6 & 7 & 8 & 6 & 4 & 5 \\\\\n6 & 4 & 3 & 2 & 6 & 7 & 8 & 2 & 1 & 7 \\\\\n2 & 4 & 5 & 6 & 3 & 6 & 7 & 4 & 7 & 2\n\\end{array}\\right]_{6 \\times 10}\n\n&+\n\n&\\left[\\begin{array}{cccccccccc}\n1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 \\\\\n1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 \\\\\n1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 \\\\\n1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10\n\\end{array}\\right]_{4 \\times 10}\n\n\n\\end{matrix}\n\n$$\n\n## 实现\n\n* 代码来自[yanghh](https://www.cnblogs.com/yanghh/p/14054163.html)\n\n```Python\nimport torch\n \nX = torch.randn(128, 20)          # 输入的维度是（128，20）\nmodel = torch.nn.Linear(20, 30)   # 20,30 是指维度\nY = model(X)\nprint('model.weight.shape: ', model.weight.shape)  # 矩阵\nprint('model.bias.shape: ', model.bias.shape)      # 向量\nprint('output.shape: ', Y.shape)                   # 矩阵\n \n# 等价于下面的\nans = torch.mm(X, model.weight.t()) + m.bias # Y = XW.T + b\nprint('ans.shape: ', ans.shape)\n \n\"\"\"\nmodel.weight.shape:  torch.Size([30, 20])\nmodel.bias.shape:  torch.Size([30])\noutput.shape:  torch.Size([128, 30])\nans.shape:  torch.Size([128, 30])\n\"\"\"\n```\n\n---\n\n# Ref\n* [Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#linear)\n* [Source code for torch.nn.modules.linear](https://pytorch.org/docs/stable/_modules/torch/nn/modules/linear.html#Linear)\n* [Pytorch 神经网络模块之 Linear Layers](https://www.cnblogs.com/yanghh/p/14054163.html)\n","tags":["Pytorch","Neural Network","Linear"],"categories":["Neural Network"]},{"title":"Overleaf 如何使用中文？","url":"/article/3beda872.html","content":"\n---\n\n**创建时间**：2022年4月30日17:47:37\n**最新更新**：2022年4月30日17:54:00\n\n---\n\n**Problem Description**：How does Overleaf use Chinese?\n\n**核心思路**：\n* 添加`\\usepackage[UTF8]{ctex}`\n* 在菜单设置编辑器为`XeLaTex`\n\n---\n\n# 配置\n## 调用库\n* 调用库`\\usepackage[UTF8]{ctex}`\n\t* ![image-20220430175443262](Overleaf-如何使用中文？/image-20220430175443262.png)\n\n## 配置编译器\n* 配置编译器，点击`Menu`→`∨`→`XeLaTeX`\n\t* ![image-20220430175447061](Overleaf-如何使用中文？/image-20220430175447061.png)\n\t* ![image-20220430175450567](Overleaf-如何使用中文？/image-20220430175450567.png)\n\n# 编译一下试试\n* 点一下`Recompile`，如下图，可以使用中文了\n\t* ![image-20220430175455625](Overleaf-如何使用中文？/image-20220430175455625.png)\n# Ref\n* [overleaf使用问题 - 导入本地模板 、中文的使用](https://blog.csdn.net/FrankAx/article/details/107519135)\n","tags":["Overleaf","LaTeX","中文支持"],"categories":["LaTeX","Overleaf"]},{"title":"Overleaf + Docker本地配置教程","url":"/article/29d7e5dd.html","content":"\n---\n\n**创建时间**：2022年4月30日14:16:55\n**最新更新**：2022年5月1日13:10:21\n\n---\n\n**Problem Description**：Overleaf + Docker local configuration tutorial\n\n**核心思路**：\n* 拉镜像，环境配置\n* 调整配置文件，使用测试一下\n* 安装完整环境\n* 添加中文样式支持\n\n---\n\n# 拉镜像，配环境\n* 启动`Docker`服务（我就直接打开他GUI端，因为我平常禁止他自启动）\n\t* ![image-20220430174444975](Overleaf-Docker本地配置教程/image-20220430174444975.png)\n* 打开`WSL`的`Bash`，输入`docker pull sharelatex/sharelatex`，等待`pull`完成\n\t* ![image-20220430174449057](Overleaf-Docker本地配置教程/image-20220430174449057.png)\n* 在`Bash`内输入`mkdir ~/sharelatex/ ~/sharelatex_data/ ~/mongo_data/ ~/redis_data/`创建4个文件夹到`\\\\wsl$\\Ubuntu-20.04\\root`下头\n\t* 这一步据说是为了根据官网创建了文件夹来挂载容器中的文件夹\n* 下载这个`docker-compose.yml`到`~/sharelatex`里头，就上面创建的那个\n\t* 修改`~/sharelatex`里头第15行，改为不冲突的端口，我改为`8080`，即如下表，记得保存\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```yml\nports:\n            - 80:80\n```\n</td>\n<td>\n```yml\nports:\n            - 8080:80\n```\n</td>\n</table>\n</div>\n\n* 在`bash`内进入到`\\\\wsl$\\Ubuntu-20.04\\root\\sharelatex`这个文件夹\n* 输入`docker-compose up -d`下载对应的东西\n\t* ![image-20220430174456918](Overleaf-Docker本地配置教程/image-20220430174456918.png)\n\n# 试着用一下！\n\n* 在浏览器里打开`http://127.0.0.1:8080/launchpad`注册管理员账号\n\t* ![image-20220430174502797](Overleaf-Docker本地配置教程/image-20220430174502797.png)\n* 然后可以先开个项目试试看，点`Start Using Overleaf Community Edition`→`New Project`→`Example Project`→起个你喜欢的名儿→`Create`\n\t* ![image-20220430174508326](Overleaf-Docker本地配置教程/image-20220430174508326.png)\n\t* ![image-20220430174512527](Overleaf-Docker本地配置教程/image-20220430174512527.png)\n\t* ![image-20220430174521573](Overleaf-Docker本地配置教程/image-20220430174521573.png)\n* 如下图，看着很棒，那么我们进一步配置，安装更完整的环境\n\t* ![image-20220430174529619](Overleaf-Docker本地配置教程/image-20220430174529619.png)\n\n# 进一步配置\n\n## 完善你的环境，完整宏包支持（完整版TexLive）\n\n* 这一步我们要先进入容器的`Bash`\n\t* 在`WSL`的`Bash`内输入\n\n```bash\ndocker exec -it sharelatex bash\n```\n\n* 进完容器的`Bash`，再进入容器的`TexLive`所在文件夹\n\t* 在`Bash`内输入\n\n```bash\ncd /usr/local/texlive\n```\n* 上2步操作如下图\n\t* \n\t* ![image-20220430174555045](Overleaf-Docker本地配置教程/image-20220430174555045.png)\n* 执行以下命令，开始更新\n\t* 下面这些命令我直接搬运的[这个小伙子的](https://www.zhang-hb.com/2022/01/01/%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8Doverleaf/)\n\n```bash\n# 下载并运行升级脚本\nwget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh\nsh update-tlmgr-latest.sh -- --upgrade\n\n# 更换texlive的下载源\ntlmgr option repository https://mirrors.sustech.edu.cn/CTAN/systems/texlive/tlnet/\n\n# 升级tlmgr\ntlmgr update --self --all\n\n# 安装完整版texlive（漫长的等待，不要让shell断开）\ntlmgr install scheme-full\n\n# 退出sharelatex的命令行界面\nexit\n```\n* 如下图，要蛮久的，特别那个装`TexLive`，可以睡一觉！\n\t* ![image-20220430174621694](Overleaf-Docker本地配置教程/image-20220430174621694.png)\n\n* 在`Bash`内输入如下指令重启`sharelatex`容器\n```bash\ndocker restart sharelatex\n```\n\n## 支持中文字体，省的学位论文哭爹喊娘\n### 创建文件夹\n* 先进入`sharelatex`这个容器，创建一个文件夹`/usr/share/fonts/windows`\n\t* 在`WSL`的`Bash`内输入如下指令，进入`sharelatex`这个容器的`bash`\n\t\t* ![image-20220430174628371](Overleaf-Docker本地配置教程/image-20220430174628371.png)\n\n```bash\ndocker exec -it sharelatex bash\n```\n\n* 创建文件夹，在`sharelatex`这个容器的`bash`内输入\n\n```bash\ncd /usr/share/fonts\nmkdir windows\n```\n\n### 复制字体样式\n* 在`Bash`内输入如下指令退出容器\n\t* ![image-20220430174632990](Overleaf-Docker本地配置教程/image-20220430174632990.png)\n\n```bash\nexit\n```\n* 在`Bash`内输入如下指令看一下`sharelatex/sharelatex`对应的`CONTAINER ID`\n\t* 比如我对应的`CONTAINER ID`是`a4868411d7e0`\n\t* ![image-20220430174637996](Overleaf-Docker本地配置教程/image-20220430174637996.png)\n\n```bash\ndocker ps -a\n```\n* 在`Bash`内继续输入如下指令，复制字体\n\n```bash\nsudo docker cp /mnt/c/Windows/Fonts 你的sharelatex的CONTAINER ID:/usr/share/fonts/windows\n```\n\n* 比如我的是\n\n```bash\nsudo docker cp /mnt/c/Windows/Fonts a4868411d7e0:/usr/share/fonts/windows\n```\n\n### 安装并检查\n* 在`Bash`内输入如下指令，进入`sharelatex`这个容器的`bash`，安装字体文件\n\n```bash\ndocker exec -it sharelatex bash \ncd /usr/share/fonts/windows\nfc-cache\n```\n\n* 检查有没有安装成功，在`Bash`内输入以下指令，像下图这样就成了，可以上`Overleaf`里头冲浪了\n\t* ![image-20220430174647505](Overleaf-Docker本地配置教程/image-20220430174647505.png)\n```bash\nfc-list | grep windows\n```\n\n\n\n# 关了重开咋整\n\n* 在`Docker`的`Containers/Apps`页面，如下图，平常不用关掉，下次要用时候这4个挨个`START`就行\n\t* ![image-20220430175936472](Overleaf-Docker本地配置教程/image-20220430175936472.png)\n\n\n\n# Ref\n\n* [在自己的服务器上配overleaf](https://www.zhang-hb.com/2022/01/01/%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8Doverleaf/)\n* [如何在docker和宿主机之间复制文件](https://blog.csdn.net/xtfge0915/article/details/52169445)\n","tags":["Overleaf","LaTeX","Docker"],"categories":["LaTeX","Overleaf"]},{"title":"Hexo 标题有特殊字符如何处理？如冒号、引号、大括号、连字符等","url":"/article/8b903383.html","content":"\n---\n\n**创建时间**：2022年4月30日13:02:42\n**最新更新**：2022年4月30日13:02:48\n\n---\n\n**Problem Description**：How to deal with special characters in Hexo title?such as colon, quotes, braces, hyphens, etc.\n\n**核心思路**：用单引号，**回车<kbd>Enter</kbd>左边那个**，不是<kbd>Tab</kbd>上面那个\n\n---\n\n* 用单引号，**回车<kbd>Enter</kbd>左边那个**\n  * 不是<kbd>Tab</kbd>上面那个\n\n* 如下\n\n```\ntitle: 'Hexo 报ssh: connect to host github.com port 22&#58; Connection timed out错误解决办法'\n```\n\n# Ref\n* [hexo 标题特殊符号引发错误（冒号、引号、大括号、连字符）](https://segmentfault.com/a/1190000021735407)\n","tags":["Hexo","title"],"categories":["博客搭建"]},{"title":"Hexo 报ssh: connect to host github.com port 22: Connection timed out错误解决办法","url":"/article/b1a1bc5b.html","content":"\n---\n\n**创建时间**：2022年4月30日12:45:27\n**最新更新**：2022年4月30日12:50:02\n\n---\n\n**Problem Description**：Hexo reports ssh: connect to host github.com port 22: Connection timed out error solution\n\n**核心思路**：`ssh`部署不上去，换`https`\n\n---\n\n* 很骚，我在实验室的网就行，用热点也行，神特么到寝室就不行了\n* 简单来说，`ssh`部署不上去，咱们就不走`ssh`，换`https`，妈妈的\n\n# 报错全文\n```bash\nssh: connect to host github.com port 22: Connection timed out\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (..\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (node:events:520:28)\n      at ChildProcess.cp.emit (..\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n# 解决\n* 用代码编辑器打开`_config.yml`，你项目根目录下的，有`deploy`的那个，将`repo`后面的`ssh`路径改为`https`路径，比如`https://github.com/`+`你的仓名`\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```yml\nrepo: git@github.com:你的仓\n```\n</td>\n<td>\n```yml\nrepo: https://github.com/你的仓\n```\n</td>\n</table>\n</div>\n\n\n\n# Ref\n* [Win10使用ssh的hexo deploy到github報錯](https://github.com/hexojs/hexo/issues/3339)\n","tags":["Hexo","deploy"],"categories":["博客搭建"]},{"title":"Visual Studio Code注释Comment插件推荐配置组合，是否能实现VS Code内代码快速跳转+多层次美观注释？","url":"/article/18239a06.html","content":"\n---\n\n**创建时间**：2022年4月28日19:18:45\n**最新更新**：2022年4月30日12:34:30\n\n---\n\n**Problem Description**：Visual Studio Code Comment plugin recommended configuration combination, does it enable fast code jumping within VS Code + multi-level beautiful comments?\n\n**核心思路**：\n* 几个插件\n\t* 快速跳转`Comment Anchors`\n\t* 代码注释分段`Comment Divider`\n\t* 代码Box注释`Box Comment`\n\t\t* `Comment Box`也行，就是感觉效果有待提高\n* 按位置分\n\t* 功能块头用`Box Comment`+`Comment Anchors`注释并设定锚点\n\t* 内容分段用`Comment Divider`\n\n\n---\n\n# 插件介绍\n\n* 见[Box Comment修复版Release——Visual Studio Code如何给注释块添加自定义的方框？如何添加带Box的美化注释块？](./dbacadce.html)\n\n# 实现\n* 现希望实现区分功能头与内容分段的代码注释，如\n\t* 代码块名字是`Function 1`\n\t* 代码块的锚点是`ANCHOR: Function 1`\n\t* 代码块有3段\n\t\t* 功能段1`Abi.1`\n\t\t* 功能段2`Abi.2`\n\t\t* 功能段3`Abi.3`\n* 注释实现\n\t* 功能块头用`Box Comment`\n\t  * [我整的Release](https://github.com/Myoontyee/vscode-box-comment-withRelease/releases/tag/v1.0.0)\n\t  * ![image-20220430123813927](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220430123813927.png)\n\t* 锚点用`Comment Anchors`\n\t  * ![image-20220430123827305](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220430123827305.png)\n\t* 内容分段用`Comment Divider`\n\t  * ![image-20220430123832656](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220430123832656.png)\n\t\n* 实现步骤如下几图\n\t* 前面代码行数是个示例，不用管\n\t\t* ![image-20220429211317877](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220429211317877.png)\n\t* 按快捷键<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>;</kbd>\n\t\t* ![image-20220429211324990](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220429211324990.png)\n\t* 功能块`Start`用<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>X</kbd>\n\t* 功能块`End`用<kbd>Alt</kbd>+<kbd>X</kbd>\n\t* 得到下下图\n\t\t* ![image-20220429211328454](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220429211328454.png)\n\t\t* ![image-20220429211331513](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220429211331513.png)\n\n* 实现效果如下\n\n```C++\n/* \n\n  ╔═════════════════════════════════════════════════════╗\n  ║ Function 1                                          ║\n  ╠═════════════════════════════════════════════════════╣\n  ║ ANCHOR: Function 1                                  ║\n  ╚═════════════════════════════════════════════════════╝\n\n */\n  /* -------------------------------------------------------------------------- */\n  /*                                 Abi.1 Start                                */\n  /* -------------------------------------------------------------------------- */\n  G4cout << \"Abi.1\" << G4endl;\n  /* -------------------------------- Abi.1 End ------------------------------- */\n\n\n\n  /* -------------------------------------------------------------------------- */\n  /*                                 Abi.2 Start                                */\n  /* -------------------------------------------------------------------------- */\n  G4cout << \"Abi.2\" << G4endl;\n  /* -------------------------------- Abi.2 End ------------------------------- */\n\n\n\n\n  /* -------------------------------------------------------------------------- */\n  /*                                 Abi.3 Start                                */\n  /* -------------------------------------------------------------------------- */\n  G4cout << \"Abi.3\" << G4endl;\n  /* -------------------------------- Abi.3 End ------------------------------- */\n\n```\n\n* 包含的锚点在这\n  * **锚点插件**是`Comment Anchors`\n  * ![image-20220429211337570](Visual-Studio-Code注释Comment插件推荐配置组合/image-20220429211337570.png)\n","tags":["Visual Studio Code","Plugins"],"categories":["Visual Studio Code"]},{"title":"Box Comment修复版Release——Visual Studio Code如何给注释块添加自定义的方框？如何添加带Box的美化注释块？","url":"/article/dbacadce.html","content":"\n---\n\n**创建时间**：2022年4月28日10:57:03\n**最新更新**：2022年4月29日15:33:16\n\n---\n\n**Problem Description**：Box Comment Fix Version Release - How to add a custom box to a comment block in Visual Studio Code? How to add a beautified comment block with Box?\n\n**核心思路**：\n* 两个插件推荐（俩名儿反过来...）\n\t* `Box Comment`插件\n\t* `Comment Box`插件\n* 这里提供的是支持多行文本的`Comment Box`插件，`Comment Divider`不支持多行文本的`Comment Box`注释，故此处不做推荐\n\n---\n\n* 像下面这样带方框的注释，其实英文就是`Box Comment`\n\t* 下面第一个是`Box Comment`画的（指默认配置）\n\t* 下面第二个是`Comment Box`画的（指默认配置）\n\t\t* 可以通过设置达到类似或一样的效果\n\t\t* 我更喜欢`Box Comment`画的，但原作者很久没维护，[Willasm修复的版本](https://github.com/willasm/vscode-box-comment)没有编译，编译搞了我半天..\n\t\t\t* 我直接Release了一个带编译的`.vsix`版本，大家可以直接用，[代码仓Release](https://github.com/Myoontyee/vscode-box-comment-withRelease/releases/tag/v1.0.0)\n\n```\n// ╔══════════════════════════════════════════════════════════╗  \n// ║ Lorem ipsum dolor sit amet \t\t\t\t\t\t\t  ║  \n// ╠══════════════════════════════════════════════════════════╣  \n// ║ Consectetur adipiscing elit                              ║  \n// ╚══════════════════════════════════════════════════════════╝\n```\n\n```\n/***********************  \n* COULD YOU *  \n* COMMENT BOX THIS? *  \n* PRETTY PLEASE (*.*) *  \n***********************/\n```\n\n\n\n\n# Box Comment\n* `Polymer Mallard`佬画了一个周末写的..牛逼！\n\t* 但是`Visual Studio Code`的`扩展`里直接安装的版本有BUG！没法配置，快捷键无响应\n* 原作者很久没维护，[Willasm修复的版本](https://github.com/willasm/vscode-box-comment)没有编译，编译搞了我半天..\n* 我直接Release了一个带编译的`.vsix`版本，大家可以直接用，[代码仓Release](https://github.com/Myoontyee/vscode-box-comment-withRelease/releases/tag/v1.0.0)\n\n* ![image-20220429153608469](Box-Comment修复版Release——Visual/image-20220429153608469.png)\n\n## 一些Tricks\n* `Polymer Mallard`佬的版本支持分割线，实际上这个功能让注释显得很美观，像下面这样\n\t* 输入下面的内容，选中内容，按快捷键，得到下下块注释效果\n\t\t* 我提供的版本快捷键是<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>;</kbd>\n\n```\nLorem ipsum dolor sit amet  \n--  \nConsectetur adipiscing elit\n```\n\n```\n// ╔══════════════════════════════════════════════════════════╗\n// ║ Lorem ipsum dolor sit amet                               ║\n// ╠══════════════════════════════════════════════════════════╣\n// ║ Consectetur adipiscing elit                              ║\n// ╚══════════════════════════════════════════════════════════╝\n```\n\n# Comment Box\n\n* `Comment Box`是`SlySherZ`佬写的版本，如下图\n  * ![image-20220429153613691](Box-Comment修复版Release——Visual/image-20220429153613691.png)\n\n* 经过设置可以搞成这样\n\n```\n##############################\n#         THIS IS A          #\n# MULTI-LINE COMMENT EXAMPLE #\n##############################\n```\n\n\n# Ref\n* [Comment Box](https://marketplace.visualstudio.com/items?itemName=slysherz.comment-box)\n* [VSCode Extension: Box Comment](https://medium.com/@mattkenefick/vscode-extension-box-comment-a4be66785bdc)\n* [vscode-box-comment-withRelease](https://github.com/Myoontyee/vscode-box-comment-withRelease)\n","tags":["Visual Studio Code","Plugins"],"categories":["Visual Studio Code","Plugins"]},{"title":"Visual Studio Code如何编译插件源码？二次开发咋搞？","url":"/article/abf71111.html","content":"\n---\n\n**创建时间**：2022年4月28日17:47:58\n**最新更新**：2022年4月29日11:43:49\n\n---\n\n**Problem Description**：How do I compile plugin source code for Visual Studio Code? How do I do secondary development?\n\n**核心思路**：\n* 装`yo`和`generator-code`脚手架\n* 装`yarn`（装完的这步不用，没装的等下当场报错跟你讲）\n* 装`vsce`（可能报错，博文里给出了2种指令）\n* 编译`.vsix`\n* 通过`.vsix`给`Visual Studio Code`装插件\n\n---\n\n# 装必备插件\n* 打开`Bash`（我用的`Git-Bash`），输入如下指令\n\n```bash\nnpm install -g yo generator-code\n```\n\n## 你要有源码不用干这步：自己初始化一个项目，你也可以yo一下\n* 你如果想自己搞一个新的插件项目，你就在`Bash`输入如下指令\n\t* 按照你的需求选，你也可以依次选择，下面是一个示例\n\t  * `New Extension (JavaScript)`\n\t  * 设你想要的插件名\n\t  * 设你想要的项目名，或者直接用括号里的\n\t  * 写你对插件的描述\n\t  * 在js文件中启动语义检测，`jsconfig.json`中`compilerOptions.checkJs`会变为`true`：`Y`\n\t  * 是否初始化`Git`仓库：`Y`\n\t  * 选你想要的包管理方式：`yarn`\n\t* 各个选项的区别\n\t  * `New Extension (TypeScript)` ：`TypeScript`语法的项目，内置hello world命令\n\t  * `New Extension (JavaScript)` : `JavaScript`语法的项目，内置了hello world命令\n\t  * `New Color Theme` ：主题项目，内置了主题，用于自定义主题\n\t  * `New Language Support`：语言支持项目，内置了语法支持配置，用于支持特殊语言\n\t  * `New Code Snippets`：代码片段项目，内置了代码片段配置，用于配置代码片段，输入触发字符，快速生成代码片段\n\t  * `New Keymap`：快捷键项目，内置了快捷键配置，用于自定义快捷键行为\n\t  * `New Extension Pack`：插件集合项目，内置了插件集合配置，用于定制插件集，可实现快速安装一组插件\n\t  * `New Language Pack (Localization)`：暂未查到\n\n\n```bash\nyo code\n```\n\n* ![image-20220429151149043](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151149043.png)\n* ![image-20220429151154257](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151154257.png)\n* ![image-20220429151159737](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151159737.png)\n* ![image-20220429151207361](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151207361.png)\n* ![image-20220429151213172](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151213172.png)\n* ![image-20220429151217746](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151217746.png)\n* ![image-20220429151221355](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151221355.png)\n\n# yarn\n* 不装可能报错，在`Bash`里输入如下指令装`yarn`\n\t* 报错见[配置Visual Studio Code插件时提示'yarn' 不是内部或外部命令，也不是可运行的程序 解决办法](./a88b7358.html)\n\n```bash\nnpm install -g yarn\n```\n\n# vsce\n* 在`Bash`内输入如下指令安装`vsce`\n\t* 下面给出2个指令，一个不行就换另一个~\n\t* 我用`npm install -g vsce`会报错...用下面就行\n```bash\nnpm install -g vsce\n```\n\n```bash\nnpm install --global vsce\n```\n\n# 编译出.vsix\n* 进入你搞到的插件源码所在目录，如下图，在`Bash`内输入如下指令即可得到`.vsix`文件\n\t* 一个成功的示例如下下图\n\n```bash\nvsce package\n```\n\n* ![image-20220429151254074](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151254074.png)\n* ![image-20220429151301774](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151301774.png)\n* 编译出来长这样\n\t* ![image-20220429151307220](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151307220.png)\n\n# 给Visual Studio Code装插件\n* 打开`Visual Studio Code`，点`扩展`→`···`→`从VSIX安装...`→选他→`安装`→安装成功后右下角会有提示，你也能在`扩展`里找到他\n\t* ![image-20220429151311361](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151311361.png)\n\t* ![image-20220429151316025](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151316025.png)\n\t* ![image-20220429151321523](Visual-Studio-Code如何编译插件源码？二次开发咋搞？/image-20220429151321523.png)\n\n# Ref\n* [vsce](https://www.npmjs.com/package/vsce)\n* [记一次前端\"vscode插件编写实战\"超详细的分享会(建议收藏哦)(上篇)](https://segmentfault.com/a/1190000038553748)\n* [从0到1开发一款自己的vscode插件](https://segmentfault.com/a/1190000040720760)\n* [vscode插件开发指南(一)-理论篇](https://juejin.cn/post/6960626872791072798)\n","tags":["Visual Studio Code","Plugins"],"categories":["Visual Studio Code"]},{"title":"Visual Studio Code怎么打开settings.json文件","url":"/article/2fa93e53.html","content":"\n---\n\n**创建时间**：2022年4月29日11:09:59\n**最新更新**：2022年4月29日11:09:59\n\n---\n\n**Problem Description**：How to open settings.json file in Visual Studio Code\n\n**核心思路**：<kbd>F1</kbd>或者<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>，再输入`setjson`\n\n---\n\n# 打开Visual Studio Code配置\n* 在`Visual Studio Code`内按<kbd>F1</kbd>，输入`setjson`，选择`打开设置(json)`\n\t* <kbd>F1</kbd>这个快捷键冲突的话，就按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>\n\t* ![image-20220429111114788](Visual-Studio-Code怎么打开settings-json文件/image-20220429111114788.png)\n\n# Ref\n* [VSCode怎么打开settings.json文件](https://blog.csdn.net/weixin_43798960/article/details/109362907)\n","tags":["Visual Studio Code"],"categories":["Visual Studio Code"]},{"title":"配置Visual Studio Code插件时提示'yarn' 不是内部或外部命令，也不是可运行的程序 解决办法","url":"/article/a88b7358.html","content":"\n---\n\n**创建时间**：2022年4月28日23:24:26\n**最新更新**：2022年4月28日23:25:16\n\n---\n\n**Problem Description**：When configuring the Visual Studio Code plug-in, 'yarn' is not an internal or external command, nor is it a runnable program Solution\n\n**核心思路**：`npm install -g yarn`\n\n---\n\n* 估计是没装`yarn`\n\n# 解决\n* 打开`Bash`，我用的`Git-Bash`，输入如下指令即可\n\n```bash\nnpm install -g yarn\n```\n\n# Ref\n* [yarn安装后提示‘yarn‘ 不是内部或外部命令，也不是可运行的程序的解决方法](https://blog.csdn.net/weixin_45264991/article/details/109059952)\n","tags":["Visual Studio Code","Plugins","yarn"],"categories":["Visual Studio Code"]},{"title":"Geant4如何开启Track的信息打印？","url":"/article/bd02c9ca.html","content":"\n---\n\n**创建时间**：2022年4月27日16:41:10\n**最新更新**：2022年4月27日16:47:03\n\n---\n\n**Problem Description**：How does Geant4 enable Track's information printing?\n\n**核心思路**：\n* 用宏指令`/tracking/verbose 1`\n* `/tracking/verbose 0`是不打印\n\n---\n\n# 具体操作\n* 打开你的对应`.mac`文件输入`/tracking/verbose 1`\n\t* 我如果奔着在可视化窗口能打印这个信息，运行时候不打印，那我就在`vis.mac`加就行\n\t* 或者直接在`GUI`窗口输入`/tracking/verbose 1`（下面图里就是这个操作）\n* 编译对应项目，在`bash`内进入对应项目文件夹的`build`文件夹，`cmake ..`，`make -j16`，然后运行，以`B5`为例，就是在`bash`内输入`./exampleB5`\n* 输入这个指令`/tracking/verbose 1`，回车\n\t* ![image-20220427164838728](Geant4如何开启Track的信息打印？/image-20220427164838728.png)\n* `run/beamOn 1`，看`bash`内打印效果如下图\n\t* 这个操作会降低运算效率，所以实际跑的时候还是得关\n\t* 要么你想提效率，不开`GUI`跑这个也行，看看打印信息\n\t* ![image-20220427164843184](Geant4如何开启Track的信息打印？/image-20220427164843184.png)\n","tags":["Geant4"],"categories":["Geant4"]},{"title":"Hexo + Chic 在同一行实现左中右内容布局，Markdown（Typora）与Obsidian亦可参考","url":"/article/46fb7fa8.html","content":"\n---\n\n**创建时间**：2022年4月27日10:05:49\n**最新更新**：2022年4月27日10:22:44\n\n---\n\n**Problem Description**：Hexo + Chic achieve left-center-right content layout on the same line\n\n**核心思路**：用`HTML`语法\n\n---\n\n* 后头做简历页面基于这个教程\n\n\n# 实现代码及效果\n```html\n<div style=\"float: left\">左边</div>\n<div style=\"float: right\">右边</div>\n<div style=\"margin: 0 auto; width: 100px;\">中间是我~</div>\n```\n\n<div style=\"float: left\">左边</div>\n<div style=\"float: right\">右边</div>\n<div style=\"margin: 0 auto; width: 100px;\">中间是我~</div>\n\n\n# 更复杂一点\n```html\n<div style=\"display:table; width:100%;\">\n    <div style=\"display:table-row\">\n        <div style=\"display:table-cell; width:25%\">left text</div>\n        <div style=\"display:table-cell; text-align:center; width:50%;\">center text</div>\n        <div style=\"display:table-cell; text-align:right; width:25%;\">right text</div>\n    </div>\n</div>\n\n<div class=\"table\">\n    <div style=\"display:table-row\">\n        <div style=\"display:table-cell; width:25%\">left text with a label that is quite a bit longer</div>\n        <div style=\"display:table-cell; text-align:center; width:50%;\">center text</div>\n        <div style=\"display:table-cell; text-align:right; width:25%;\">right text</div>\n    </div>\n</div>\n<div style=\"display:table; width:100%;\">\n    <div style=\"display:table-row\">\n        <div style=\"display:table-cell; width:25%\">left text with a label that is quite a bit longer</div>\n        <div style=\"display:table-cell; text-align:center; width:50%;\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc,</div>\n        <div style=\"display:table-cell; text-align:right; width:25%;\">right text</div>\n    </div>\n</div>\n```\n\n\n<div style=\"display:table; width:100%;\">\n    <div style=\"display:table-row\">\n        <div style=\"display:table-cell; width:25%\">left text</div>\n        <div style=\"display:table-cell; text-align:center; width:50%;\">center text</div>\n        <div style=\"display:table-cell; text-align:right; width:25%;\">right text</div>\n    </div>\n</div>\n\n<div class=\"table\">\n    <div style=\"display:table-row\">\n        <div style=\"display:table-cell; width:25%\">left text with a label that is quite a bit longer</div>\n        <div style=\"display:table-cell; text-align:center; width:50%;\">center text</div>\n        <div style=\"display:table-cell; text-align:right; width:25%;\">right text</div>\n    </div>\n</div>\n<div style=\"display:table; width:100%;\">\n    <div style=\"display:table-row\">\n        <div style=\"display:table-cell; width:25%\">left text with a label that is quite a bit longer</div>\n        <div style=\"display:table-cell; text-align:center; width:50%;\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc,</div>\n        <div style=\"display:table-cell; text-align:right; width:25%;\">right text</div>\n    </div>\n</div>\n\n\n\n\n\n\n\n\n# Ref\n* [Left-, center-, and right-aligned text on the same line](https://stackoverflow.com/questions/8523028/left-center-and-right-aligned-text-on-the-same-line)\n* [【Typora】如何使用Markdown插入一段文字，部分左对齐，部分右对齐](https://www.csdn.net/tags/OtTaMg3sMzIwNzUtYmxvZwO0O0OO0O0O.html)\n","tags":["Hexo","Chic","CV","HTML","CSS","Obsidian","Markdown","Typora"],"categories":["博客搭建","Obsidian","Typora","Markdown"]},{"title":"Visual Studio Code内报BUILD command invoked.   Cannot find LaTeX root file.  解决办法","url":"/article/4743966.html","content":"\n---\n\n**创建时间**：2022年4月26日09:42:41\n**最新更新**：2022年4月26日09:42:41\n\n---\n\n**Problem Description**：Visual Studio Code Error : BUILD command invoked.   Cannot find LaTeX root file.  Solution\n\n**核心思路**：`settings.json`配置没配置对，或者没选择对应的语言`LaTeX`\n\n---\n\n# 错误原因\n* 网上有些教程不是最新的了，记得看时间\n* 有2个可能\n\t* `settings.json`没配置对\n\t* or没有选择对应的语言`LaTeX`\n\n* 两种错误都是在`Visual Studio Code`内解决\n\n# 错误原因1解决\n* 具体见[[WSL2 + Visual Studio Code + LaTeX 配置教程]]\n\t* 将你的配置和下面这个对比一下，不行直接复制粘贴我下面这个也行\n* 在`Visual Studio Code`内按<kbd>F1</kbd>，输入`setjson`，选择`打开设置(json)`\n  *  <kbd>F1</kbd>这个快捷键冲突的话，就按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>\n  * ![image-20220426095059219](Visual-Studio-Code内报BUILD/image-20220426095059219.png)\n\n* 在`\"latex-workshop.intellisense.biblatexJSON.replace\": {},`语句下方添加如下语句，然后保存\n  * 注意一定要在最外侧的大括号`{}`内添加\n\n```json\n    \"latex-workshop.latex.tools\": [\n        {\n          \"name\": \"texify\",\n          \"command\": \"texify\",\n          \"args\": [\n            \"--synctex\",\n            \"--pdf\",\n            \"--tex-option=\\\"-interaction=nonstopmode\\\"\",\n            \"--tex-option=\\\"-file-line-error\\\"\",\n            \"%DOC%.tex\"\n          ]\n        },\n        {\n            // 编译工具和命令\n            \"name\": \"xelatex\",\n            \"command\": \"xelatex\",\n            \"args\": [\n                \"-synctex=1\",\n                \"-interaction=nonstopmode\",\n                \"-file-line-error\",\n                \"%DOC%\"\n            ]\n        },\n        {\n            \"name\": \"pdflatex\",\n            \"command\": \"pdflatex\",\n            \"args\": [\n                \"-synctex=1\",\n                \"-interaction=nonstopmode\",\n                \"-file-line-error\",\n                \"%DOC%\"\n            ]\n        },\n        {\n            \"name\": \"bibtex\",\n            \"command\": \"bibtex\",\n            \"args\": [\n                \"%DOCFILE%\"\n            ]\n        }\n      ],\n    \"latex-workshop.latex.recipes\": [\n        {\n          \"name\": \"PDFLaTeX\",\n          \"tools\": [\n            \"pdflatex\"\n          ]\n      \t},\n        {\n          \"name\": \"XeLaTeX\",\n          \"tools\": [\n            \"xelatex\"\n          ]\n        },\n        {\n          \"name\": \"latexmk\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        },\n        {\n          \"name\": \"BibTeX\",\n          \"tools\": [\n            \"bibtex\"\n          ]\n        },\n        {\n          \"name\": \"pdflatex -> bibtex -> pdflatex*2\",\n          \"tools\": [\n            \"pdflatex\",\n            \"bibtex\",\n            \"pdflatex\",\n            \"pdflatex\"\n          ]\n        },\n        {\n          \"name\": \"xelatex -> bibtex -> xelatex*2\",\n          \"tools\": [\n            \"xelatex\",\n            \"bibtex\",\n            \"xelatex\",\n            \"xelatex\"\n          ]\n        }\n    ],\n```\n\n# 错误原因2解决\n* 看`Visual Studio Code`对应项目右下角，是不是选了`LaTeX`这个语言，如果没有则选择`LaTeX`这个语言\n\t* ![image-20220426095110150](Visual-Studio-Code内报BUILD/image-20220426095110150.png)\n\n\n\n# Ref\n* [VScode配置latex时 出现 “Cannot find LaTeX root file”且文本无高亮提示，不显示tex图标](https://blog.csdn.net/weixin_42331859/article/details/109248743)\n","tags":["Visual Studio Code","LaTeX","WSL2"],"categories":["LaTeX"]},{"title":"WSL2 + Visual Studio Code + LaTeX 配置教程","url":"/article/485df768.html","content":"\n---\n\n**创建时间**：2022年4月25日11:31:01\n**最新更新**：2022年4月26日09:53:09\n\n---\n\n**Problem Description**：WSL2 + Visual Studio Code + LaTeX configuration tutorial\n\n**核心思路**：\n* 装`TeX Live`\n* 同步字体\n* `Visual Studio Code`里装拓展`LaTeX Workshop`\n* 配置拓展\n* 做测试\n\n---\n\n**环境**：\n* Windows 10 21H2\n* WSL 2\n* Ubuntu 20.04 LTS on Windows\n* Visual Studio Code 1.66.2\n* TeX Live 2022\n* LaTeX Workshop v8.25.0\n\n---\n\n# 安装Tex Live\n* 进入[华为云镜像](https://mirrors.huaweicloud.com/CTAN/systems/texlive/tlnet/)，选`install-tl-unx.tar.gz`这个安装\n\t* ![image-20220425232150743](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232150743.png)\n* 下载下来以后，先解压这个`install-tl-unx.tar.gz`，得到`install-tl-20220424`这样一个文件夹\n\t* 根据你下载的版本不同，后面的数字也会不同\n\t* ![image-20220425232155695](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232155695.png)\n\n\n* 然后打开`bash`（`WSL`的`bash`），进对应目录（解压`install-tl-unx.tar.gz`的目录，这里是进入到`install-tl-20220424`里头）\n* 在`bash`内输入如下指令进行在线安装\n\t* 看到下图信息后，输入`I`，按回车\n\n```bash\n./install-tl -repository https://mirrors.huaweicloud.com/CTAN/systems/texlive/tlnet/\n```\n\n* ![image-20220425232206110](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232206110.png)\n\n* 添加到环境变量，在`bash`内输入如下信息\n\t* 先进`/usr/local/texlive`看看下面的数字文件夹是啥，我装的是`2022`版本所以是`2022`\n\n```bash\ncd /usr/local/texlive/2022/bin/x86_64-linux\n./tlmgr path add\n```\n\n\n* 在`bash`内输入如下信息安装缺少的库+更新\n\n```bash\napt-get install build-essential\ntlmgr update --self --all\n```\n\n# 同步字体\n* 在`bash`内输入如下指令安装`fontconfig`\n\n```bash\napt install fontconfig\n```\n\n* 创建本地配置，在`bash`内输入如下指令\n\n```bash\nvi /etc/fonts/local.conf\n```\n\n* 配置写入，在上一步操作完成后把下面信息复制粘贴进去\n\t* 然后`ESC`，`:wq`保存\n\n```bash\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n    <dir>/mnt/c/Windows/Fonts</dir>\n</fontconfig>\n```\n\n* 在`bash`内输入如下指令刷新字体缓存\n\n```bash\nfc-cache -fv\n```\n\n# WSL + Visual Studio Code安装插件\n* 先在对应目录打开`Remote - WSL`，启动`WSL`环境，后在拓展中找到`LaTeX Workshop`安装\n  * ![image-20220425232244903](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232244903.png)\n  * ![image-20220425232224189](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232224189.png)\n\n\n# Visual Studio Code配置\n* 在`Visual Studio Code`内按<kbd>F1</kbd>，输入`setjson`，选择`打开设置(json)`\n  * <kbd>F1</kbd>这个快捷键冲突的话，就按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>\n  * ![image-20220425232253235](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232253235.png)\n\n* 在`\"latex-workshop.intellisense.biblatexJSON.replace\": {},`语句下方添加如下语句，然后保存\n  * 注意一定要在最外侧的大括号`{}`内添加\n\n```json\n    \"latex-workshop.latex.tools\": [\n        {\n          \"name\": \"texify\",\n          \"command\": \"texify\",\n          \"args\": [\n            \"--synctex\",\n            \"--pdf\",\n            \"--tex-option=\\\"-interaction=nonstopmode\\\"\",\n            \"--tex-option=\\\"-file-line-error\\\"\",\n            \"%DOC%.tex\"\n          ]\n        },\n        {\n            // 编译工具和命令\n            \"name\": \"xelatex\",\n            \"command\": \"xelatex\",\n            \"args\": [\n                \"-synctex=1\",\n                \"-interaction=nonstopmode\",\n                \"-file-line-error\",\n                \"%DOC%\"\n            ]\n        },\n        {\n            \"name\": \"pdflatex\",\n            \"command\": \"pdflatex\",\n            \"args\": [\n                \"-synctex=1\",\n                \"-interaction=nonstopmode\",\n                \"-file-line-error\",\n                \"%DOC%\"\n            ]\n        },\n        {\n            \"name\": \"bibtex\",\n            \"command\": \"bibtex\",\n            \"args\": [\n                \"%DOCFILE%\"\n            ]\n        }\n      ],\n    \"latex-workshop.latex.recipes\": [\n        {\n          \"name\": \"PDFLaTeX\",\n          \"tools\": [\n            \"pdflatex\"\n          ]\n      \t},\n        {\n          \"name\": \"XeLaTeX\",\n          \"tools\": [\n            \"xelatex\"\n          ]\n        },\n        {\n          \"name\": \"latexmk\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        },\n        {\n          \"name\": \"BibTeX\",\n          \"tools\": [\n            \"bibtex\"\n          ]\n        },\n        {\n          \"name\": \"pdflatex -> bibtex -> pdflatex*2\",\n          \"tools\": [\n            \"pdflatex\",\n            \"bibtex\",\n            \"pdflatex\",\n            \"pdflatex\"\n          ]\n        },\n        {\n          \"name\": \"xelatex -> bibtex -> xelatex*2\",\n          \"tools\": [\n            \"xelatex\",\n            \"bibtex\",\n            \"xelatex\",\n            \"xelatex\"\n          ]\n        }\n    ],\n```\n\n# 做个测试\n* 在`Visual Studio Code`的项目文件夹内新建一个`test.tex`，输入以下内容，然后`Build LaTeX project`，再`View LaTeX PDF file`\n\t* `Build LaTeX project`是下图那个绿色三角形\n\t* `View LaTeX PDF file`是下图绿色三角形旁边那个\n* 得到如下图所示图像时，表示配置成功！\n\n```tex\n%! TeX program = pdflatex\n\\documentclass{article}\n\n\\begin{document}\n    press ctrl+b to complie, press ctrl+alt+v to view pdf\n\\end{document}\n```\n\n* ![image-20220425232300688](WSL2-Visual-Studio-Code-LaTeX-配置教程/image-20220425232300688.png)\n\n# Ref\n* [在 WSL 中安装 LaTeX](https://www.shushuwoa.com/2021/02/05/%E5%9C%A8-WSL-%E4%B8%AD%E5%AE%89%E8%A3%85-LaTeX/)\n* [使用VSCode编写LaTeX](https://zhuanlan.zhihu.com/p/38178015)\n","tags":["Visual Studio Code","LaTeX","WSL2","WSL"],"categories":["LaTeX","WSL2","Paper"]},{"title":"SolidWorks新建装配体、工程图仍然只能打开零部件，还提示默认模板无效，如何处理？","url":"/article/45b4ed1c.html","content":"\n---\n\n**创建时间**：2022年4月23日10:49:34\n**最新更新**：2022年4月23日10:50:09\n\n---\n\n**Problem Description**：SolidWorks new assembly, engineering drawings can still only open parts, but also prompted the default template is invalid, how to deal with?\n\n**核心思路**：具体定义一下默认模板即可\n\n---\n\n\n\n\n# 设置默认模板\n\n* 打开设置区，点击`工具`→`选项`→`默认模板`→挨个点`...`选模板\n  * ![image-20220423105046531](SolidWorks新建装配体/image-20220423105046531.png)\n  * ![image-20220423105059275](SolidWorks新建装配体/image-20220423105059275.png)\n  * ![image-20220423105104739](SolidWorks新建装配体/image-20220423105104739.png)\n  * ![image-20220423105109723](SolidWorks新建装配体/image-20220423105109723.png)\n    \n\n\n* 工程图一般用A4模板，方便打印\n  * ![image-20220423105118611](SolidWorks新建装配体/image-20220423105118611.png)\n\n\n\n# Ref\n\n* [SolidWorks常见问题精选100问：1默认模板无效，无法新建和打开step模型](http://xifengboke.com/post/1211.html)\n","tags":["SolidWorks"],"categories":["SolidWorks"]},{"title":"Everything如何搜索移动硬盘里的东西？","url":"/article/8a256b25.html","content":"\n---\n\n**创建时间**：2022年4月23日10:39:04\n**最新更新**：2022年4月23日10:43:57\n\n---\n\n**Problem Description**：How does Everything search the contents of a removable drive?\n\n**核心思路**：`管理员模式运行`→`工具`→`选项`→`文件夹`→把移动硬盘路径添加上\n\n---\n\n* 部分电脑连移动硬盘，`Everything`不会添加对应的索引信息，手动添加方法见下\n\n# 添加移动硬盘索引\n* 管理员模式打开`Everything`，`工具`→`选项`→`文件夹`→把移动硬盘路径添加上\n  * ![image-20220423104535921](Everything如何搜索移动硬盘里的东西？/image-20220423104535921.png)\n  * ![image-20220423104541052](Everything如何搜索移动硬盘里的东西？/image-20220423104541052.png)\n  * ![image-20220423104545642](Everything如何搜索移动硬盘里的东西？/image-20220423104545642.png)\n\n* 即可直接搜索移动硬盘里的内容\n  * ![image-20220423104549893](Everything如何搜索移动硬盘里的东西？/image-20220423104549893.png)\n\n\n\n\n# Ref\n* [everything不能读取到移动硬盘](https://blog.csdn.net/weixin_44688675/article/details/107763334)\n","tags":["Everything"],"categories":["Everything"]},{"title":"WSL，WSL2如何在bash里清屏？","url":"/article/5a59e8a1.html","content":"\n---\n\n**创建时间**：2022年4月22日17:51:29\n**最新更新**：2022年4月22日17:54:37\n\n---\n\n**Problem Description**：WSL, WSL2 how to clear screen in bash?\n\n**核心思路**：`bash`内输入`clear`或者`reset`\n\n---\n\n# 清屏\n* 打开`bash`，输入`clear`或`reset`\n\n* `bash`本质是让终端后翻一页，速度较快，在`Windows Terminal`内直观效果与`reset`差别不大\n* `reset`本质是屏幕刷新，清空前面的信息，速度稍慢\n\n\n# Ref\n* [Linux shell清屏](https://blog.csdn.net/u010178308/article/details/77414023)\n* [linux 清屏命令（3种方式）](https://blog.csdn.net/magoyang/article/details/78940767)\n","tags":["WSL2","WSL","Linux","Windows Terminal"],"categories":["WSL","Linux"]},{"title":"Geant4如何在GUI中关闭次级粒子的显示？","url":"/article/209412b0.html","content":"\n---\n\n**创建时间**：2022年4月22日17:20:27\n**最新更新**：2022年4月22日17:23:12\n\n---\n\n**Problem Description**：How can Geant4 turn off the display of secondary particles in the GUI?\n\n**核心思路**：用宏指令~\n\n---\n\n* 效果是红色的和绿色的粒子都会关闭显示，仅保留显示蓝色粒子\n\t* 红色表示负电荷\n\t* 绿色表示中性电荷（如伽马射线）\n\t* 蓝色表示正电荷（如质子、$ e^{ + } $等）\n\n\n# 关闭次级粒子显示\n* 在GUI内输入以下指令\n\n```bash\n/vis/filtering/trajectories/create/attributeFilter secondaries\n/vis/filtering/trajectories/secondaries/setAttribute PID\n/vis/filtering/trajectories/secondaries/addValue 0\n```\n\n# 在此之后想再打开次级粒子的显示\n* 在GUI内输入以下指令\n\n```bash\n/vis/filtering/trajectories/secondaries/invert true\n```\n\n# Ref\n* [Filter primary particles](https://geant4-forum.web.cern.ch/t/filter-primary-particles/4327)\n","tags":["Geant4","GUI","marco"],"categories":["Geant4"]},{"title":"Geant4 提示 adding row has failed 解决办法","url":"/article/ee2299fd.html","content":"\n---\n\n**创建时间**：2022年4月20日10:47:11\n**最新更新**：2022年4月20日10:58:46\n\n---\n\n**Problem Description**：Geant4 prompts `adding row has failed` solution\n\n**核心思路**：`column`这个表头名字缩短点就行，比如`worldPos_LD_2_EmCal_Hits`改成`LD.2_Hits`\n\n---\n\n# 背景故事\n\n* 我代码写的开开心心的，列数＞19列就报错，说没法添加新的行\n* 一开始以为是哪里限定了`ntuple`的最大列数，但是19这个数字又怪怪的，搜源码又搜不到\n* 骚就骚在，导说那既然是`ntuple`的问题，咱们新建一个`ntuple`，再往里头放另外的19列不就好了咩，我一试，好家伙，一样的错\n* 然后我就上Geant4论坛问CERN的大佬，听说人家数理基础极好\n* 人回复说，我们`ntuple`没有最大上限`columns`数啊？\n* 人还做了个测试\n* 好家伙，然后我才头一次正式复现了我的BUG，发现是**列名太长的问题**\n* Well，总之大家也明白解决方法了，如果不太明白，可以看下面的具体操作\n\n# 报错信息\n* 报错信息如下\n\t* 这个报错信息意味着生成数据表时添加新的一行发生错误\n\t* 对应的代码是`src/B5EventAction.cc`中`void B5EventAction::EndOfEventAction(const G4Event *event)`的`analysisManager->AddNtupleRow();`\n\t\t* 意思就是`AddNtupleRow()`这个函数执行过程中出错了\n```bash\n-------- WWWW ------- G4Exception-START -------- WWWW -------\n*** G4Exception : Analysis_W022\n      issued by : G4RootPNtupleManager::AddNtupleRow()\n       ntupleId 0adding row has failed.\n*** This is just a warning message. ***\n-------- WWWW -------- G4Exception-END --------- WWWW -------\n```\n\n* 另外我还测试了，是否是数据表生成时的问题？\n\t* 对应的是`src/B5RunAction.cc`中`B5RunAction::B5RunAction(B5EventAction* eventAction) : G4UserRunAction(), fEventAction(eventAction)`的`analysisManager->CreateNtuple(\"B5\", \"Hits\"); // ntuple Id = 0`及下面的`analysisManager->CreateNtupleIColumn`部分\n* 测试完发现这部分代码是能正常运行的\n* 即报错对应的是`src/B5EventAction.cc`中的代码\n* 错误实际上发生在`src/B5RunAction.cc`中\n* 咋测试的？\n\t* `G4cout`在代码块的头和尾部打印看看能不能正常执行\n\t* 不能正常执行肯定就没法`G4cout`了\n\n# 解决办法\n\n* 核心问题是表头的名字太长了，估计超出了啥变量类型的上限，溢出了，炸了\n* 原本的列名如下\n\t* 我添加了别的列，此处是部分切片\n\t* 原本B5只有不到10列，我加七七八八加到21多列\n\n```C++\n\nanalysisManager->CreateNtupleIColumn(\"worldPos_LD_2_EmCal_Hits\");  // column Id = 18\nanalysisManager                                   // column Id = 19\n->CreateNtupleDColumn(\"worldPos_LD_2_EmCal_x\"); \nanalysisManager                                   // column Id = 20\n->CreateNtupleDColumn(\"worldPos_LD_2_EmCal_y\"); \nanalysisManager                                   // column Id = 21\n->CreateNtupleDColumn(\"worldPos_LD_2_EmCal_z\"); \n```\n\n* 改成类似如下的\n\n```C++\nanalysisManager->CreateNtupleIColumn(\"LD2_Hits\");  // column Id = 18\nanalysisManager                                   // column Id = 19\n->CreateNtupleDColumn(\"LD2_x\"); \nanalysisManager                                   // column Id = 20\n->CreateNtupleDColumn(\"LD2_y\"); \nanalysisManager                                   // column Id = 21\n->CreateNtupleDColumn(\"LD2_z\"); \n```\n\n* 即，修改前后对比如下\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```C++\nanalysisManager->CreateNtupleIColumn(\"worldPos_LD_2_EmCal_Hits\");  // column Id = 18\nanalysisManager                                   // column Id = 19\n->CreateNtupleDColumn(\"worldPos_LD_2_EmCal_x\"); \nanalysisManager                                   // column Id = 20\n->CreateNtupleDColumn(\"worldPos_LD_2_EmCal_y\"); \nanalysisManager                                   // column Id = 21\n->CreateNtupleDColumn(\"worldPos_LD_2_EmCal_z\"); \n```\n</td>\n<td>\n```C++\nanalysisManager->CreateNtupleIColumn(\"LD2_Hits\");  // column Id = 18\nanalysisManager                                   // column Id = 19\n->CreateNtupleDColumn(\"LD2_x\"); \nanalysisManager                                   // column Id = 20\n->CreateNtupleDColumn(\"LD2_y\"); \nanalysisManager                                   // column Id = 21\n->CreateNtupleDColumn(\"LD2_z\"); \n```\n</td>\n</table>\n</div>\n\n\n# Ref\n* [When columns ID >19 , AddNtupleRow gets failed!](https://geant4-forum.web.cern.ch/t/when-columns-id-19-addntuplerow-gets-failed/7698/5)\n","tags":["CERN ROOT","Geant4","B5"],"categories":["Geant4","CERN ROOT"]},{"title":"DeepL在word内用快捷键的时候，没有反应应咋办？","url":"/article/6e881e0b.html","content":"\n---\n\n**创建时间**：2022年4月13日17:54:17\n**最新更新**：2022年4月13日17:57:02\n\n---\n\n**Problem Description**：When DeepL uses shortcut keys in word, what should I do if there is no response?\n\n**核心思路**：**管理员模式**运行DeepL\n\n---\n\n# 解决\n* 以**管理员模式**启动DeepL，设置好快捷键，如下图，要避免和Word本身的快捷键冲突\n* ![image-20220413180106295](DeepL在word内用快捷键的时候，没有反应应咋办？/image-20220413180106295.png)\n* 即可正常使用\n* ![image-20220413180111230](DeepL在word内用快捷键的时候，没有反应应咋办？/image-20220413180111230.png)\n","tags":["Word","office","DeepL"],"categories":["office","DeepL"]},{"title":"Obsidian添加公式序号","url":"/article/711def1.html","content":"\n---\n\n**创建时间**：2022年4月12日10:00:13\n**最新更新**：2022年4月12日10:01:45\n\n---\n\n**Problem Description**：Obsidian adds formula serial number\n\n**核心思路**：`\\tag`的使用，注意和`Hexo`不同\n\n\n---\n\n\n# 加序号\n* 语法是`\\tag {`+序号+`}`\n```markdown\n$$\n\\begin{equation} \\tag{21}\nt_{w}=t_{m} \\frac{\\rho_{m}}{\\rho_{w}} c_{m}\n\\end{equation}\n$$\n```\n\n* 效果如下\n\n![image-20220412100350688](Obsidian添加公式序号/image-20220412100350688.png)\n\n# Ref\n* [Automatic equation numbering (Latex Math)](https://forum.obsidian.md/t/automatic-equation-numbering-latex-math/1325)\n","tags":["Obsidian","Markdown"],"categories":["Obsidian"]},{"title":"WSL，WSL2如何实现一打开bash就可交互式选择是否通过VcXsrv可视化 or 不可视化配置？","url":"/article/15435ad2.html","content":"\n---\n\n**创建时间**：2022年4月11日09:23:44\n**最新更新**：2022年4月11日10:00:47\n\n---\n\n**Problem Description**：How does WSL and WSL2 realize that as soon as bash is opened, it is possible to interactively choose whether to visualize or not visualize the configuration through VcXsrv?\n\n**核心思路**：参考[WSL，WSL2多个想source的环境变量，如何在.bashrc内基于if-else进而在bash内可交互式进行选择？而不用每次使用复杂指令](./54e1736e.html)\n* `if-else`判选+`read`获取值+`echo`打印\n\n---\n\n# 可视化配置\n* 用代码编辑器，如`Notepad++`打开`\\\\wsl$\\Ubuntu-20.04\\root\\.bashrc`，在最下方添加以下内容\n\n```bash\n# 可视化\necho \"\"\necho \"\"\necho \"==================================================\"\necho \"Please input the visible mode you want to choose :\"\necho \"1. Default: Just Print Here\"\necho \"2. Display through VcXsrv\"\necho \"==================================================\"\necho \"The visible mode you want to choose is :\"\nread visType\n\necho \"==================================================\"\necho \"Processing ...\"\necho \"==================================================\"\necho \"The environment you choose is :\"\nif ((visType == 1)); then   \n  echo \"1. Default: Just Print Here\"\n\nelif ((visType == 2)); then\n  echo \"2. Display through VcXsrv\"\n  export DISPLAY=`cat /etc/resolv.conf | grep nameserver | awk '{print $2}'`:0 # 这是WSL2的可视化配置\n  \nelse   \n  echo \"Type Error !\"\nfi\n\necho \"==================================================\"\necho \"Activating ...\"\necho \"==================================================\"\necho \"Display mode activate succeed !\"\necho \"==================================================\"\necho \"\"\necho \"\"\n```\n\n# 效果\n* 如下图\n\t* ![image-20220419104919350](WSL，WSL2如何实现一打开bash就可交互式选择是否通过VcXsrv可视化-or-不可视化配置？/image-20220419104919350.png)\n","tags":["CERN ROOT","Geant4","WSL2","WSL"],"categories":["WSL","WSL2"]},{"title":"WSL2 安装配置ROOT","url":"/article/7dfd3229.html","content":"\n---\n\n**创建时间**：2022年4月10日10:35:24\n**最新更新**：2022年4月10日11:37:31\n\n---\n\n**Problem Description**：WSL2 installation and configuration ROOT\n\n**核心思路**：\n* 装依赖\n* 下二进制文件\n* `source`一下，当然也可以写入bash\n\t* 我的多个`source .sh`的操作会冲突，骚操作见[WSL，WSL2多个想source的环境变量，如何在.bashrc内基于if-else进而在bash内可交互式进行选择？而不用每次使用复杂指令](./54e1736e.html)\n\n---\n\n**环境**：\n* Windows 10 21H2（已实现GPU穿透，GPU穿透见[[WSL2实现GPU穿透]]\n* Ubuntu 20.04 on Windows （WSL2）\n\n---\n\n# 依赖\n* 装依赖，在对应`Bash`内输入\n\n```bash\n# 必选\nsudo apt install dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev libxft-dev libxext-dev python openssl libssl-dev\n# 可选（也都装上）\nsudo apt install gfortran libpcre3-dev xlibmesa-glu-dev libglew1.5-dev libftgl-dev\n default-libmysqlclient-dev libfftw3-dev libcfitsio-dev graphviz-dev libavahi-compat-libdnssd-dev libldap2-dev python-dev libxml2-dev libkrb5-dev libgsl0-dev libqt4-dev\n# 后来发现需要装的\nsudo apt install mpi-default-dev\n```\n\n# 下文件\n* 去[ROOT官网Releases页面](https://root.cern/install/all_releases/)，下你喜欢的版本，我是下最新版，下面箭头指的是最新版对应的页面\n\t* ![image-20220410115509526](WSL2-安装配置ROOT/image-20220410115509526.png)\n* 下`Binary distributions`文件，我对应的是`Ubuntu 20.04`\n\t* 当然你也可以搞到下载链接以后用`wegt`，比如我这个对应的是`wget https://root.cern/download/root_v6.26.00.Linux-ubuntu20-x86_64-gcc9.3.tar.gz`\n\t\t* `wegt`记得要进入你要下载的文件夹后再用~\n\t* ![image-20220410115516088](WSL2-安装配置ROOT/image-20220410115516088.png)\n* 解压，你可以在对应目录下用`tar -xzvf`，比如我这个是进入对应路径后`tar -xzvf root_v6.26.00.Linux-ubuntu20-x86_64-gcc9.3.tar.gz`，也可以手动解压，解压完移入对应的文件夹即可，安装就完成了\n\t* ![image-20220410115521856](WSL2-安装配置ROOT/image-20220410115521856.png)\n\t* ![image-20220410115525449](WSL2-安装配置ROOT/image-20220410115525449.png)\n\n\n# 启用它！\n* 打开`WSL`对应的`bash`，输入`source`+` 你的路径/root/bin/thisroot.sh` ，比如我的是`source /mnt/d/ROOT/main/root/bin/thisroot.sh`\n* 然后输入`root`启用，成功如下图\n\t* ![image-20220410115531203](WSL2-安装配置ROOT/image-20220410115531203.png)\n\n# 其他\n* 多个`source .sh`的操作会冲突，骚操作见[WSL，WSL2多个想source的环境变量，如何在.bashrc内基于if-else进而在bash内可交互式进行选择？而不用每次使用复杂指令](./54e1736e.html)\n* ROOT+WSL2的可视化，见\n\t* [[可视化使用ROOT简要办法]]\n\t* [[ROOT + XMing配置Multiple windows方案，XMing使用One large window无法便捷操作ROOT窗口]]\n\t\t* 注意下面这个教程，最好先完成[WSL2实现GPU穿透](./808f0e36.html)\n\n\n\n# Ref\n* [【ROOT】Win10-WSL安装CERN ROOT (roo6)](<https://taoyi92.github.io/tutorial/%E3%80%90ROOT%E3%80%91Win10-WSL%E5%AE%89%E8%A3%85CERN%20ROOT%20(root6)/>)\n* [基于 WSL2 的 Geant4 和 ROOT 安装教程](https://zhuanlan.zhihu.com/p/374051825)\n","tags":["CERN ROOT","Geant4","WSL2","WSL"],"categories":["WSL","WSL2","CERN ROOT"]},{"title":"WSL，WSL2多个想source的环境变量，如何在.bashrc内基于if-else进而在bash内可交互式进行选择？而不用每次使用复杂指令","url":"/article/54e1736e.html","content":"\n---\n\n**创建时间**：2022年4月10日10:11:38\n**最新更新**：2022年4月10日11:43:55\n\n---\n\n**Problem Description**：WSL, WSL2 has multiple environment variables that you want to source, how to interactively select them based on if-else in .bashrc and then in bash? instead of using complex instructions every time\n\n**核心思路**：\n* `.bashrc`的`read`读数据\n* `.bashrc`的`echo`打印内容\n* `.bashrc`的`if-else`语句进行判断\n\n---\n\n# 配置\n* 打开`.bashrc`，我用`Notepad++`直接开的\n\t* `\\\\wsl$\\Ubuntu-20.04\\root\\.bashrc`约莫在这个路径\n\n* 在`.bashrc`最下方添加如下代码，保存，然后打开一个新的`bash`就好啦\n\t* 基于`if-else`实现，就是按对应序号选\n\t* `read envType`接受变量输入\n\t* `echo`相当于`Python`的`print`\n\t* 需要替换的部分\n\t\t* `改成你自己的Geant4安装路径，记得有mnt`这个部分记得替换成你自己的`Geant4`安装路径\n\t\t* `改成你自己的ROOT安装路径，记得有mnt`这个部分记得替换成你自己的`ROOT`安装路径\n\n```bash\n# 选择你需要的环境变量\necho \"==================================================\"\necho \"Please input the environment you want to choose :\"\necho \"1. Default: WSL + Python with Jupyter\"\necho \"2. Geant4\"\necho \"3. ROOT\"\necho \"==================================================\"\necho \"The environment number you want to choose is :\"\nread envType\n\necho \"==================================================\"\necho \"Processing ...\"\necho \"==================================================\"\necho \"The environment you choose is :\"\nif ((envType == 1)); then   \n  echo \"1. default: WSL + Python with Jupyter\"\n\nelif ((envType == 2)); then\n  echo \"2. Geant4\"\n  source 改成你自己的Geant4安装路径，记得有mnt/install/bin/geant4.sh\n  echo \"The path is : 改成你自己的Geant4安装路径，记得有mnt/install/bin/geant4.sh\"\nelif ((envType == 3)); then\n  echo \"3. ROOT\"\n  source 改成你自己的ROOT安装路径，记得有mnt/bin/thisroot.sh\n  echo \"The path is : 改成你自己的ROOT安装路径，记得有mnt/bin/thisroot.sh\"\nelse   \n  echo \"Type Error !\"\nfi\n\necho \"==================================================\"\necho \"Activating ...\"\necho \"==================================================\"\necho \"Environment activate succeed !\"\necho \"==================================================\"\n```\n\n# 效果\n* 如下图，很爽现在\n\t* ![image-20220410115148838](WSL，WSL2多个想source的环境变量，如何在-bashrc内基于if-else进而在bash内可交互式进行选择？而不用每次使用复杂指令/image-20220410115148838.png)\n\n# Ref\n* [Checking if an input number is an integer](https://unix.stackexchange.com/questions/151654/checking-if-an-input-number-is-an-integer)\n* [Bash: If, Else If, Else Examples](https://linuxhint.com/bash_if_else_examples/)\n","tags":["CERN ROOT","Geant4","WSL2","WSL"],"categories":["WSL","WSL2"]},{"title":"Hexo + Chic设置kbd样式，code、samp等样式亦可参考","url":"/article/96b62d8a.html","content":"\n---\n\n**创建时间**：2022年4月9日19:57:17\n**最新更新**：2022年4月9日20:00:35\n\n---\n\n**Problem Description**：Hexo + Chic sets the kbd style, code, samp and other styles can also refer to this post\n\n**核心思路**：调`themes\\Chic\\source\\css\\normalize.styl`的`kbd`部分\n\n---\n\n# 设置样式\n* 用代码编辑器打开`themes\\Chic\\source\\css\\normalize.styl`，找到`kbd`，添加修改内容如下\n\n```css\ncode\n  font-family monospace, monospace /* 1 */\n  font-size 1em /* 2 */\nkbd \n  display: inline-block;\n  margin: 0 .1em;\n  padding: .1em .6em;\n  font-family: Arial,\"Helvetica Neue\",Helvetica,sans-serif;\n  font-size: 11px;\n  line-height: 1.4;\n  color: #242729;\n  text-shadow: 0 1px 0 #FFF;\n  background-color: #e1e3e5;\n  border: 1px solid #adb3b9;\n  border-radius: 3px;\n  box-shadow: 0 1px 0 rgba(12,13,14,0.2), 0 0 0 2px #FFF inset;\n  white-space: nowrap;\nsamp\n  font-family monospace, monospace /* 1 */\n  font-size 1em /* 2 */\n```\n\n* 修改前后代码对比如下\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```css\ncode,\nkbd,\nsamp\n  font-family monospace, monospace /* 1 */\n  font-size 1em /* 2 */\n```\n</td>\n<td>\n```css\ncode\n  font-family monospace, monospace /* 1 */\n  font-size 1em /* 2 */\nkbd \n  display: inline-block;\n  margin: 0 .1em;\n  padding: .1em .6em;\n  font-family: Arial,\"Helvetica Neue\",Helvetica,sans-serif;\n  font-size: 11px;\n  line-height: 1.4;\n  color: #242729;\n  text-shadow: 0 1px 0 #FFF;\n  background-color: #e1e3e5;\n  border: 1px solid #adb3b9;\n  border-radius: 3px;\n  box-shadow: 0 1px 0 rgba(12,13,14,0.2), 0 0 0 2px #FFF inset;\n  white-space: nowrap;\nsamp\n  font-family monospace, monospace /* 1 */\n  font-size 1em /* 2 */\n```\n</td>\n</table>\n</div>\n\n# 部署\n* 保存，去`Git-Bash`，进入Blog源码所在根目录，`hexo clean`，`hexo g`，`hexo s`就能看到效果，`hexo d`部署上去，效果如下图\n  * 下图的源码是`<kbd>Shift</kbd>+<kbd>Enter</kbd>`\n\n\n![image-20220409200413427](Hexo-Chic设置kbd样式，code、samp等样式亦可参考/image-20220409200413427.png)\n\n# Ref\n* [HEXO × 样式实践笔记](http://techoffee.me/hexo/advance/)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Word实现多行插入公式，使用同一个公式序号","url":"/article/6d4ee85a.html","content":"\n---\n\n**创建时间**：2022年4月9日17:20:38\n**最新更新**：2022年4月9日19:46:56\n\n---\n\n**Problem Description**：Word implements multi-line insertion of formulas, using the same formula serial number\n\n**核心思路**：继上一步操作继续，中间加个空行上序号\n\n---\n\n* 前面操作见[Word实现插入多行LaTeX公式，有没有便捷的方法？](./cb2e0f17.html)\n\n# 序号添加\n* 中间加一个空行（通过<kbd>Shift</kbd>+<kbd>Enter</kbd>添加），输入序号`#()`，此处输入的是`#(1)`，得到下下图，自动对齐，这是一整块公式块，如下下下图\n* ![image-20220409194949534](Word实现多行插入公式，使用同一个公式序号/image-20220409194949534.png)\n* ![image-20220409194953345](Word实现多行插入公式，使用同一个公式序号/image-20220409194953345.png)\n* ![image-20220409194956645](Word实现多行插入公式，使用同一个公式序号/image-20220409194956645.png)\n\n# word输入内容\n```word\nE=mc^2\n #(1)\n F=ma\n```\n\n# Ref\n* [Word多行公式的换行、对齐与编号](https://zhuanlan.zhihu.com/p/439988361)\n","tags":["office","word"],"categories":["论文","office"]},{"title":"Word实现插入多行LaTeX公式，有没有便捷的方法？","url":"/article/cb2e0f17.html","content":"\n---\n\n**创建时间**：2022年4月9日17:20:08\n**最新更新**：2022年4月9日19:44:09\n\n---\n\n**Problem Description**：Word implements inserting multi-line LaTeX formulas, is there a convenient way?\n\n**核心思路**：和`MathPix`联用，<kbd>Shift</kbd>+<kbd>Enter</kbd>\n\n---\n\n# MathPix识别，导出为.docx\n* 先OCR，`Export .docx`\n  * ![image-20220409194503729](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194503729.png)\n  * ![image-20220409194508606](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194508606.png)\n\n\n# .docx里头变成同一个公式快\n* 打开这个`.docx`，这是2行公式块\n  * ![image-20220409194514275](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194514275.png)\n\n\n* 在第一行公式块后输入` #()`（注意有一个空格），然后回车\n\t* 这一步目的是为了拓展公式块宽度，同时也是多行公式的准备\n\t  * ![image-20220409194518729](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194518729.png)\n* 光标移到`(`前，按<kbd>Shift</kbd>+<kbd>Enter</kbd>，粘贴第二行的公式，如下下图，删除最后面的`#()`，得到多行公式块如下下下图\n  * ![image-20220409194522258](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194522258.png)\n  * ![image-20220409194526494](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194526494.png)\n  * ![image-20220409194530375](Word实现插入多行LaTeX公式，有没有便捷的方法？/image-20220409194530375.png)\n\n\n\n\n# Ref\n* [Word多行公式的换行、对齐与编号](https://zhuanlan.zhihu.com/p/439988361)\n","tags":["office","word"],"categories":["论文","office"]},{"title":"Word如何实现插入公式的序号？","url":"/article/eab4275e.html","content":"\n---\n\n**创建时间**：2022年4月9日17:19:43\n**最新更新**：2022年4月9日18:48:43\n\n---\n\n**Problem Description**：How does Word implement the serial number inserted into the formula?\n\n**核心思路**：敲完公式，打个空格，输入`#()`，按回车\n\n---\n\n**备注**：Word内添加公式快捷键：<kbd>Alt</kbd>+<kbd>=</kbd>\n\n---\n\n# 序号形成\n* 先敲入你的公式，以`E=mc²`为例\n\n\n\n![image-20220409185024180](Word如何实现插入公式的序号？/image-20220409185024180.png)\n\n* 打个空格，输入`#()`，按回车\n\n\n\n![image-20220409185028619](Word如何实现插入公式的序号？/image-20220409185028619.png)\n* 在对应位置输入序号即可\n\n\n\n![image-20220409185032287](Word如何实现插入公式的序号？/image-20220409185032287.png)\n\n\n\n![image-20220409185036820](Word如何实现插入公式的序号？/image-20220409185036820.png)\n\n# 具体输入\n* Word内，公式具体输入如下，即可形成序号\n```word\nE=mc^2 #(1)\n```\n\n# Ref\n* [Word多行公式的换行、对齐与编号](https://zhuanlan.zhihu.com/p/439988361)\n","tags":["office","word"],"categories":["论文","office"]},{"title":"Python如何识别NaN","url":"/article/6682865e.html","content":"\n---\n\n**创建时间**：2022年4月9日11:37:06\n**最新更新**：2022年4月9日11:43:20\n\n---\n\n**核心思路**：`np.nan` or `np.isnan()`\n\n---\n\n**输入**：数值\n**输出**：`bool`值，`true`或者`false`\n\n---\n\n# 分块\n## 导入库\n* 调用`numpy`库\n```Python\nimport numpy as np\n```\n\n## 进行判别\n* 如果`Num`是`NaN`，返回`true`\n```Python\nNum == np.nan\n```\n\n* 当然，也可以用`np.isnan()`\n\t* 如果是，返回`true`\n\t* 注意`np.isnan()`无法处理小数\n\n```Python\nnp.isnan(Num)\n```\n\n\n# 整体代码\n```Python\n# 导入库\nimport numpy as np\n\n# 进行判别\n# 方式1\nNum == np.nan\n\n# 方式2\n# 无法处理小数\nnp.isnan(Num)\n```\n\n\n# Ref\n* [How can I check for NaN values?](https://stackoverflow.com/questions/944700/how-can-i-check-for-nan-values)\n","tags":["Python","numpy"],"categories":["函数"]},{"title":"Python 删除变量，释放内存","url":"/article/c2c9be22.html","content":"\n---\n\n**创建时间**：2022年4月8日21:33:34\n**最新更新**：2022年4月8日21:44:11\n\n---\n\n**Problem Description**：Python delete variable, free memory\n\n**核心思路**：`gc`库，`del`+`gc.collect()`\n\n---\n\n**输入**：任意Python内变量\n**输出**：对应变量删除并释放内存\n\n---\n\n* 前提是不存在其他对象对该对象的引用\n\n\n# 步骤\n## 导入库\n```Python\nimport gc\n```\n\n## 示例数据\n* 此处可以换为任意形式的任意变量，以`DataFrame`为例\n```Python\nimport pandas as pd\nval = pd.read_csv('./test.csv')\n```\n\n## 实现\n* 删除变量，释放空间\n```Python\ndel val # 待删除的变量\ngc.collect()\n```\n\n# 完整代码\n```Python\n# 导入库\nimport gc\n\n# 此处可以换为任意形式的任意变量\nimport pandas as pd\nval = pd.read_csv('./test.csv')\n\n# 删除变量\ndel val # 待删除的变量\ngc.collect()\n```\n\n# Ref\n* [在Jupyter里按需删除大内存变量并且释放内存](https://blog.csdn.net/qq_37966884/article/details/120195325)\n","tags":["Python","gc"],"categories":["函数"]},{"title":"Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法","url":"/article/c2a5d481.html","content":"\n---\n\n**创建时间**：2022年3月20日23:41:53\n**最新更新**：2022年3月28日17:30:16\n\n\n---\n\n**核心思路**：全局引用对应`.css`文件\n\n\n---\n\n* 原因是打开新的页面，初始化的时候没有初始化调用这些样式，全局引用这些样式就好\n\n# 全局引用\n\n* 用代码编辑器打开`themes\\Chic\\_config.yml`，在`stylesheets:`下添加对应的样式文件，如\n\n```yml\nstylesheets:\n  - /css/style.css\n  - ../fonts/iconfont2/iconfont.css\n  - ../fonts/iconfont3/iconfont.css\n  - //cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css # 访客量的旋转等待logo\n```\n\n* 上面的`../fonts/iconfont3/iconfont.css`就是我下面这些icon的样式对应的`.css`文件\n\n![image-20220329232412189](Hexo-Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法/image-20220329232412189.png)\n\n\n# 效果\n* 打开第2页等、通过类别与标签等打开就能正常显示了\n\n![image-20220329232421168](Hexo-Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法/image-20220329232421168.png)\n![image-20220329232427857](Hexo-Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法/image-20220329232427857.png)\n","categories":["博客搭建"]},{"title":"GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？","url":"/article/f338e400.html","content":"\n---\n\n**创建时间**：2022年3月29日17:20:55\n**最新更新**：2022年3月29日17:21:08\n\n\n---\n\n**核心思路**：\n\n1.建分支\n\n2.配置好blog源码的_config.yml文件与.git下的config文件\n\n3.配置GitHub Pages的Source\n\n---\n\n\n# 建分支（用于源码备份）\n* 打开代码仓，分支→在输入栏里输入一个新的分支名→点`Create`，**这个分支要用于源码备份**\n\n![image-20220329172411508](GitHub-Hexo的个人博客，blog，GitHub-Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？/image-20220329172411508.png)\n\n![image-20220329172431773](GitHub-Hexo的个人博客，blog，GitHub-Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？/image-20220329172431773.png)\n\n# 配置Blog源码根目录文件\n* 打开**Blog源码根目录**下的`_config.yml`文件，拉到最底下，`deploy`下添加新的一行`branch`，输入你想使用的`branch`，比如`master`\n\t* **这个分支要作为页面显示的源码**\n\n![image-20220329172438452](GitHub-Hexo的个人博客，blog，GitHub-Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？/image-20220329172438452.png)\n\n# 配置.git文件下的config文件\n* 简单粗暴的方法，进入代码仓→`Branch`→换成你刚刚建的那个分支→`Code`→复制\n\n![image-20220329172447760](GitHub-Hexo的个人博客，blog，GitHub-Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？/image-20220329172447760.png)\n![image-20220329172454185](GitHub-Hexo的个人博客，blog，GitHub-Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？/image-20220329172454185.png)\n\n* 接下来在本地找个空文件夹，在`Git-Bash`内`cd`到这个空文件夹的路径下→`git clone` + 分支名 + 对应的代码仓路径\n\t* 如`git clone backup git@github.com:Myoontyee/myoontyee.github.io.git`\n* 接下来把`clone`过来的.git文件夹，直接覆盖掉你放**Blog源码根目录**下的.git文件夹\n* 最后可以`git add .`与`git push`做个测试\n\n\n# GitHub Pages的Source配置\n* 浏览器打开代码仓，进入`Settings`→`Pages`→`Source`→选中你前面想用作页面显示的`Branch`，此处是`master`→`Save`\n\n![image-20220329172503786](GitHub-Hexo的个人博客，blog，GitHub-Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？/image-20220329172503786.png)\n\n# 参考\n* [git clone 指定分支 拉代码](https://blog.csdn.net/weixin_39800144/article/details/78205617)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic如何支持数学公式，特别是复杂LaTeX公式，公式会重复显示、LaTeX公式本地预览可以显示deploy上去无法显示解决办法","url":"/article/3d095f62.html","content":"\n---\n\n**创建时间**：2022年4月8日10:26:23\n**最新更新**：2022年4月8日21:24:31\n\n---\n\n**Problem Description**：How does Hexo + Chic support mathematical formulas, especially complex LaTeX formulas, the formulas will be displayed repeatedly, the local preview of LaTeX formulas can display the deploy and cannot display the solution\n\n**核心思路**：\n* 装插件`npm install hexo-renderer-markdown-it-plus`\n* 注意写法，多加空格\n\n---\n\n# 装插件\n* 打开`Git-Bash`，进入Blog源码对应目录，输入以下指令\n```Bash\nnpm uninstall hexo-renderer-marked\nnpm install hexo-renderer-markdown-it-plus\n```\n\n* 配置不用动\n\n# 文件头启用mathjax\n* 文件头记得启用`mathjax: true`\n\n![image-20220408193332562](Hexo-Chic如何支持数学公式，特别是复杂LaTeX公式，公式会重复显示、LaTeX公式本地预览可以显示deploy上去无法显示解决办法/image-20220408193332562.png)\n\n\n\n\n# LaTeX公式写法\n\n## 重复显示咋搞？\n* `0范数$L_{0}$`这么写会重复显示，如下\n0范数$L_{0}$\n放个图：![image-20220408191320294](Hexo-Chic如何支持数学公式，特别是复杂LaTeX公式，公式会重复显示、LaTeX公式本地预览可以显示deploy上去无法显示解决办法/image-20220408191320294.png)\n* 要改成`0范数 $ L_{ 0 } $ `，即尽可能的加空格，特别是多个`}`，如`}}`，要写成`} }`，显示效果如下\n 0范数 $ L_{ 0 } $ \n\n\n## 复杂公式咋搞？\n* 前面加个`\\begin{equation}`，末尾加个`\\end{equation}$$`\n\t* 想定义具体序号就在`\\begin{equation}`后加`\\label{eq1}`，不然会自动按序生成序号\n\t* 注意花式加空格\n\n```LaTeX\n$$ \\begin{equation}\\label{eq1}\n\n\\| \\mathbf{ x } \\|_{0} = \\lim _{ p \\rightarrow 0 } \\| \\mathbf{ x } \\|_{ p }^{ p } = \\lim_{ p \\rightarrow 0 } \\sum_{ k=1 }^{ m}\\left| x_{ k }\\right|^{ p } = \\#\\left\\{ i: x _{ i } \\neq 0 \\right\\}\n\n\\end{equation} $$\n```\n\n* 显示如下\n\n$$ \\begin{equation} \\label{eq1}\n\\| \\mathbf{ x } \\|_{0} = \\lim _{ p \\rightarrow 0 } \\| \\mathbf{ x } \\|_{ p }^{ p } = \\lim_{ p \\rightarrow 0 } \\sum_{ k=1 }^{ m } \\left | x_{ k } \\right |^{ p } = \\# \\left\\{ i: x _{ i } \\neq 0 \\right\\}\n\\end{equation} $$\n\n\n\n\n# Ref\n* [数学公式](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md)\n* [关于数学公式](https://github.com/Siricee/hexo-theme-Chic/issues/79)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Geant4、C++定义全局变量，如何把所有的参数都定义在头文件里？如何使用一个文件存放项目里所有参数？如何传递全局参数？——以Geant4传递射线出射坐标为例","url":"/article/c86dac85.html","content":"\n---\n\n**创建时间**：2022年4月7日15:29:08\n**最新更新**：2022年4月8日10:16:03\n\n---\n\n**Problem Description**：C++ defines global variables, how to define all parameters in the header file? How to use a file to store all the parameters in the project? How to pass global parameters? ——Take Geant4 passing ray exit coordinates as an example\n\n**核心思路**：\n* 通常操作\n\t* 头文件`.h`里声明，源文件`.cpp`里定义\n\t* Geant4头文件是`.hh`，源文件是`.cc`\n* Geant4里的操作\n\t* `include/B5Constants.hh`声明变量（`extern`，不赋值）\n\t* 对应头文件`public`内声明变量，如`include/B5PrimaryGeneratorAction.hh`（`extern`，不赋值）\n\t* 对应源文件\n\t\t* 头部初始化变量（没有`extern`，只定义，如`G4double`，初始化赋值）\n\t\t* 函数部分赋值（没有`extern`，没有定义，直接赋值）\n\t* 写到`.root`文件里\n\t\t* `src/B5RunAction.cc`初始化表格，记下`Column Id`\n\t\t* `src/B5EventAction.cc`内直接使用上面定义的变量传递数据（没有`extern`，没有定义，直接使用）\n\n\n---\n\n# 基本思路与概念\n* 例子\n\t* 头文件```state.h```\n\t* 源文件```state.cpp```\n\t* 其他源文件```t1.cpp```,```t2.cpp```,```t3.cpp```\n\t\t* 这些源文件都包含头文件```state.h```\n\t* 需要定义一个全局变量供这些源文件使用\n* 方法如下\n\t* 在```state.h```中声明全局变量```extern int a;```\n\t* 在```state.cpp```中定义该全局变量```int a = 10;```\n* 概念区别\n\t* 声明\n\t\t* 一个声明必须满足两个条件，否则就是定义\n\t\t\t* 声明必须使用```extern```关键字\n\t\t\t* 不能给变量赋初始值\n\t* 例子如下\n\t\t```C++\n\t\textern int a; // 声明\n\t\tint a; // 定义\n\t\tint a = 0; // 定义\n\t\textern int a = 0; 定义\n\t\t```\n* 注意事项\n\t* 头文件中应使用```extern```关键字声明全局变量（不定义）\n\t* 如果这个变量有多个文件用到，可以新建一个```.cpp```文件，在其中定义，并把该文件加入工程并调用\n\t* 头文件尽量不要定义任何变量\n\t* 一般只在头文件声明，用```extern```在```.cpp```中定义，如果这个头文件被多个```.cpp```引用，会造成重复定义的链接错误\n\t* 头文件只能声明全局变量（```extern```），不可定义（不推荐使用）\n\t* ```.cpp```里，在最外层定义即可（```int gi```），并直接引用\n\t* 如果在```.cpp```里用```static```定义，则该变量只在当前```.cpp```文件中有效，在别的文件中无效\n\t* 如果在```.h```里用```static```定义，不会进行编译（```.h```文件不编译），只会在其每个```include```的```.cpp```文件中包含编译，相当于在```.cpp```里使用```static```定义\n\n\n# 魔改exampleB5实现射线位置传递\n\n## 声明变量\n* 用代码编辑器打开`include/B5Constants.hh`，添加以下内容\n```C++\nextern G4double Primary_worldpos_x;\nextern G4double Primary_worldpos_y;\nextern G4double Primary_worldpos_z;\n```\n\n* 用代码编辑器打开`include/B5PrimaryGeneratorAction.hh`，在`#include`各种库下方，`class B5PrimaryGeneratorAction : public G4VUserPrimaryGeneratorAction`上方添加以下内容\n\n```C++\n// =============================================================================\n// 传递变量\n// =============================================================================\n// 2022年4月7日\n// 首次添加\n// 粒子出射位置的x、y、z坐标\n// =============================================================================\nextern G4double Primary_worldpos_x;\nextern G4double Primary_worldpos_y;\nextern G4double Primary_worldpos_z;\n// =============================================================================\n```\n\n## 定义变量\n* 用代码编辑器打开`src/B5PrimaryGeneratorAction.cc`，添加修改以下内容\n\t* 别忘记该文件要`#include \"Randomize.hh\"`用于产生随机数\n\n* 在`#include`下方，`B5PrimaryGeneratorAction::B5PrimaryGeneratorAction()`上方进行初始化\n\n```C++\nG4double Primary_worldpos_x = 0.; // 初始化\nG4double Primary_worldpos_y = 0.; // 初始化\nG4double Primary_worldpos_z = 0.; // 初始化\n```\n\n\n* 在`void B5PrimaryGeneratorAction::GeneratePrimaries(G4Event* event)`内添加并修改对应内容如下\n\n```C++\n   // =============================================================================\n  // 随机数版本\n  G4double x0 = G4UniformRand();\n  G4double y0 = G4UniformRand();\n  G4double z0 = G4UniformRand();\n    // =============================================================================\n    // 2022年4月7日\n    // 添加粒子出射位置的传递\n    // =============================================================================\n    G4double Primary_worldpos_x = x0; // 传递数值\n    G4double Primary_worldpos_y = y0; // 传递数值\n    G4double Primary_worldpos_z = z0; // 传递数值\n    \n    G4cout << \"=================================\" << G4endl\n          << \"Primary_pox_x(mm) : \" << (Primary_worldpos_x/mm) << G4endl\n          << \"Primary_pox_y(mm) : \" << (Primary_worldpos_y/mm) << G4endl\n          << \"Primary_pox_z(mm) : \" << (Primary_worldpos_z/mm) << G4endl\n          << \"=================================\" << G4endl;\n    // =============================================================================\n\n  fParticleGun->SetParticlePosition(G4ThreeVector(x0,y0,z0));\n  // =============================================================================\n```\n\n* `void B5PrimaryGeneratorAction::GeneratePrimaries(G4Event* event)`对应部分修改前后对比如下\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```C++\n  // =============================================================================\n  // default particle kinematics\n  // 默认粒子运动学（运行前默认加载内容）\n  // =============================================================================\n  // 粒子位置\n  // 固定版本\n  // =============================================================================\n  fParticleGun->SetParticlePosition(G4ThreeVector(0., 0., 1.*m)); // 粒子位置\n  // =============================================================================\n```\n</td>\n<td>\n```C++\n   // =============================================================================\n  // 随机数版本\n  G4double x0 = G4UniformRand();\n  G4double y0 = G4UniformRand();\n  G4double z0 = G4UniformRand();\n    // =============================================================================\n    // 2022年4月7日\n    // 添加粒子出射位置的传递\n    // =============================================================================\n    G4double Primary_worldpos_x = x0; // 传递数值\n    G4double Primary_worldpos_y = y0; // 传递数值\n    G4double Primary_worldpos_z = z0; // 传递数值\n    G4cout << \"=================================\" << G4endl\n          << \"Primary_pox_x(mm) : \" << (Primary_worldpos_x/mm) << G4endl\n          << \"Primary_pox_y(mm) : \" << (Primary_worldpos_y/mm) << G4endl\n          << \"Primary_pox_z(mm) : \" << (Primary_worldpos_z/mm) << G4endl\n          << \"=================================\" << G4endl;\n    // =============================================================================\n  fParticleGun->SetParticlePosition(G4ThreeVector(x0,y0,z0));\n  // =============================================================================\n```\n</td>\n</table>\n</div>\n\n\n## 初始化表格\n* 用代码编辑器打开`src/B5RunAction.cc`，在`B5RunAction::B5RunAction(B5EventAction* eventAction) : G4UserRunAction(), fEventAction(eventAction)`内添加以下内容\n\t* 我这3列对应的Id是26~28，具体到自己的代码里，要自己数一下对应的`column Id`\n```C++\n// 2022年4月7日\n// 射线出射位置\nanalysisManager->CreateNtupleDColumn(\"Primary_pox_x\");   // column Id = 26\nanalysisManager->CreateNtupleDColumn(\"Primary_pox_y\");   // column Id = 27\nanalysisManager->CreateNtupleDColumn(\"Primary_pox_z\");   // column Id = 28\n```\n\n## 输出进.root\n\n* 用代码编辑器打开`src/B5EventAction.cc`，在`void B5EventAction::EndOfEventAction(const G4Event *event)`对应位置添加以下内容\n\n```C++\n  // columns 26-28\n  // 出射粒子 位置\n  // 下面这个输出的注释，当你需要确认参数是否传递过来，可以取消下面这个注释，检查效果\n  // G4cout  << \"=================================\" << G4endl\n  //         << \"Primary_pox_x(mm) : \" << (Primary_worldpos_x/mm) << G4endl\n  //         << \"Primary_pox_y(mm) : \" << (Primary_worldpos_y/mm) << G4endl\n  //         << \"Primary_pox_z(mm) : \" << (Primary_worldpos_z/mm) << G4endl\n  //         << \"=================================\" << G4endl;\n  // 下面这个对应的是Column Id，我是26-28\n  analysisManager->FillNtupleDColumn(26, (Primary_worldpos_x));\n  analysisManager->FillNtupleDColumn(27, (Primary_worldpos_y));\n  analysisManager->FillNtupleDColumn(28, (Primary_worldpos_z));\n```\n\n## 输出效果\n\n![image-20220407154648659](C-定义全局变量，如何把所有的参数都定义在头文件里？如何使用一个文件存放项目里所有参数？如何传递全局参数？——以Geant4传递射线出射坐标为例/image-20220407154648659.png)\n\n\n\n## 结果\n* 你就可以把这几个数据传递到输出的`.root`文件里了！\n* 读取`.root`文件见[Python如何基于uproot库读取.root文件，如何查看其内部数据，如何将其转化为DataFrame](./b20a8a22.html)\n\n# Ref\n* [c++多个文件中如何共用一个全局变量](https://blog.csdn.net/m1109048058/article/details/79485064)\n","tags":["C++","Geant4","B5"],"categories":["Geant4"]},{"title":"有部分文件夹不想push到GitHub上应如何设置？","url":"/article/4ef81417.html","content":"\n---\n\n**创建时间**：2022年4月6日21:09:05\n**最新更新**：2022年4月6日23:16:59\n\n---\n\n**Problem Description**：How should I set some folders that I don't want to push to GitHub?\n\n**核心思路**：`git touch .gitignore`后，在`.gitignore`里写规则\n\n---\n\n# .gitignore创建与配置\n* 打开`Git-Bash`，进入对应文件夹的根目录，输入以下指令`git touch .gitignore`，在当前目录创建一个新的`.gitignore`文件\n\t* 文件夹根目录，指的是`.git`文件夹所在目录，这是个隐藏文件夹\n\t* 比如你的`.git`在`E:\\Code`文件夹下，那么你在`Git-Bash`里进到这个目录以后，你再`git touch .gitignore` \n\n![image-20220406231833826](有部分文件夹不想push到GitHub上应如何设置？/image-20220406231833826.png)\n\n* 双击打开`.gitignore`，编写你需要采纳的规则，包括不要push的文件夹、文件类型，例外的文件夹、文件，写完后保存，下面是一个示例\n\n```text\n// 忽略这个文件夹，即这个文件夹下所有东西不push\nFolder_ignore/**\n\n\n// 忽略非代码\n*.csv\n*.xlsx\n*.root\n*.zip\n*.7z\n*.png\n*.jpg\n\n// 不忽略Folder_ignore文件夹下的.png文件\n!Folder_ignore/*.png\n```\n\n## 将文件添加到Git配置\n* 如果你不是通过`git touch`创建的`.gitignore`，你可以在`Git-Bash`内进入代码仓路径，然后通过如下语句将`.gitignore`添加到Git配置\n\n```bash\ngit config --global core.excludesfile ~/.gitignore\n```\n\n# 看配置成了没\n\n* 打开`Git-Bash`，进入这个文件夹，输入`git status`，在`Untracked files`可以看到你配置是否生效，下图是以另一个代码仓为例，单纯为了表示大概在这个位置\n\n![image-20220406231841367](有部分文件夹不想push到GitHub上应如何设置？/image-20220406231841367.png)\n\n# push上去\n* 成功了之后，`git add .`，`git commit -m`打注释，`git tag`打标签，`git push`传上去\n\n# Ref\n* [如何使用.gitignore忽略Git中的文件和目录](https://www.myfreax.com/gitignore-ignoring-files-in-git/)\n* [git忽略某个目录或文件不上传](https://blog.csdn.net/sunxiaoju/article/details/86495234)\n","tags":["Git","GitHub"],"categories":["Git"]},{"title":"范数是什么含义？有什么实际用途？对范数的理解？","url":"/article/21abacaf.html","content":"\n---\n\n**创建时间**：2022年4月5日21:17:28\n**最新更新**：2022年4月8日11:09:27\n\n---\n\n**Problem Description**：What does norm mean? What is the practical use? Understanding of norm?\n\n**核心思路**：范数就是在求距离，只不过是不同场景里的距离\n\n---\n\n\n# 背景，是什么？\n---\n\n**概念**：\n* 范数是对向量（或者矩阵）的度量，是一个标量（scalar）\n* 范数是具有“长度“概念的函数\n* 在线性代数、泛函分析及相关的数学领域，是一个函数，其为向量空间内所有向量赋予非零的正长度或大小\n* 半范数反而可以为非零的向量赋予零长度\n\n\n---\n\n**简单来说**：\n* 范数就是算距离的，不同场景下的距离\n* 范数提供了比较向量/矩阵是否“优秀”的一种标准\n\n---\n\n> 范数（英语：Norm），是具有“长度”概念的函数。在线性代数、泛函分析及相关的数学领域，是一个函数，其为向量空间内的所有向量赋予非零的正长度或大小。另一方面，半范数（英语：seminorm）可以为非零的向量赋予零长度。\n>\n> 举一个简单的例子，一个二维度的欧氏几何空间$ \\mathbb{R}^{2} $就有欧氏范数。在这个向量空间的元素（譬如：(3,7)）常常在笛卡尔坐标系统被画成一个从原点出发的箭号。每一个向量的欧氏范数就是箭号的长度。\n>\n> 拥有范数的向量空间就是赋范向量空间。同样，拥有半范数的向量空间就是赋半范向量空间。 \n\n## 分别是什么？\n\n### 零范数\n\n---\n\n**简单来说**：$ L_{0} $ 范数是指向量中非0的元素的个数\n\n---\n\n> * 矩阵的L0范数就是非0元素的个数，通常用它来表示稀疏，L0范数越小，0元素越多，也就越稀疏。\n>\n> $$\\begin{equation}\\label{eq1}\n> \\| \\mathbf{ x } \\|_{0} = \\lim _{ p \\rightarrow 0 } \\| \\mathbf{ x } \\|_{ p }^{ p } = \\lim_{ p \\rightarrow 0 } \\sum_{ k=1 }^{ m}\\left| x_{ k }\\right|^{ p } = \\#\\left\\{ i: x _{ i } \\neq 0 \\right\\} \n> \\end{equation}$$\n>\n>\n> * 如下图所示，p 趋近于0时，函数就只有在$ x=0 $的时候等于0，其他的位置都为1。下图纵轴是元素的取值\n> * 也就是说，$ L_{0} $ -Norm可以用于表达一个向量/矩阵的稀疏性，且是非凸函数。\n> ![image-20220405211346473](范数是什么含义？有什么实际用途？对范数的理解？/image-20220405211346473.png)\n\n\n### 一范数\n\n---\n\n**简单来说**：$ L_{1} $就是算城市区块最短距离的，只能走区块四周的街或者路，算他总共有多长\n\n---\n\n> 一范数又称绝对值范数，是在由实数或虚数构成的一维向量空间中的范数。绝对值范数是曼哈顿范数的特殊形式。 \n\n**算法**：\n\n$\\begin{equation} \\|x\\|_{1}=\\sum_{i=1}^{N}\\left|x_{i}\\right|\\end{equation}$\n\n**概念**：\n* 一范数是向量元素绝对值之和\n\n### 二范数\n\n---\n**简单来说**：$ L_{2} $就是通常我们口中的距离，空中直线距离\n\n---\n\n二范数又称欧几里德范数，在n维欧几里德空间 $ \\mathbb{R}^{n} $ 上，向量 $ \\boldsymbol{x}=\\left(x_{1}, x_{2}, \\ldots, x_{n}\\right)^{\\mathrm{T}} $ 的最符合直觉的长度由以下公式给出 \n$$\\begin{equation} \\|\\boldsymbol{x}\\|_{2} = \\sqrt{x_{1}^{2}+\\cdots+x_{n}^{2}} \\end{equation}$$\n\n\n\n\n\n\n### 无穷范数\n---\n**简单来说**：$ L_{-\\infty} $ 是向量的所有元素的绝对值中最小的，$ L_{+\\infty} $ 是向量的所有元素的绝对值中最大的\n\n---\n\n**逻辑推导**：\n\n最常用的范数是p-范数，即对 $ x=\\left[x_{1}, x_{2}, \\cdots, x_{n}\\right]^{\\mathrm{T}} $ ，有\n$$\\begin{equation} \\|x\\|_{p}=\\left(\\left|x_{1}\\right|^{p}+\\left|x_{2}\\right|^{p}+\\cdots+\\left|x_{n}\\right|^{p}\\right)^{\\frac{1}{p}} \\end{equation}$$\n\n当p取无穷大时，该取值只与其中元素的最大值有关\n$$\\begin{equation} \\|x\\| _{+\\infty}=\\max \\left(\\left|x_{1}\\right|,\\left|x_{2}\\right|, \\ldots,\\left|x_{n}\\right|\\right) \\end{equation}$$\n\n当p取无穷小时，该取值只与其中元素的最小值有关\n$$\\begin{equation} \\|x\\| _{-\\infty}=\\min \\left(\\left|x_{1}\\right|,\\left|x_{2}\\right|, \\ldots,\\left|x_{n}\\right|\\right) \\end{equation}$$\n\n### 它们的关系？\n* 下图中\n\t* 红色、蓝色、黄色线表示所有曼哈顿距离，他们都有一样的长度，为12\n\t* 绿色线表示欧几里得距离，$  6×\\sqrt{2} ≈ 8.48  $\n\n* 我们可以定义**曼哈顿距离**的正式意义为 $ L_{1} $ -距离或城市区块距离，也就是在欧几里得空间的固定直角坐标系上两点所形成的线段对轴产生的投影的距离总和。\n\t* 例如在平面上，坐标 $ (x_{1}, y_{1}) $ 的点 $ P_{1} $ 与坐标 $ (x_{2}, y_{2}) $ 的点 $ P_{2} $ 的曼哈顿距离为：\n\n$$\\begin{equation} d(x, y)=\\left|x_{1}-x_{2}\\right|+\\left|y_{1}-y_{2}\\right| \\end{equation}$$\n\n* 要注意的是，曼哈顿距离依赖座标系统的旋转，而非系统在座标轴上的平移或映射\n* 曼哈顿距离的命名原因是从规划为方型建筑区块的城市（如曼哈顿）间，最短的行车路径而来（忽略曼哈顿的单向车道以及只存在于3、14大道的斜向车道）。任何往东三区块、往北六区块的的路径一定最少要走九区块，没有其他捷径。 \n\n![image-20220405211355540](范数是什么含义？有什么实际用途？对范数的理解？/image-20220405211355540.png)\n\n\n* 别称\n\t* 曼哈顿距离\n\t* 方格线距离\n\t* 最小绝对误差\n\t*  $ L_{1} $ -距离\n\t* 城市区块距离\n\n\n# 为什么？为啥这么起名？\n---\n**简单来说**：“范”指代范围、规范之意，范数有点像我“铸造”矩阵用的模体的参数（长宽高、工艺等），所以范数取的是矩阵的各种特性\n\n---\n\n> * 英文单词Norm是规范的意思，但是这么解释又感觉有点不对劲，没有那种老一辈数学家命名时的智慧感\n> * “范（乙组图11）”常用作一种制造东西的模子，一般认为是“法也”之“笵”的通假。制造模子的材料不同，模子也就有了不同的名称。木制的模子叫“模”，竹制的模子叫“范（乙组图11）”，土制的模子叫“型”。一个模子造出来的东西，当然都和模子一个样。这个模子，实际上就是一个榜样，一个典型。所以这三个字都引申出榜样的意思，如“模范”，“模”和“范”都是榜样的意思，是同义词。“范文”就是作为榜样的文章。“示范”就是做出一个榜样来。用模子造东西，是出不了模子的范围的，模子实际上就是一种范围。所以“范”字就由模子的意思，引申出范围的意思。这里，“范”和“围”是同义词，都是指一种指定的圈子。\n>\n> ![image-20220405212216965](范数是什么含义？有什么实际用途？对范数的理解？/image-20220405212216965.png)\n\n# 怎么用？举个例子？\n\n## Python函数\n\n### np.linalg.norm\n\n* linalg=linear+algebra，norm 则表示范数\n* 手册表示的接口`norm(x, ord=None, axis=None, keepdims=False)`\n\t* `ord`是具体的范数值\n\t* `axis`是向量计算的方向\n\t* `keepdims`表示是否保持维度不变\n\n\n| 参数         | 含义                                                         | 原理                                                         |\n| ------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 默认         | 二范数 $ l_{2} $ : $ \\ \\Vert x \\Vert_2 $                            | $  \\sqrt{ x_{1}^{2} + x_{2}^{2} + \\ldots + x_{n}^{2} }  $ |\n|              |                                                              |                                                              |\n| ord = 1      | 一范数 $ l_{1} $ : $ \\ \\Vert x \\Vert_1 $                            | $  \\| x_{1} \\| + \\| x_{2} \\| + \\ldots + \\| x_{n} \\|  $|\n| ord = 2      | 二范数 $ l_{2} $ : $ \\ \\Vert x \\Vert_2 $                            | $  \\sqrt{ x_{1}^{2} + x_{2}^{2} + \\ldots + x_{n}^{2} }  $ |\n| ord = np.inf | 无穷范数 $ l_{\\infty} $ : $ \\ \\Vert x \\Vert_\\infty $  |  $ max( \\| x_{i} \\| )$                         |\n\n\n# Ref\n* [python求向量的三种范式](https://blog.csdn.net/wangdong2017/article/details/81297654)\n* [python 库 Numpy 中如何求取向量范数 np.linalg.norm(求范数)（向量的第二范数为传统意义上的向量长度），（如何求取向量的单位向量）](https://www.cnblogs.com/devilmaycry812839668/p/9352814.html)\n* [统计学习方法BR-附录：范数](http://arthur503.github.io/blog/2013/10/02/Statistical-Methods-appendix-norm.html)\n* [【数学知识】||x||（范数 norm）](https://blog.csdn.net/nymph_h/article/details/95068873)\n* [曼哈顿距离](https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%93%88%E9%A0%93%E8%B7%9D%E9%9B%A2)\n* [范数对于数学的意义？1范数、2范数、无穷范数该怎么用？](https://www.zhihu.com/question/21868680)\n* [范数](https://zh.wikipedia.org/wiki/%E8%8C%83%E6%95%B0)\n* [无穷范数的“无穷”是什么意思，还有“1范数”中的“1”等等](https://zhidao.baidu.com/question/266281552.html)\n* [L1范数与L2范数的区别](https://zhuanlan.zhihu.com/p/28023308)\n* [为什么不用L0范数做正则化？](https://zhuanlan.zhihu.com/p/168969380)\n*  [范 （汉语文字）](https://baike.baidu.com/item/%E8%8C%83/34046)\n","tags":["数理与算法","线性代数","范数"],"categories":["数理与算法"]},{"title":"WSL + Geant4 配置 C++ boost库，配置外部库也可参考","url":"/article/fc9e9061.html","content":"\n---\n\n**创建时间**：2022年4月5日10:16:53\n**最新更新**：2022年4月5日14:12:41\n\n---\n\n**Problem Description**：WSL + Geant4 configure C++ boost library, configure external library can also refer to this post\n\n**核心思路**：\n\n* 两种配置方式\n\t* 外部库放`.\\geant4.10.07.p02\\install\\include\\Geant4`这个文件夹下\n\t* 外部库放项目文件夹下的`.\\include`下\n\n---\n\n* 目前我`string`分割是用`boost`库搞的，没库苦手啥都干不动啊...从头写要老命了，效率又丢人，说出去都不好意思，那好吧，那就发挥聪明才智让Geant4能调用`C++`的外部库呗！\n\n# 背景\n* 下面这大段话来自`Ref`，简单来说就是`Boost`库真的很`Boost`，能`Boost`我的代码\n\n> Boost 是一个功能强大、构造精巧、跨平台、开源并且完全免费的 C++ 程序库。\n>\n> 1998 年，Beman G.Dawes（C++标准委员会成员之一）发起倡议并建立了 Boost 社区，其目的是向 C++ 程序员提供免费的、经同行审查的、可移植的、高质量的 C++ 源程序库。\n>\n> Boost 强调程序库要与 C++ 标准库很好地共同工作，建立在“既有的实践”之上并提供参考实现，因此 Boost 库可以适合最后的标准化。\n>\n> 自创立以来，Boost 社区的工作已经取得了卓越的成果，C++ 标准库中有三分之二来自 Boost 库，而且将来 Boost 库中还会有更多的库进入新标准。\n>\n> C++ 四十余年的发展历史中产生了数不清的程序库，有影响力的程序库也不计其数，然而其中没有一个程序库能够与 Boost 相提并论，Boost 有着其他程序库无法比拟的优点，具体如下：\n>\n> 许多 Boost 库的作者本身就是 C++ 标准委员会成员，因此，Boost“天然”成了标准库的后备，负责向新标准输送组件，这也使得 Boost 获得了“准”标准库的美誉。\n>\n> Boost 独特的同行审查制度保证了每一个 Boost 库组件都经过了严格的审查和验证，使其具有很高的工业强度，甚至超过大多数商业产品的实现。\n>\n> Boost 采用了类似 STL 的编程范式，但却并没有 STL 那样晦涩难懂，其代码格式优美清晰、易于阅读，而且 Boost 附带丰富的说明文档——它既是一个程序库，也是一个很有价值的学习现代 C++ 编程的范本。\n>\n> Boost 的发布采用 Boost Software License，这是一个不同于 GPL 和 Apache 的非常宽松的许可证，该许可证允许库用户将 Boost 用于任何用途，既鼓励非商业用途，也鼓励商业用途。用户无须支付任何费用，不受任何限制，即可轻松享有 Boost 的全部功能。\n>\n> Boost 官方于 2019 年 12 月发布的 1.72 版本，共包含 160 余个库/组件，涵盖字符串与文本处理、容器、迭代器、算法、图像处理、模板元编程、并发编程等多个领域，使用 Boost，将大大增强 C++ 的功能和表现力。\n\n\n# 下载部署库\n* 从[Boost官网下载页面](https://www.boost.org/users/download/)下载如下其中一个，我下的是`boost_1_78_0.zip`\n\n![image-20220405103117825](WSL-Geant4-配置-C-boost库，配置外部库也可参考/image-20220405103117825.png)\n* 解压出来，解压完后目录下的`boost`文件，即对下图来说是`boost_1_78_0\\boost`这个文件复制粘贴，当然你也可以剪切到`Geant4`根目录下`.\\geant4.10.07.p02\\install\\include\\Geant4`的文件夹内\n\n![image-20220405103126132](WSL-Geant4-配置-C-boost库，配置外部库也可参考/image-20220405103126132.png)\n\n* 部署位置1、2按本机设置来\n\n## 部署位置1\n\n![image-20220405103131137](WSL-Geant4-配置-C-boost库，配置外部库也可参考/image-20220405103131137.png)\n\n## 部署位置2\n![image-20220405141333931](WSL-Geant4-配置-C-boost库，配置外部库也可参考/image-20220405141333931.png)\n\n# 调用\n\n* 在你的Geant4内调用它，比如我要做字符串分割，那么我可以按如下指令调用\n\n```C++\n#include \"boost/algorithm/string.hpp\" // 2022年4月5日 字符串处理\n```\n\n* 可以按如下方式使用\n```C++\n  // ===========================================================================\n  // 2022年4月5日\n  // 字符串分割，分割小数点前的整数部分\n  // ===========================================================================\n  // 按字符分割string\n  std::string str = std::to_string((double)((fTargetAngle/deg)));\n  std::vector<std::string> strs;\n  boost::split(strs, str, boost::is_any_of(\".\"));\n  // ===========================================================================\n```\n\n# 编译\n* 按正常情况编译即可，即进入`.\\build`文件夹，在`Bash`（如`WSL`）内输入`cmake ..`，`make -jN`（`N`是线程数，按需输入，我的电脑是`make -j16`），编译成功！\n\n![image-20220405103137475](WSL-Geant4-配置-C-boost库，配置外部库也可参考/image-20220405103137475.png)\n# Ref\n* [boost库在visual studio、DevC++和vscode上的环境配置](https://blog.csdn.net/qq_41854911/article/details/118440683)\n","tags":["C++","Geant4","B5","WSL","boost"],"categories":["Geant4"]},{"title":"WSL2实现GPU穿透","url":"/article/808f0e36.html","content":"\n---\n\n**创建时间**：2022年4月4日17:05:43\n**最新更新**：2022年4月4日20:58:53\n\n---\n\n**核心思路**：升到Win10 21H2，按英伟达官方教程配置\n\n---\n# 升Win10 21H2\n* 用[MediaCreationTool21H1](https://go.microsoft.com/fwlink/?LinkId=691209)升级系统\n\n# 下驱动\n* 到英伟达官网，下载[Windows系统下面向WSL的CUDA驱动](https://www.nvidia.com/Download/index.aspx?lang=en-us)\n\t* 按你的需求搜索，如下图\n\t![image-20220410115934207](WSL2实现GPU穿透/image-20220410115934207.png)\n\n# 升WSL2\n* 升级WSL到WSL2，打开`Windows PowerShell`，输入如下代码\n\n```bash\nwsl --set-version Ubuntu-20.04 2\n```\n* 具体见[总结Windows下安装WSL与升级WSL2的方法](https://blog.csdn.net/qq_35333978/article/details/113177819)\n\n\n\n# 配置\n* 在容器内安装CUDA，注意容器内不需要安装驱动 [英伟达手册](https://docs.nvidia.com/cuda/wsl-user-guide/index.html#installing-nvidia-drivers)。从`4.2.6 Building Your Own GPU-accelerated Application on WSL 2` 开始，到`5. WSL 2 System Requirements`之前结束，`4.2.7`按个人需求，可以不执行\n\n* 添加环境变量，打开`WSL2`的`Bash`，输入`vim ~/.bashrc`，写入\n```\nexport CUDA_HOME=/usr/local/cuda\nexport LD_LIBRARY_PATH=${CUDA_HOME}/lib64\nexport PATH=${CUDA_HOME}/bin:${PATH}\n```\n* 保存后退出，在`Bash`内输入`source ~/.bashrc`\n\n# 配置完成\n* 在`WSL2`的`Bash`内输入\n\t* `nvcc --version`\n\t* `nvidia-smi`\n* 配置成功后效果如下图\n\n![image-20220410115941793](WSL2实现GPU穿透/image-20220410115941793.png)\n\n# Ref\n* [WIN10配置WSL2调用GPU](https://mirror.xyz/0xc7122a0950FF5CA3C8Ed07AD8FD9dcB1fcd47f12/taYtWWoW64EqcUnAvcPcVQU5PJ80jQ3y08fWMEcWfeA)\n* [Windows10 21H2 更新问题](https://answers.microsoft.com/zh-hans/windows/forum/all/windows10-21h2/e2ba8494-fd67-4357-a4b8-47f9d7880606)\n","tags":["WSL2"],"categories":["WSL2"]},{"title":"Hexo + Chic 类别category页面过长博文名的三个点省略方案","url":"/article/9ff0cec8.html","content":"\n---\n\n**创建时间**：2022年4月4日12:01:09\n**最新更新**：2022年4月5日12:36:37\n\n---\n\n**Problem Description**：Hexo + Chic category page three-dot omission scheme for long blog post names\n\n**核心思路**：\n* 参考[Hexo + Chic过长博文名如何实现省略，过长博文名，实现三个点省略方案](./321a7025.html)，添加个`<li></li>`样式\n* 将`themes\\Chic\\layout\\category.ejs`与`themes\\Chic\\layout\\_page\\category.ejs`的显示逻辑分开写\n\t* `themes\\Chic\\layout\\_page\\category.ejs`显示逻辑要重写\n* 用`.findOne`函数确认存在这个`category`的博文\n    * `var posts = site.categories.findOne({name: page.category}).posts`\n\n---\n\n* 效果如下图，下下图表示打开单个category页面后是显示不同样式\n\n![image-20220404133308060](Hexo-Chic-类别category页面过长博文名的三个点省略方案/image-20220404133308060.png)\n\n![image-20220405124016537](Hexo-Chic-类别category页面过长博文名的三个点省略方案/image-20220405124016537.png)\n\n# 修改卡片页样式\n* 用代码编辑器打开`themes\\Chic\\layout\\category.ejs`\n\t* 使用`<li>`\n\t* 添加`<li>`样式\n\n```ejs:themes\\Chic\\layout\\category.ejs\n<li>\n   <%- post_item.title %>\n</li>\n```\n\n```ejs:themes\\Chic\\layout\\category.ejs\n<!-- 2022年4月4日 添加过长博文名省略 -->\n<style>\n    li{\n        width: 285px;\n        height: 24.2px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n\n\n\n* 修改前后对比如下\n\n\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```ejs\n<!-- 引入标签 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont3/iconfont.css\"> \n<!-- 这个文件是类别页面的布局 -->\n<%#\nthis page will judge whether current page is 'category.'\nurl:'http://localhost:4000/category/' return false.\nurl:'http://localhost:4000/categories/test/' return true.\nif you enter 'category' page by click link will show all categories.\notherwise if you enter 'categories' by click post header link will show the single category of this post.\nhow to add a category page:\n    1. hexo new page \"category\"\n    2. cd source/category/index.md\n    3. add layout pattern like this:\n    ---\n    title: '''category'''\n    date: 2019-06-09 09:56:49\n    layout: category\n    ---\n %>\n<% if(is_category()){ %>\n    <%- partial('_page/category', {pagination: config.category, index: true}) %>\n<% }else{ %>\n    <div class=\"container\">\n        <div class=\"post-wrap categories\">\n            <!-- <h2 class=\"post-title\">-&nbsp;📚类别&nbsp;-</h2> -->\n            <h2 class=\"post-title\">-&nbsp;<i class=\"iconfont icon-fenlei\" style=\"font-size: 1em;\"></i>类别&nbsp;-</h2>\n            <div class=\"categories-card\">\n                <% site.categories.forEach(category_item=>{ %>\n                    <%# console.log(\"hehe\") %>\n                    <div class=\"card-item\">\n                        <div class=\"categories\">\n                            <a href=\"<%- url_for(category_item.path) %>\">\n                                <h3>\n                                    <i class=\"iconfont icon-category\" style=\"padding-right:3px\"></i>\n                                    <%- category_item.name %>\n                                </h3>\n                            </a>\n                            <% category_item.posts.forEach((post_item, index = 0)=>{ %>\n                                <%# console.log(index) %>\n                                <% if(++index <= 5){ %>\n                                    <article class=\"archive-item\">\n                                        <a class=\"archive-item-link\"\n                                           href=\"<%- url_for(post_item.path) %>\">\n                                           <%- post_item.title %>\n                                        </a>\n                                    </article>\n                                <% } %>\n                            <% }) %>\n                            <% if(category_item.posts.length > 5){ %>\n                                <a class=\"more-post-link\" href=\"<%- url_for(category_item.path) %>\">More >></a>\n                            <% } %>\n                        </div>\n                    </div>\n                <% }) %>\n            </div>\n        </div>\n    </div>\n<% } %>\n```\n</td>\n<td>\n```ejs\n<!-- 引入标签 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont3/iconfont.css\"> \n<!-- 这个文件是类别页面的布局 -->\n<%#\nthis page will judge whether current page is 'category.'\nurl:'http://localhost:4000/category/' return false.\nurl:'http://localhost:4000/categories/test/' return true.\nif you enter 'category' page by click link will show all categories.\notherwise if you enter 'categories' by click post header link will show the single category of this post.\nhow to add a category page:\n    1. hexo new page \"category\"\n    2. cd source/category/index.md\n    3. add layout pattern like this:\n    ---\n    title: '''category'''\n    date: 2019-06-09 09:56:49\n    layout: category\n    ---\n %>\n<% if(is_category()){ %>\n    <%- partial('_page/category', {pagination: config.category, index: true}) %>\n<% }else{ %>\n    <div class=\"container\">\n        <div class=\"post-wrap categories\">\n            <!-- <h2 class=\"post-title\">-&nbsp;📚类别&nbsp;-</h2> -->\n            <h2 class=\"post-title\">-&nbsp;<i class=\"iconfont icon-fenlei\" style=\"font-size: 1em;\"></i>类别&nbsp;-</h2>\n            <div class=\"categories-card\">\n                <% site.categories.forEach(category_item=>{ %>\n                    <%# console.log(\"hehe\") %>\n                    <div class=\"card-item\">\n                        <div class=\"categories\">\n                            <a href=\"<%- url_for(category_item.path) %>\">\n                                <h3>\n                                    <i class=\"iconfont icon-category\" style=\"padding-right:3px\"></i>\n                                    <%- category_item.name %>\n                                </h3>\n                            </a>\n                            <% category_item.posts.forEach((post_item, index = 0)=>{ %>\n                                <%# console.log(index) %>\n                                <% if(++index <= 5){ %>\n                                    <article class=\"archive-item\">\n                                        <a class=\"archive-item-link\"\n                                           href=\"<%- url_for(post_item.path) %>\">\n                                           <!-- 2022年4月4日 添加过长博文名省略 -->\n                                           <li>\n                                           <%- post_item.title %>\n                                        </li>\n                                        <!-- 2022年4月4日 添加过长博文名省略 -->\n                                        </a>\n                                    </article>\n                                <% } %>\n                            <% }) %>\n                            <% if(category_item.posts.length > 5){ %>\n                                <a class=\"more-post-link\" href=\"<%- url_for(category_item.path) %>\">More >></a>\n                            <% } %>\n                        </div>\n                    </div>\n                <% }) %>\n            </div>\n        </div>\n    </div>\n<% } %>\n<!-- 2022年4月4日 添加过长博文名省略 -->\n<style>\n    li{\n        width: 285px;\n        height: 24.2px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n</td>\n</table>\n</div>\n# 修改单category页面显示逻辑与样式\n* 用代码编辑器打开`themes\\Chic\\layout\\_page\\category.ejs`\n\t* 修改显示逻辑\n\t* 添加对应样式\n\t\n* 添加的显示逻辑如下\n```ejs\n        <!-- 2022年4月5日 对单页的样式进行单独设置 -->\n        <!-- 2022年4月5日 每页条数 -->\n        <% var perPage = config.top_generator.per_page %>\n        <% var currentPage = url.match(/page\\/(.*)\\//) ? url.match(/page\\/(.*)\\//)[1] : 1 %>\n        <% var last_year = ''; %>\n        <% var posts = site.categories.findOne({name: page.category}).posts %>\n        \n        <!-- 按date逆序排序 -->\n        <% posts.data = posts.data.sort((a, b) => b.date - a.date) %>\n        <% posts.slice((currentPage - 1) * perPage, currentPage * perPage ).each(function (post) { %>\n                <% var cur_year = post.date.year(); %>\n                <% if(last_year !== cur_year){ %>\n                    <h3><%- cur_year %></h3>\n                <% last_year = cur_year; } %>\n                <article class=\"archive-item\">\n                    \n                    <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n                    <li class=\"category-page-post\">\n                        <%= post.title %>\n                    </li>\n                    </a>\n                    \n                    <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n                </article>\n        <% }) %>\n\n        <% if(Math.ceil(posts.length /  perPage) > 1) { %>\n        <nav class=\"pagination\">\n            <%- paginator({\n                prev_next: false,\n                end_size: 1,\n                mid_size: 2,\n                total: Math.ceil(posts.length /  perPage)\n            }) %>\n        </nav>\n\n            <% } %>\n        <!-- 2022年4月5日 对单页的样式进行单独设置如上 -->\t\t\t\t\n```\n\n* 添加的样式如下\n```ejs\n<!-- 2022年4月5日 添加过长博文名省略 -->\n<style>\n    .category-page-post{\n        width: 650px;\n        height: 24.2px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n\n* `themes\\Chic\\layout\\_page\\category.ejs`修改前后对比如下\n\t\t\t\t\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```ejs\n<%# single category page%>\n<div class=\"container\">\n    <div class=\"post-wrap categories\">\n        <!-- <h2 class=\"post-title\">-&nbsp;Categories&nbsp;·&nbsp;<%-page.category%>-</h2> -->\n        <h2 class=\"post-title\">-&nbsp;<i class=\"iconfont icon-fenlei\" style=\"font-size: 1em;\"></i>类别&nbsp;·&nbsp;<%-page.category%>-</h2>\n        <%- partial('archive', {pagination: config.category, index: true}) %>\n    </div>\n</div>\n<!-- 2022年4月5日 添加过长博文名省略 -->\n<style>\n    .category-page-post{\n        width: 650px;\n        height: 24.2px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n</td>\n<td>\n```ejs\n<%# single category page%>\n<div class=\"container\">\n    <div class=\"post-wrap categories\">\n        <!-- <h2 class=\"post-title\">-&nbsp;Categories&nbsp;·&nbsp;<%-page.category%>-</h2> -->\n        <h2 class=\"post-title\">-&nbsp;<i class=\"iconfont icon-fenlei\" style=\"font-size: 1em;\"></i>类别&nbsp;·&nbsp;<%-page.category%>-</h2>\n        <!-- 2022年4月5日 下面这句注释掉了 -->\n        <%#- partial('archive', {pagination: config.category, index: true}) %>\n        <!-- 2022年4月5日 上面这句注释掉了 -->\n        <!-- 2022年4月5日 对单页的样式进行单独设置 -->\n        <!-- 2022年4月5日 每页条数 -->\n        <% var perPage = config.top_generator.per_page %>\n        <% var currentPage = url.match(/page\\/(.*)\\//) ? url.match(/page\\/(.*)\\//)[1] : 1 %>\n        <% var last_year = ''; %>\n        <% var posts = site.categories.findOne({name: page.category}).posts %>\n        <!-- 按date逆序排序 -->\n        <% posts.data = posts.data.sort((a, b) => b.date - a.date) %>\n        <% posts.slice((currentPage - 1) * perPage, currentPage * perPage ).each(function (post) { %>\n                <% var cur_year = post.date.year(); %>\n                <% if(last_year !== cur_year){ %>\n                    <h3><%- cur_year %></h3>\n                <% last_year = cur_year; } %>\n                <article class=\"archive-item\">\n                    <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n                    <li class=\"category-page-post\">\n                        <%= post.title %>\n                    </li>\n                    </a>\n                    <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n                </article>\n        <% }) %>\n        <% if(Math.ceil(posts.length /  perPage) > 1) { %>\n        <nav class=\"pagination\">\n            <%- paginator({\n                prev_next: false,\n                end_size: 1,\n                mid_size: 2,\n                total: Math.ceil(posts.length /  perPage)\n            }) %>\n        </nav>\n            <% } %>\n        <!-- 2022年4月5日 对单页的样式进行单独设置如上 -->\n    </div>\n</div>\n<!-- 2022年4月5日 添加过长博文名省略 -->\n<style>\n    .category-page-post{\n        width: 650px;\n        height: 24.2px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n</td>\n</table>\n</div>\n\n# Ref\n* [Hexo 获取特定分类或标签下的文章](https://printempw.github.io/get-hexo-posts-by-category-or-tag/)\n* [Getting a list of posts in a specific category](https://github.com/hexojs/hexo/issues/2975)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"从外部复制粘贴代码进Obsidian，格式发生错乱是为啥？如何处理？","url":"/article/3af48a75.html","content":"\n---\n\n**创建时间**：2022年4月4日11:09:35\n**最新更新**：2022年4月4日11:14:42\n\n---\n\n**核心思路**：直接粘贴，会发生`HTML to Markdown`的变换，用`粘贴为纯文本`就可以了，快捷键是`Ctrl`+`Shift`+`V`\n\n---\n\n* 直接粘贴，会发生`HTML to Markdown`的变换，用`粘贴为纯文本`就可以了，快捷键是`Ctrl`+`Shift`+`V`\n\n\n# 效果\n\n* 使用平台是`Visual Studio Code`，源码如下\n\n![image-20220404115544021](从外部复制粘贴代码进Obsidian，格式发生错乱是为啥？如何处理？/image-20220404115544021.png)\n\n# Ctrl+V\n```C++\n#include \"B5EmCalorimeterHit.hh\"\n\n  \n\n#include \"G4VVisManager.hh\"\n\n#include \"G4VisAttributes.hh\"\n\n#include \"G4Colour.hh\"\n\n#include \"G4AttDefStore.hh\"\n\n#include \"G4AttDef.hh\"\n\n#include \"G4AttValue.hh\"\n\n#include \"G4UIcommand.hh\"\n\n#include \"G4UnitsTable.hh\"\n\n#include \"G4SystemOfUnits.hh\"\n\n#include \"G4ios.hh\"\n```\n\n# 到Typora里，再Ctrl+V到Obsidian里\n```C++\n#include \"B5EmCalorimeterHit.hh\"\n\n#include \"G4VVisManager.hh\"\n#include \"G4VisAttributes.hh\"\n#include \"G4Colour.hh\"\n#include \"G4AttDefStore.hh\"\n#include \"G4AttDef.hh\"\n#include \"G4AttValue.hh\"\n#include \"G4UIcommand.hh\"\n#include \"G4UnitsTable.hh\"\n#include \"G4SystemOfUnits.hh\"\n#include \"G4ios.hh\"\n```\n\n# Ctrl+Shift+V\n```C++\n#include \"B5EmCalorimeterHit.hh\"\n\n#include \"G4VVisManager.hh\"\n#include \"G4VisAttributes.hh\"\n#include \"G4Colour.hh\"\n#include \"G4AttDefStore.hh\"\n#include \"G4AttDef.hh\"\n#include \"G4AttValue.hh\"\n#include \"G4UIcommand.hh\"\n#include \"G4UnitsTable.hh\"\n#include \"G4SystemOfUnits.hh\"\n#include \"G4ios.hh\"\n```\n\n# Ref\n* [idea 复制代码到obsidian后格式错乱](https://forum-zh.obsidian.md/t/topic/769)\n","tags":["Hexo","Chic","Obsidian","Typora","表格","markdown"],"categories":["博客搭建","Obsidian","Typora","markdown"]},{"title":"Visual Studio Code配置copilot方案，copilot登录在哪里？","url":"/article/26810cd7.html","content":"\n---\n\n**创建时间**：2022年4月4日10:07:33\n**最新更新**：2022年4月7日15:18:38\n\n---\n\n**核心思路**：装插件，等邮件，登录在左下角，按Tab部署代码\n\n---\n\n# 安装\n* 打开`Visual Studio Code`，`扩展`→`GitHub Copilot`安装\n![image-20220407151927927](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151927927.png)\n\n# 申请试用\n* 打开`GitHub Copilot`拓展→`Sign up for the waitlist`，在网页里申请，之后通过申请会发邮件给你\n![image-20220407151932590](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151932590.png)\n\n![image-20220407151937047](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151937047.png)\n\n# 登录\n* 在左下角，点击`账户-已请求登录`→`试用GitHub登录以使用GitHub Copilot`→`Authorize github`→`click here`→`打开`→重新启动`Visual Studio Code`→右下角点`Agree`\n![image-20220407151941609](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151941609.png)\n![image-20220407151946068](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151946068.png)\n![image-20220407151950239](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151950239.png)\n\n![image-20220407151954152](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151954152.png)\n\n# 使用\n* 按`Tab`，会出现注释，你觉得没问题，就按Tab，会部署这块代码\n![image-20220407151958134](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407151958134.png)\n\n![image-20220407152001338](Visual-Studio-Code配置copilot方案，copilot登录在哪里？/image-20220407152001338.png)\n* 可以按`Alt`+`[`和`Alt`+`]`选择不同的建议代码\n\n# Ref\n* [VSCODE 安装Copilot 插件实现AI辅助编程](https://blog.csdn.net/smset028/article/details/122960913)\n","tags":["Visual Studio Code","copilot"],"categories":["Visual Studio Code"]},{"title":"DataFrame与np.array的相互转换，从读取如.csv数据集开始的DataFrame转矩阵","url":"/article/d47898d0.html","content":"\n---\n\n**创建时间**：2022年4月1日17:25:24\n**最新更新**：2022年4月8日21:54:19\n\n---\n\n**核心思路**：`.values`和`pd.DataFrame()`的使用\n\n---\n\n# DataFrame → np.array\n\n---\n\n**输入**：DataFrame\n**输出**：np.array\n\n---\n\n\n* 函数块\n\t* 其中右侧`df`是待转换的`DataFrame`\n\t* 左侧`array`是生成的`np.array`\n\n* 注意数据读入时的`header=None`\n```python\ndf = pd.read_csv('./data_input.csv', header=None) # 读入数据\narray = df.values #直接转成矩阵\n```\n\n# np.array\n\n---\n\n**输入**：np.array\n**输出**：DataFrame\n\n---\n\n* 函数块\n\t* 其中`array`是待转换的`np.array`\n\t* `df`是生成的`DataFrame`\n```python\ndf = pd.DataFrame(array)\n```\n\n# Ref\n* [Pandas中把dataframe和np.array的相互转换](https://blog.csdn.net/weixin_39223665/article/details/79935467)\n* [dataframe转换成矩阵](https://blog.csdn.net/u010916338/article/details/84065958)\n","tags":["Python","numpy","pandas","Matrix"],"categories":["函数"]},{"title":"VS Code + SSH 远程连接后无法选择kernel，无法使用conda activate应如何处理？报错CommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.的解决办法。在一台电脑可以SSH连上服务器设定好kernel，在另一台电脑通过SSH连上服务器无法使用、选择kernel","url":"/article/170bcd41.html","content":"\n---\n\n**创建时间**：2022年4月1日17:01:00\n**最新更新**：2022年4月1日17:05:02\n\n---\n\n**核心思路**：`Jupyter:指定本地或远程Jupyter服务器的连接`\n\n---\n\n# 配置方案\n\n* 在`Visual Studio Code`内，通过ssh连上远程主机后，按`Ctrl`+`Shift`+`P`，选`Jupyter:指定本地或远程Jupyter服务器的连接`，接下来选默认的那个，回车，就能选kernel了\n\n![image-20220401170731630](VS-Code-SSH-远程连接后无法选择kernel，无法使用conda-activate应如何处理？/image-20220401170731630.png)\n![image-20220401170735765](VS-Code-SSH-远程连接后无法选择kernel，无法使用conda-activate应如何处理？/image-20220401170735765.png)\n\n# 成功效果\n* 如下图，可以正常选择kernel。\n![image-20220401170747090](VS-Code-SSH-远程连接后无法选择kernel，无法使用conda-activate应如何处理？/image-20220401170747090.png)\n\n# Ref\n* [Vscode连接通过ssh远程调试jupyter内核错误！](https://blog.csdn.net/sinat_33909696/article/details/117405827)\n","tags":["Visual Studio Code","SSH"],"categories":["SSH","Visual Studio Code"]},{"title":"Hexo + Chic 实现文章置顶栏、文章置顶功能","url":"/article/fee5a0e2.html","content":"\n---\n\n**创建时间**：2022年3月31日16:40:43\n**最新更新**：2022年3月31日23:10:52\n\n---\n\n**核心思路**：\n* 做一个新的Page，这个Page包含\n\t* 置顶栏\n\t\t* 显示含置顶标签，且有top数值的文章\n\t\t* 按日期or按top数值排序\n\t* 排序功能\n\t\t* 和默认一样按日期排序\n\t* 单页最大文章显示数量+分页栏\n\n\n---\n\n\n* 最终效果如下，在每一页都会固定显示这些有置顶标签的文章\n\n![image-20220331231336225](Hexo-Chic-实现文章置顶栏、文章置顶功能/image-20220331231336225.png)\n\n# 创建新的页面\n* 打开`Git-Bash`，进入Blog源码所在目录，输入`hexo new page top`，`top`是页面名，这样创建了一个叫`top`的页面，我们做具体设置\n* 用代码编辑器（如`Visual Studio Code`）打开`source\\top\\index.md`，输入`layout`如下，`title`和`date`不用改，完成后效果如下\n\n## 页面设置\n\n```text\n---\ntitle: top\ndate: 2022-03-29 15:26:17\nlayout: top\n---\n```\n\n## 设layout\n* 这个代码块内包含排序和基本的样式，包括2个核心块\n\t* 第一块是判断文章tag是`置顶`，就显示在这里（==按top排列功能待添加==）\n\t* 第二块是整个网站的文章，排序，按给定量显示\n* 用代码编辑器在对应目录创建`themes\\Chic\\layout\\top.ejs`，输入以下内容\n```ejs\n<%- partial('_page/top', {pagination: config.archive, index: true}) %>\n```\n\n* 用代码编辑器在对应目录创建`themes\\Chic\\layout\\_page\\top.ejs`，输入以下内容\n```ejs\n<%# single top page%>\n<!-- 引入标签 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont3/iconfont.css\"> \n<!-- 这个文件是标签页面的布局 -->\n<%#\n\nthis page will judge whether current page is 'tag.'\nurl:'http://localhost:4000/tag/' return false.\nurl:'http://localhost:4000/tags/test/' return true.\n\nif you enter 'tag' page by click link will show all tags.\notherwise if you enter 'tags' by click post header link will show the single tag of this post.\n\nhow to add a tag page:\n\n    1. hexo new page \"tag\"\n    2. cd source/tag/index.md\n    3. add layout pattern like this:\n    ---\n    title: '''tag'''\n    date: 2019-06-09 09:56:49\n    layout: tag\n    ---\n\n %>\n\n    <div class=\"container top\">\n        <div class=\"post-wrap tags top\">\n            <!-- <h2 class=\"post-title\">-&nbsp;🏷️标签&nbsp;-</h2> -->\n            <h2 class=\"post-title top\">-&nbsp;<i class=\"iconfont icon-wenzhang\" style=\"font-size: 1em;\"></i>文章&nbsp;-</h2>\n            <br>\n            <!-- <div class=\"tag-cloud-tags top\">\n                <%site.tags.forEach(item=>{%>\n                    <a href=\"<%-url_for(item.path)%>\"><%- item.name%><small>(<%-item.length%>)</small></a>\n                <%})%>\n            </div> -->\n                <!-- 2022年3月29日 添加置顶功能 -->\n                <div class =\"post top\">\n                    <hr />\n                    <h3>置顶</h3>\n                    <!-- 判断有没有 置顶 这个标签的文章 -->\n                    <%site.tags.forEach(item=>{%>\n                        <% if(item.name == \"置顶\"){ %>\n                            <% item.posts.each(function (post) { %>\n                            <!-- 有的情况判断有没有top数值，按top从大到小排列，当然也可以用时间，目前单独写了个top -->\n                                <% if(post.top){ %>\n                                    <article class=\"top-item\">\n                                        <a class=\"top-item-link\" href=\"<%- url_for(post.path) %>\">\n                                            <li>\n                                                🔥<%= post.title %>🔥\n                                            </li>\n                                        </a>\n                                        <span class=\"top-item-date\"><%- date(post.date, theme.date_format) %></span>\n                                    </article>\n                                <% ;} %>\n                            <% }) %>\n                        <% ;} %>\n                    <% }) %>\n                    <hr />\n                </div>\n                <!-- 2022年3月29日 添加置顶功能为上 -->\n\n                <!-- 2022年3月31日 添加每页文章数如下 -->\n                <!-- 2022年3月30日 每页条数 -->\n                <% var perPage = config.top_generator.per_page %>\n                <% var currentPage = url.match(/page\\/(.*)\\//) ? url.match(/page\\/(.*)\\//)[1] : 1 %>\n                <% var last_year = ''; %>\n                <% var posts = site.posts %>\n                <!-- 按date逆序排序 -->\n                <% posts.data = posts.data.sort((a, b) => b.date - a.date) %>\n                <% posts.slice((currentPage - 1) * perPage, currentPage * perPage ).each(function (post) { %>\n                        <% var cur_year = post.date.year(); %>\n                        <% if(last_year !== cur_year){ %>\n                            <h3><%- cur_year %></h3>\n                        <% last_year = cur_year; } %>\n                        <article class=\"archive-item\">\n                            \n                            <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n                            <li>\n                                <%= post.title %>\n                            </li>\n                            </a>\n                            \n                            <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n                        </article>\n                <% }) %>\n\n                <% if(Math.ceil(posts.length /  perPage) > 1) { %>\n                <nav class=\"pagination\">\n                    <%- paginator({\n                        prev_next: false,\n                        end_size: 1,\n                        mid_size: 2,\n                        total: Math.ceil(posts.length /  perPage)\n                    }) %>\n                </nav>\n\n                <% } %>\n                <!-- 2022年3月31日 添加每页文章数如上 -->\n        </div>\n    </div>\n\n\n\n<style>\n    li{\n        width: 650px;\n        height: 29.5px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n* 注意如下代码，是引用我页面的标签样式，对应`<i></i>`这样的代码块\n`<link rel=\"stylesheet\" href=\"../fonts/iconfont3/iconfont.css\">`\n* 如果没有这个需求，`themes\\Chic\\layout\\_page\\top.ejs`文件内按下方代码填写即可\n\n```ejs\n<%# single top page%>\n\n    <div class=\"container top\">\n        <div class=\"post-wrap tags top\">\n            <h2 class=\"post-title top\">-&nbsp;文章&nbsp;-</h2>\n            <br>\n            <!-- <div class=\"tag-cloud-tags top\">\n                <%site.tags.forEach(item=>{%>\n                    <a href=\"<%-url_for(item.path)%>\"><%- item.name%><small>(<%-item.length%>)</small></a>\n                <%})%>\n            </div> -->\n                <!-- 2022年3月29日 添加置顶功能 -->\n                <div class =\"post top\">\n                    <hr />\n                    <h3>置顶</h3>\n                    <!-- 判断有没有 置顶 这个标签的文章 -->\n                    <%site.tags.forEach(item=>{%>\n                        <% if(item.name == \"置顶\"){ %>\n                            <% item.posts.each(function (post) { %>\n                            <!-- 有的情况判断有没有top数值，按top从大到小排列，当然也可以用时间，目前单独写了个top -->\n                                <% if(post.top){ %>\n                                    <article class=\"top-item\">\n                                        <a class=\"top-item-link\" href=\"<%- url_for(post.path) %>\">\n                                            <li>\n                                                🔥<%= post.title %>🔥\n                                            </li>\n                                        </a>\n                                        <span class=\"top-item-date\"><%- date(post.date, theme.date_format) %></span>\n                                    </article>\n                                <% ;} %>\n                            <% }) %>\n                        <% ;} %>\n                    <% }) %>\n                    <hr />\n                </div>\n                <!-- 2022年3月29日 添加置顶功能为上 -->\n\n                <!-- 2022年3月31日 添加每页文章数如下 -->\n                <!-- 2022年3月30日 每页条数 -->\n                <% var perPage = config.top_generator.per_page %>\n                <% var currentPage = url.match(/page\\/(.*)\\//) ? url.match(/page\\/(.*)\\//)[1] : 1 %>\n                <% var last_year = ''; %>\n                <% var posts = site.posts %>\n                <!-- 按date逆序排序 -->\n                <% posts.data = posts.data.sort((a, b) => b.date - a.date) %>\n                <% posts.slice((currentPage - 1) * perPage, currentPage * perPage ).each(function (post) { %>\n                        <% var cur_year = post.date.year(); %>\n                        <% if(last_year !== cur_year){ %>\n                            <h3><%- cur_year %></h3>\n                        <% last_year = cur_year; } %>\n                        <article class=\"archive-item\">\n                            \n                            <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n                            <li>\n                                <%= post.title %>\n                            </li>\n                            </a>\n                            \n                            <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n                        </article>\n                <% }) %>\n\n                <% if(Math.ceil(posts.length /  perPage) > 1) { %>\n                <nav class=\"pagination\">\n                    <%- paginator({\n                        prev_next: false,\n                        end_size: 1,\n                        mid_size: 2,\n                        total: Math.ceil(posts.length /  perPage)\n                    }) %>\n                </nav>\n\n                <% } %>\n                <!-- 2022年3月31日 添加每页文章数如上 -->\n        </div>\n    </div>\n\n\n\n<style>\n    li{\n        width: 650px;\n        height: 29.5px;\n        /*不换行*/\n        white-space: nowrap;\n        /*溢出的话，隐藏*/\n        overflow: hidden;\n        /*文本溢出时，是否....*/\n        text-overflow: ellipsis;\n    }\n</style>\n```\n\n# 设逻辑\n* 设排序和索引页的\n* 用代码编辑器在对应位置创建`themes\\Chic\\scripts\\top.js`，输入以下内容\n\n```js\nvar pagination = require('hexo-pagination');\nhexo.extend.generator.register('top', function(locals){\n    let allPost = locals.posts;\n   \n    return pagination('/top', allPost, {\n        perPage: this.config.top_generator.per_page,\n        layout: ['top', 'archive', 'index'],\n        format: 'page' + '/%d/',\n        data: {\n            __index: true\n        }\n    });\n\n});\n```\n\n# 填设置\n* 这个用来设置单个page内的文章数的\n* 用代码编辑器打开`_config.yml`，添加以下内容，设置每个页面的文章数\n\n```yml\ntop_generator:\n  per_page: 10\n```\n\n# 部署\n* 回到`Git-Bash`，在Blog源码目录下，`hexo clean`，`hexo g`，`hexo deploy`\n\n# Ref\n* [Hexo自定义案例](https://zhou-bill.github.io/2020/07/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/#)\n* [Chic 主题源码1.0.0](https://github.com/Zhou-Bill/Zhou-Bill.github.io/releases/tag/1.0.0)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic配置Gitalk显示error=redirect_uri_mismatch&，点击登录GitHub返回主页解决办法","url":"/article/eab12f60.html","content":"\n---\n\n**创建时间**：2022年3月30日20:15:06\n**最新更新**：2022年3月30日20:15:12\n\n\n---\n\n\n* 思路\n\t* `OAuth`的页面上，`Homepage URL`要和`Authorization callback URL`一样，直接从blog首页页面地址栏复制粘贴过去\n\t* 配置文件里，`repo`得是仓库名\n\t* 打开博文地址不能有中文\n\n\n* 配置`Gitalk`，见[[Chic配置Gitalk，添加评论区]]\n\n# OAuth APP设置\n\n* [页面](https://github.com/settings/applications/1848830)内确保`Homepage URL`和`Authorization callback URL`一致，直接从blog首页复制粘贴过来\n\n![image-20220330201537146](Hexo-Chic配置Gitalk显示error-redirect-uri-mismatch-，点击登录GitHub返回主页解决办法/image-20220330201537146.png)\n\n# 主题配置\n* 用代码编辑器，如`Visual Studio Code`打开`themes\\Chic\\_config.yml`，找到`gitalk`，其中`repo`得配置仓库名，如此处是`myoontyee.github.io`\n\n\n![image-20220330201600613](Hexo-Chic配置Gitalk显示error-redirect-uri-mismatch-，点击登录GitHub返回主页解决办法/image-20220330201600613.png)\n\n# 博文地址配置\n\n* 博文链接地址如果是`https:://xxx.xxx.xx/中文`这样的，在点击`使用GitHub登录`后会返回blog首页，需要修改博文地址，最好没有空格\n* 可以使用`abbrlink`解决\n\t* 如使用后文章生成了`abbrlink`为`60762`\n\t* 则对应博文地址会变为`https://[你的网站域名]/article/60762.html`，即可正常登录Gitalk与评论\n* 进入blog源码根目录，在`Git-Bash`内输入以下指令安装插件\n\n```bash\nnpm install hexo-abbrlink --save\n```\n\n* 用代码编辑器打开根目录下的`_config.yml`，修改并添加如下配置\n```yml:_config.yml\n\n\n# permalink: :year/:month/:day/:title/\n# permalink: article/:title/\npermalink: article/:abbrlink.html\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\npermalink_defaults:\n\n\n```\n\n* 现在再通过`hexo new`生成新的文章，如`hexo new test`时，生成的`test.md`博文会在头部自带一个`abbrlink`，对应部署后的`abbrlink`\n\n# 初次评论初始化\n\n* 初次评论需要先登录管理员账号，点击初始化即可\n\n# Ref\n* [登录报错/?error=redirect_uri_mismatch&](https://github.com/gitalk/gitalk/issues/162)\n* [Hexo：修改永久链接的默认格式](https://blog.csdn.net/qq_42780289/article/details/102662091)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Chic配置Gitalk，添加评论区","url":"/article/b1784561.html","content":"\n---\n\n**创建时间**：2022年3月30日20:11:22\n**最新更新**：2022年3月30日20:11:30\n\n\n---\n\n\n* 评论区无法评论、点击登录GitHub后返回首页解决办法，见[Hexo + Chic配置Gitalk显示error=redirect_uri_mismatch&，点击登录GitHub返回主页解决办法](./eab12f60.html)\n\n# 添加js\n* 在`themes\\Chic\\layout\\_plugins\\`中新建`gitalk.ejs`文件，内容如下：\n\n```ejs:gitalk.ejs\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.css\">  \n<script src=\"https://cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.min.js\"></script>  \n<div id=\"gitalk-container\"></div>  \n<script type=\"text/javascript\">  \n var gitalk = new Gitalk({  \n clientID: '<%= theme.gitalk.ClientID %>',  \n clientSecret: '<%= theme.gitalk.ClientSecret %>',  \n repo: '<%= theme.gitalk.repo %>',  \n owner: '<%= theme.gitalk.owner %>',  \n admin: '<%= theme.gitalk.adminUser %>',  \n id: <%= theme.gitalk.ID %>,  \n labels: '<%= theme.gitalk.labels %>'.split(',').filter(l => l),  \n perPage: <%= theme.gitalk.perPage %>,  \n pagerDirection: '<%= theme.gitalk.pagerDirection %>',  \n createIssueManually: <%= theme.gitalk.createIssueManually %>,  \n distractionFreeMode: <%= theme.gitalk.distractionFreeMode %>  \n })  \n gitalk.render('gitalk-container')  \n</script>\n```\n\n# 启动Gitalk的js\n\n* 在`themes\\Chic\\layout\\post.ejs`文件中添加：\n\n```ejs:post.ejs\n\n<% if (theme.gitalk.enable) { %>  \n <div id=\"gitalk-container\"></div>  \n <%- partial('_plugins/gitalk') %>  \n<% } %>\n\n```\n\n\n# 配置_config.yml\n\n* 获取client_id 和 client_secret，首先需要在[OAuth application](https://github.com/settings/applications/new)页面内创建一个新应用，头两个填写无要求，最后一个要求必须填写正确的blog地址，点击`Register application`→点击`Generate a new client secret`\n\n![image-20220330201221224](Chic配置Gitalk，添加评论区/image-20220330201221224.png)\n\n![image-20220330201315761](Chic配置Gitalk，添加评论区/image-20220330201315761.png)\n\n\n* 在`themes\\Chic\\_config.yml`中添加配置，如下\n\n```yml:themes\\Chic\\_config.yml\n\ngitalk:  \n enable: true  \n ClientID: xxxxx #Client ID,填入上一步获取的ID  \n ClientSecret: xxxxxxxxxx #Client Secret，填入上一步获取的ID  \n repo: blog #你要存放的项目名,如果博客部署在github可以放一起  \n owner: Myoontyee #这个项目名的拥有者（GitHub账号或组织）  \n adminUser: ['Myoontyee'] #管理员用户  \n ID: location.pathname #页面ID  \n labels: ['Gitalk'] #GitHub issues的标签  \n perPage: 10 #每页多少个评论  \n pagerDirection: last #排序方式是从旧到新（first），还是从新到旧（last）  \n createIssueManually: true #是否自动创建isssue，自动创建需要当前登录的用户为adminuser  \n distractionFreeMode: false #是否启用快捷键(cmd|ctrl + enter) 提交评论\n\n```\n\n# 调整Gitalk样式\n\n* 在`themes\\Chic\\source\\css\\custom.styl`内添加样式\n\n```styl:custom.styl\n\n// Gitalk评论样式  \n.gt-container {  \n max-width: 780px;  \n margin: auto;  \n}\n\n```\n\n# 更多设置\n\n## 在page页面引入gitalk\n\n* 在`themes\\Chic\\layout\\page.ejs`文件中添加：\n\n```ejs:page.ejs\n\n<% if (theme.gitalk.enable) { %>  \n <div id=\"gitalk-container\"></div>  \n <%- partial('_plugins/gitalk') %>  \n<% } %>\n\n```\n\n## 解决labels的50个字符长度限制的问题\n\n> * 前面提到中文路径的页面ID会在issues中将中文转换成url编码，那么长度就会超过50个字符\n\n### 将中文ID转换成MD5值\n\n#### 修改gitalk.ejs\n\n* 在`themes\\Chic\\layout\\_plugins\\gitalk.ejs`中开头部分添加对`md5.js`的引用\n\n**修改前**\n```ejs:gitalk.ejs\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.css\">\n\n<script src=\"https://cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.min.js\"></script>\n\n<div id=\"gitalk-container\"></div>\n\n<script type=\"text/javascript\">\n\n var gitalk = new Gitalk({\n\n clientID: '<%= theme.gitalk.ClientID %>',\n\n clientSecret: '<%= theme.gitalk.ClientSecret %>',\n\n repo: '<%= theme.gitalk.repo %>',\n\n owner: '<%= theme.gitalk.owner %>',\n\n admin: '<%= theme.gitalk.adminUser %>',\n\n id: <%= theme.gitalk.ID %>,\n\n labels: '<%= theme.gitalk.labels %>'.split(',').filter(l => l),\n\n perPage: <%= theme.gitalk.perPage %>,\n\n pagerDirection: '<%= theme.gitalk.pagerDirection %>',\n\n createIssueManually: <%= theme.gitalk.createIssueManually %>,\n\n distractionFreeMode: <%= theme.gitalk.distractionFreeMode %>\n\n })\n\n gitalk.render('gitalk-container')\n\n</script>\n\n\n```\n\n**修改后**\n```ejs:gitalk.ejs\n\n<link rel=\"stylesheet\" href=\"//unpkg.com/gitalk/dist/gitalk.css\">\n\n<script src=\"//unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n<script src=\"//cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js\"></script>\n\n<div id=\"gitalk-container\"></div>\n\n<script type=\"text/javascript\">\n\n var gitalk = new Gitalk({\n\n clientID: '<%= theme.gitalk.ClientID %>',\n\n clientSecret: '<%= theme.gitalk.ClientSecret %>',\n\n repo: '<%= theme.gitalk.repo %>',\n\n owner: '<%= theme.gitalk.owner %>',\n\n admin: '<%= theme.gitalk.adminUser %>',\n\n id: md5(<%= theme.gitalk.ID %>), \n\n labels: '<%= theme.gitalk.labels %>'.split(',').filter(l => l),\n\n perPage: <%= theme.gitalk.perPage %>,\n\n pagerDirection: '<%= theme.gitalk.pagerDirection %>',\n\n createIssueManually: <%= theme.gitalk.createIssueManually %>,\n\n distractionFreeMode: <%= theme.gitalk.distractionFreeMode %>\n\n })\n\n gitalk.render('gitalk-container')\n\n</script>\n\n\n```\n\n# Ref\n\n* [Gitalk配置教程](https://yuanlichenai.cn/2020/01/16/Gitalk/)\n* [Hexo博客添加Gitalk评论系统](https://www.itfanr.cc/2019/04/30/hexo-add-gitalk-comment/)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic实现打赏按钮，鼠标移动、浮过去会显示对应图片","url":"/article/cb001f78.html","content":"\n---\n\n**创建时间**：2022年3月30日20:09:00\n**最新更新**：2022年3月30日20:09:07\n\n\n---\n**核心思路**：\n\n* 设样式\n\n* 设逻辑\n\n* 引用样式\n\n---\n\n\n# 设置样式\n* 在`themes\\Chic\\layout\\_page\\post.ejs`内的对应位置，如`<section class=\"post-tags\">`的如下代码块下方\n\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n <div>\n\n <span>标签:</span>\n\n <span class=\"tag\">\n\n <% if(page.tags.length!==0){%>\n\n <% page.tags.forEach(item=>{ %>\n\n <!-- <a href=\"<%- url_for(item.path) %>\"># <%- item.name %></a> -->\n\n <a href=\"<%- url_for(item.path) %>\">🏷️<%- item.name %></a>\n\n <% }) %>\n\n <% } %>\n\n </span>\n\n </div>\n```\n\n* 添加如下代码\n\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n\n <!-- 支持一下的按钮与图片 -->\n\n <div class=\"reward\" id=\"reward\">\n\n <div class=\"sponser\">\n\n <div class=\"sponser_btn\">放松一下</div>\n\n <div class=\"sponser_img\">\n\n <div class=\"sponser_container\">\n\n <div class=\"sponser_header\">请你看猫！</div>\n\n <div class=\"sponser_body\">\n\n <div class=\"alipay\">\n\n <span class=\"sponser_alipay_title\">猫咪摔倒了！</span>\n\n <div>\n\n <img class=\"sponser_alipay\" src=\"/image/MeowSlidding.jpg\">\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n```\n\n* 完成设置后，整块`<section class=\"post-tags\">`代码如下\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n\n <section class=\"post-tags\">\n\n <div>\n\n <span>标签:</span>\n\n <span class=\"tag\">\n\n <% if(page.tags.length!==0){%>\n\n <% page.tags.forEach(item=>{ %>\n\n <!-- <a href=\"<%- url_for(item.path) %>\"># <%- item.name %></a> -->\n\n <a href=\"<%- url_for(item.path) %>\">🏷️<%- item.name %></a>\n\n <% }) %>\n\n <% } %>\n\n </span>\n\n </div>\n\n <!-- 支持一下的按钮与图片 -->\n\n <div class=\"reward\" id=\"reward\">\n\n <div class=\"sponser\">\n\n <div class=\"sponser_btn\">放松一下</div>\n\n <div class=\"sponser_img\">\n\n <div class=\"sponser_container\">\n\n <div class=\"sponser_header\">请你看猫！</div>\n\n <div class=\"sponser_body\">\n\n <div class=\"alipay\">\n\n <span class=\"sponser_alipay_title\">猫咪摔倒了！</span>\n\n <div>\n\n <img class=\"sponser_alipay\" src=\"/image/MeowSlidding.jpg\">\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n </div>\n\n  \n\n <div>\n\n <a href=\"javascript:window.history.back();\">返回</a>\n\n <span>· </span>\n\n <a href=\"<%- config.root %>\">主页</a>\n\n </div>\n\n </section>\n\n```\n\n\n* 记得要在`themes\\Chic\\source\\image`文件夹下放置对应的图片\n\n# 设置CSS样式\n\n* 打开`themes\\Chic\\source\\css\\_lib\\`，创建`reward.css`，写入以下内容\n\t* 其中`/* border-style: solid; */ `这一句要注释掉，因为会影响别的布局，并最终导致无法对齐\n\n```css:themes\\Chic\\source\\css\\_lib\\reward.css\n\n.sponser_btn{\n\n width: 120px;\n\n height: 30px;\n\n color:#000000;\n\n background: rgb(255, 255, 255);\n\n border-radius:13px;\n\n border-color: rgb(228, 228, 228);\n\n border-width: 1.2px;\n\n border-style: solid;\n\n box-shadow: 0 1px 1px 0px rgba(0,0,0,0.1);\n\n text-align: center;\n\n position: absolute;\n\n top: auto;\n\n left: 43%;\n\n} \n\n  \n\n.sponser_img{\n\n display: none;\n\n width: 0px;\n\n height: 0px;\n\n /* border-style: solid; */\n\n float: none;\n\n position: relative;\n\n top: -380px;\n\n  \n  \n\n}\n\n  \n  \n  \n\n.sponser_container{\n\n text-align: center;\n\n background: rgb(255, 255, 255);\n\n width: 380px;\n\n height: 380px;\n\n border-radius:13px;\n\n border-color: rgb(228, 228, 228);\n\n border-width: 1.2px;\n\n border-style: solid;\n\n position: absolute;\n\n float: none;\n\n left: 210px;\n\n  \n\n}\n\n  \n\n/* 用于鼠标移过以后显示窗口 */\n\n.sponser_btn:hover + .sponser_img{\n\n display: block;\n\n}\n\n  \n\n.sponser_header{\n\n width: auto;\n\n height: auto;\n\n text-align: center;\n\n font-size: large;\n\n border-bottom: solid rgb(228, 228, 228) 1.2px;\n\n background: rgb(255, 255, 255);\n\n}\n\n.sponser_body{\n\n width: auto;\n\n height: auto;\n\n text-align: center;\n\n background: rgb(255, 255, 255);\n\n}\n\n.alipay{\n\n width: auto;\n\n height: auto;\n\n text-align: center;\n\n background: rgb(255, 255, 255);\n\n}\n\n.sponser_alipay_title{\n\n width: auto;\n\n height: auto;\n\n text-align: center;\n\n font-size: medium;\n\n background: rgb(255, 255, 255);\n\n}\n\n.sponser_alipay{\n\n width: 300px;\n\n height: 300px;\n\n text-align: center;\n\n background: rgb(255, 255, 255);\n\n}\n\n```\n\n* 其中用于唤出新窗口的操作在于如下两点，默认`display:none;`不显示，鼠标移过`.sponser_btn:hover + .sponser_img`，给你显示一下`display: block;`\n```css\n\n.sponser_img{\n\n display: none;\n\n width: 0px;\n\n height: 0px;\n\n background: rgb(255, 255, 255);\n\n border-radius:13px;\n\n border-color: rgb(228, 228, 228);\n\n border-width: 1.2px;\n\n border-style: solid;\n\n float: none;\n\n position: relative;\n\n top: -400px;\n\n /* left: -250px; */\n\n  \n\n}\n```\n\n\n```css\n/* 用于鼠标移过以后显示窗口 */\n\n.sponser_btn:hover + .sponser_img{\n\n display: block;\n\n}\n```\n\n# 调用样式\n\n* 打开`themes\\Chic\\source\\css\\style.styl`，在最下方添加\n\n```styl:themes\\Chic\\source\\css\\style.styl\n\n// 赞助\n@import \"_lib/reward.css\"\n\n```\n\n\n# 效果\n\n![image-20220330201017016](Hexo-Chic实现打赏按钮，鼠标移动、浮过去会显示对应图片/image-20220330201017016.png)\n\n# Ref\n\n* [CSS 画一条横线/竖线](https://blog.csdn.net/qq_31878883/article/details/83418447)\n* [Css 详细解读定位属性 position 以及参数](https://blog.csdn.net/FungLeo/article/details/50056111)\n* [CSS浮动一：div基本介绍（背景色，大小，坐标位置，溢出处理，outline，border边框）](https://blog.csdn.net/csucsgoat/article/details/111466354)\n* [css图片居中(水平居中和垂直居中)](https://www.cnblogs.com/yiven/p/9645686.html)\n* [css图片大小怎么设置](https://www.yisu.com/zixun/452287.html)\n* [Css实现鼠标滑过文字时显示隐藏的图片](https://www.codeleading.com/article/88334532360/)\n* [CSS浮动一：div基本介绍（背景色，大小，坐标位置，溢出处理，outline，border边框）](https://blog.csdn.net/csucsgoat/article/details/111466354)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic修改Tag(s)前面的井号","url":"/article/ccd6f7fe.html","content":"\n---\n\n**创建时间**：2022年3月30日20:06:36\n**最新更新**：2022年3月30日20:06:40\n\n\n---\n\n**核心思路**：\n\n* 找到定义的代码，#改成别的\n\n---\n\n# 改标签\n\n* 用代码编辑器（如`Visual Stuidio Code`）打开`themes\\Chic\\layout\\_page\\post.ejs`，找到如下代码\n\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n\n<a href=\"<%- url_for(item.path) %>\"># <%- item.name %></a>\n```\n\n* 把#改成别的，如🏷️\n\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n\n<a href=\"<%- url_for(item.path) %>\">🏷️<%- item.name %></a>\n```\n\n* 得到如下图效果\n\n![image-20220330200750627](Hexo-Chic修改Tag-s-前面的/image-20220330200750627.png)\n\n# Ref\n* [Hexo 搭建个人博客系列：主题美化篇](http://yearito.cn/posts/hexo-theme-beautify.html)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo如何实现对博客内，同一个文件夹下其他文章的引用？","url":"/article/9d63668d.html","content":"\n---\n\n\n**创建时间**：2022年3月30日20:01:37\n**最新更新**：2022年3月30日20:01:41\n\n\n---\n\n\n**核心思路**：\n* 因为在同一个文件夹，可以用链接网页的方式，如`[想显示的内容](./+对应页面名)`\n\n---\n\n# 内容配置\n* 填入`[想显示的内容](./+对应页面名)`\n\n![image-20220330200203693](Hexo如何实现对博客内，同一个文件夹下其他文章的引用？/image-20220330200203693.png)\n\n\n![image-20220330200208238](Hexo如何实现对博客内，同一个文件夹下其他文章的引用？/image-20220330200208238.png)\n\n* 清理缓存，生成，预览，在`Git-Bash`上输入如下指令\n\t* `hexo clean && hexo s -g`\n\n\n# 效果\n* 按下图点击这个链接，得到下下图，跳转过来了\n\n![image-20220330200214914](Hexo如何实现对博客内，同一个文件夹下其他文章的引用？/image-20220330200214914.png)\n![image-20220330200227234](Hexo如何实现对博客内，同一个文件夹下其他文章的引用？/image-20220330200227234.png)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 添加文章字数和阅读时长","url":"/article/11459889.html","content":"\n---\n\n**创建时间**：2022年3月30日19:59:04\n**最新更新**：2022年3月30日19:59:09\n\n---\n\n**核心思路**：\n\n* 部署`hexo-wordcount`\n\n* 主题下的`_config.yml`配置\n\n* 主题下的post页面配置\n\n---\n\n* 最终效果如下图\n\n![image-20220330195825388](Hexo-Chic-添加文章字数和阅读时长/image-20220330195825388.png)\n\n# 部署插件\n\n* 文章字数和阅读时长的统计都是借助 `hexo-wordcount` 插件实现，可以使用 `npm`安装\n\n```cmd:Git-Bash\n\nnpm i --save hexo-wordcount\n\n```\n\n* `Node` 版本在 7.6.0 之前，需要安装 2.x 版本\n\t* 查看`Node`版本，需要在`Git-Bash`内输入`Node -v`即可查看\n\t* 安装2.x版本，需要在`Git-Bash`内输入`npm i --save hexo-wordcount@2`\n\n# 配置文件\n\n* 编译器（如`Visual Stuidio Code`）打开`themes\\Chic\\_config.yml`，添加如下内容\n\t* 注意2个`_enable`开关，即`post_wordcount_enable`与`post_min2read_enable`不能放在`post_wordcount:`内\n\n```yml:themes\\Chic\\_config.yml\n\n# 文章字数和阅读时长\n\n# Post wordcount display settings\n\n# Dependencies: https://github.com/willin/hexo-wordcount\n\npost_wordcount:\n\n item_text: true\n\n wordcount: true # 单篇 字数统计\n\n min2read: true # 单篇 阅读时长\n\n totalcount: false # 网站 字数统计\n \n \n\npost_wordcount_enable: true # 字数统计\n\npost_min2read_enable: true # 阅读时长\n\n```\n\n\n# post页面配置\n\n* 编译器打开`themes\\Chic\\layout\\_page\\post.ejs`，按如下方式添加修改内容，在下图位置替换对应内容\n\n![image-20220330195848393](Hexo-Chic-添加文章字数和阅读时长/image-20220330195848393.png)\n\n**修改前**\n\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n\n <% if(page.categories.length!==0 && theme.post_category_enable){ %>\n\n <span class=\"post-category\">\n\n Category:\n\n <% page.categories.forEach(item=>{ %>\n\n <a href=\"<%- url_for(item.path) %>\"><%- item.name %></a>\n\n <% }) %>\n\n </span>\n\n <% } %>\n\n```\n\n**修改后**\n\n```ejs:themes\\Chic\\layout\\_page\\post.ejs\n\n <% if(page.categories.length!==0 && theme.post_category_enable){ %>\n\n <span class=\"post-category\">\n\n Category:\n\n <% page.categories.forEach(item=>{ %>\n\n <a href=\"<%- url_for(item.path) %>\"><%- item.name %></a>\n\n <% }) %>\n\n </span>\n\n <% } %>\n\n  \n\n <% if(page.content && theme.post_wordcount_enable){ %>\n\n <span class=\"post-count\">\n\n Words:\n\n <a href=\"\"><%= wordcount(page.content) %></a> \n\n </span>\n\n <% } %>\n\n  \n\n <% if(page.content && theme.post_min2read_enable){ %>\n\n <span class=\"post-count\">\n\n Time:\n\n <a href=\"\"><%= min2read(post.content) %>min</a> \n\n </span>\n\n <% } %>\n\n```\n\n\n# Ref\n\n* [Hexo 添加文章字数和阅读时长](https://www.foxerlee.top/2020/02/17/wordcount/)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 添加emoji支持，并使用emoji","url":"/article/a150dc7d.html","content":"\n---\n\n**创建时间**：2022年3月30日19:53:34\n**最新更新**：2022年3月30日19:53:59\n\n\n---\n**核心思路**：\n\n* 下插件\n* 主题配置文件里设置\n\n---\n\n# 下插件\n* 在`Git-Bash`内进入到对应文件夹，通过以下代码安装插件\n\n```git\n\nnpm install hexo-filter-github-emojis --save\n\n```\n\n# 设置\n\n* 打开`_config.yml`，在最底部输入以下代码\n\n```yml:_config.yml\n\ngithubEmojis:  \n enable: true  \n className: github-emoji  \n inject: true  \n styles:  \n customEmojis:\n\n```\n\n# 使用效果\n* 可以在文章里通过如`:thinking:`这样的方式使用，也可以直接复制粘贴emoji使用\n\n\n\n![image-20220330195439588](Hexo-Chic-添加emoji支持，并使用emoji/image-20220330195439588.png)\n\n![image-20220330195445583](Hexo-Chic-添加emoji支持，并使用emoji/image-20220330195445583.png)\n\n# emoji查找表\n* [✂️ Copy and 📋 Paste Emoji 👍](https://getemoji.com/)\n* [emojipedia](https://emojipedia.org/)\n\n# Ref\n* [hexo文章中使用emoji表情](https://www.vwkai.com/2020/03/05/hexo-emoji/)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 增加站点浏览统计","url":"/article/a976f1c7.html","content":"\n---\n\n**创建时间**：2022年3月30日19:49:49\n**最新更新**：2022年3月30日19:49:54\n\n\n---\n\n**核心思路**：\n\n* 加CSS插件\n\n* 修改页面布局\n\n* 对主题进行配置\n\n---\n\n* 单篇博文阅读量配置见[[Hexo + Chic 增加单篇文章浏览统计]]\n\n* 最终效果如下图\n\n![image-20220330195043878](Hexo-Chic-增加站点浏览统计/image-20220330195043878.png)\n\n# 添加CSS插件`site-visitor.ejs`\n* 用代码编译器（如`Visual Studio Code`）打开`themes\\Chic\\layout\\_plugins\\site-visitor.ejs`，输入以下内容\n\n```ejs:themes\\Chic\\layout\\_plugins\\site-visitor.ejs\n\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n<% if (theme.visit_counter.site_uv) { %>\n\n<span class=\"site-uv\">\n\n 总访客量:\n\n <i class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></i>\n\n</span>&nbsp;\n\n<% } %>\n\n<% if (theme.visit_counter.site_pv) { %>\n\n<span class=\"site-pv\">\n\n | 总访问量:\n\n <i class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></i>\n\n</span>\n\n<% } %>\n\n```\n\n* 其中`<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>`用于在页面中引入`busuanzi.js`\n\n\n\n# 修改页面布局\n\n* 用代码编辑器打开`themes\\Chic\\layout\\_partial\\footer.ejs`，在`<span></span>`标签内添加如下代码\n```ejs:themes\\Chic\\layout\\_partial\\footer.ejs\n<% if (theme.visit_counter) { %>  \n <%- partial(\"../_plugins/site-visitor\") %>  \n<% } %>\n```\n\n即，**修改前**\n\n```ejs:themes\\Chic\\layout\\_partial\\footer.ejs\n\n<footer id=\"footer\" class=\"footer\">\n\n <div class=\"copyright\">\n\n <span>© <%= config.author %> | Powered by <a href=\"https://hexo.io\" target=\"_blank\">Hexo</a> & <a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\">Chic</a></span>\n\n </div>\n\n</footer>\n\n```\n\n**修改后**\n\n```ejs:themes\\Chic\\layout\\_partial\\footer.ejs\n\n<footer id=\"footer\" class=\"footer\">\n\n <div class=\"copyright\">\n\n <span>© <%= config.author %> | Powered by <a href=\"https://hexo.io\" target=\"_blank\">Hexo</a> & <a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\">Chic</a>\n\n |\n\n <!-- 访客数量 -->\n\n <% if (theme.visit_counter) { %>\n\n <%- partial(\"../_plugins/site-visitor\") %>\n\n <% } %>\n\n </span>\n\n </div>\n\n</footer>\n\n```\n\n\n# 配置主题\n\n* 用代码编辑器打开`themes\\Chic\\_config.yml`，在最下方添加以下内容\n\n```yml:themes\\Chic\\_config.yml\n\n# 站浏览数统计  \nvisit_counter:   \n site_uv: true # 访客数量  \n site_pv: true # 浏览次数\n\n```\n\n# Ref\n\n* [Chic主题](https://yuanlichenai.cn/2020/02/02/chic/)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo如何新建一个新的页面，page，栏目？","url":"/article/6376ffa2.html","content":"\n---\n\n**创建时间**：2022年3月29日23:27:31\n**最新更新**：2022年3月29日23:27:37\n\n\n---\n\n**核心思路**：\n\n* hexo new page`+页面名\n  * 如`hexo new page about`\n\n* 配置Blog源码根目录下`_config.yml`文件\n\n* 配置Blog使用的模板目录下的`_config.yml`文件\n\n* 配置对应页面内容\n\n---\n\n\n# 新建页面\n\n* 以管理员模式打开`Git-Bash`，进入到存放Blog源码文件的根目录，输入`hexo new page`+页面名\n\t* 如`hexo new page aboutMe`\n\n![image-20220329232954785](Hexo如何新建一个新的页面，page，栏目？/image-20220329232954785.png)\n\n* 用代码编辑器打开对应的文件夹，此处以`Chic`主题为例，打开`./themes/Chic/_config.yml`（注意**不是**根目录下的`_config.yml`），按下图方式配置，`nav: `后添加`AboutMe: /aboutMe`\n\t* 前面那个`AboutMe`代表首页可以看到的栏目名，也就是下下图右上角那个\n\t* 后面那个`aboutMe`代表对应文件存放的路径，我们要做具体修改，**要注意大小写**\n\n![image-20220329233011588](Hexo如何新建一个新的页面，page，栏目？/image-20220329233011588.png)\n![image-20220329233018140](Hexo如何新建一个新的页面，page，栏目？/image-20220329233018140.png)\n\n# 配置页面内容\n\n* 在代码编译器内，打开`./source/aboutMe/index.md`，添加`type: `行，如此处`type: about`，当然也可以有别的`type`，比如`tag`，按你希望的来。添加部分内容，保存，本地效果如下图\n\n![image-20220329233026160](Hexo如何新建一个新的页面，page，栏目？/image-20220329233026160.png)\n![image-20220329233037261](Hexo如何新建一个新的页面，page，栏目？/image-20220329233037261.png)\n\n* 可以推送到对应的代码仓了\n\n# 参考\n\n* [Hexo 框架 Next 主题添加自定义 Page](https://www.playpi.org/2017050701.html)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo Chic模板添加搜索栏","url":"/article/1650c0d7.html","content":"\n---\n\n**创建时间**：2022年3月29日23:17:12\n**最新更新**：2022年4月1日19:34:18\n\n\n---\n\n**Todo**：\n\n- [x] 部署搜索栏\n- [ ] 添加内容预览\n\n---\n\n* 效果如下图\n![image-20220329231844678](Hexo-Chic模板添加搜索栏/image-20220329231844678.png)\n\n---\n\n**核心思路**：\n\n1.  search.json \n    Git Bash里执行npm install hexo-generator-search生成search.json以包含是文章的基本信息。\n2.  html & css \n    使用模态框，根据form表单提交后唤出modal，然后进行ajax对search.json进行查询。\n3.  匹配内容和highlight \n    根据关键字对文章内容进行匹配，匹配有的加入数组，然后对匹配成功的那些数据进行字符截取并highlight关键字。\n\n---\n\n# 依赖部署\n\n## search.json\n\n* `hexo-generator-search`安装，生成`search.json`，在`Git-Bash`内，进入到博客代码所在目录的根目录，通过以下指令安装`npm install hexo-generator-search`\n\t* `search.json`在目录`.\\node_modules\\hexo-generator-search\\demo_output\\search.json`\n\n## jquery\n* 配置`jquery`，进入[下载页面](https://jquery.com/download/)，可以下载`Production version`，放入`./themes/Chic/source/js/`下\n\t* `Production version` - 用于实际的网站中，是已经被精简和压缩过的jQuery文件\n\t* `Development version` - 用于测试和开发中，是未压缩的jQuery文件，可以方便阅读源码\n\t\t* 如果点击下图链接打开是一个源码页面\n\t\t\t* 那么可以在对应文件夹下创建一个记事本，改为`jquery-3.6.0.min.js`，将源码页面的源码复制粘贴进去\n\t\t\t* 或直接右键点击下面链接，选择另存为即可\n\n![image-20220329231924618](Hexo-Chic模板添加搜索栏/image-20220329231924618.png)\n![image-20220329231930397](Hexo-Chic模板添加搜索栏/image-20220329231930397.png)\n\n* 在`./themes/Chic/`下的`_config.yml`文件里`script`段添加如下内容\n\t* `- /js/jquery.min.js`\n\n## 搜索的Logo\n* 选一个Logo，比如[这个放大镜](https://raw.githubusercontent.com/maojinyuan/hexo_repository/main/%E9%9B%B6%E6%95%A3%E7%9A%84%E6%96%87%E4%BB%B6/search.png)，放入`./themes/Chic/source/image/`\n* 在`./themes/Chic`下的`_config.yml`文件尾行写入`searchImg: /image/search.png`\n\n# 配置Blog源码根目录下的`_config.yml`\n\n* 打开`./_config.yml`，在最下方写入如下代码\n\n```yml\n# search//please insert in the end of the body  \nsearch:  \n enable: true  \n path: search.json  \n field: post  \n content: true\n```\n\n# 添加modal（包含html和css）\n\n## html\n\n* 打开`./themes/Chic/layout/layout.ejs`底部，在`</html>`添加以下代码，这段代码控制的内容如下\n\n```ejs\n<!-- 搜索功能 -->\n<!-- Chic/layout.ejs -->\n<div id=\"u-search\">\n    <div class=\"modal\">\n        <div class=\"modal-header\">\n            <div class=\"container\">\n                <form id=\"u-search-modal-form\" class=\"u-search-modal-form\">\n                    <button type=\"submit\" class=\"form-submit-btn\">\n                        <img src=\"<%- url_for(theme.searchImg) %>\" class=\"search-btn-img\" />\n                    </button>\n                    <input placeholder=\"搜索内容...\" class=\"form-input\" id=\"modal-form-input\">\n                </form>\n                <a class=\"modal-close\">x</a>\n            </div>\n            <div class=\"search-loading\">\n                <div class=\"search-loading-bar\"></div>\n            </div>\n        </div>\n        <div class=\"modal-body\">\n        </div>\n    </div>\n    <div class=\"modal-overlay\"></div>\n</div>\n\n\n```\n\n![image-20220329231940903](Hexo-Chic模板添加搜索栏/image-20220329231940903.png)\n\n\n## css\n* 在`./themes/Chic/source/css/_lib/`下新建文件`search.css`，写入以下代码\n```css\n#u-search {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 60px 20px;\n    z-index: 1001;\n}\n\n\n#u-search .modal {\n    position: fixed;\n    height: 80%;\n    width: 100%;\n    max-width: 640px;\n    left: 50%;\n    top: 0;\n    margin: 64px 0px 0px -320px;\n    background: #fff;\n    z-index: 3;\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n#u-search .modal-header {\n    position: relative;\n    width: 100%;\n    height: 64px;\n    z-index: 3;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    font-size: 16px;\n    box-shadow: 0 1px 2px 0px rgba(0,0,0,0.1);\n    background: #fff;\n    transition: all 0.28s ease;\n    -moz-transition: all 0.28s ease;\n    -webkit-transition: all 0.28s ease;\n    -o-transition: all 0.28s ease;\n}\n\n#u-search .modal-header .container{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 0px;\n}\n\n#u-search .modal-header .container .u-search-modal-form {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex: 1;\n}\n\n#u-search .u-search-modal-form .form-submit-btn {\n    width: 50px;\n    height: 64px;\n    background: none;\n    border: none;\n    outline: none;\n    margin:  0 5px 0 5px ;\n}\n\n#u-search .u-search-modal-form .form-submit-btn img {\n    width: 33px;\n    height: 33px;\n}\n\n#u-search .modal-header .container .u-search-modal-form .form-input {\n    flex: 1;\n    margin-right: 15px;\n    border: none;\n    padding: 10px 10px;\n    outline: none;\n}\n\n\n#u-search .modal-header .modal-close {\n    display: block;\n    width: 55px;\n    height: 64px;\n    top: 0;\n    right: 0;\n    color: #2196f3;\n    cursor: pointer;\n    text-align: center;\n    line-height: 64px;\n    vertical-align: middle;\n    transition: all 0.28s ease;\n    -moz-transition: all 0.28s ease;\n    -webkit-transition: all 0.28s ease;\n    -o-transition: all 0.28s ease;\n    z-index: 2;\n    font-size: 22px;\n}\n\n#u-search .modal-header .search-loading {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    background: transparent;\n    z-index: 1;\n\n}\n\n#u-search .modal-header .search-loading .search-loading-bar {\n    transition: all 0.28s ease;\n    -moz-transition: all 0.28s ease;\n    -webkit-transition: all 0.28s ease;\n    -o-transition: all 0.28s ease;\n    position: relative;\n    display: none;\n    width: 0%;\n    height: 100%;\n    background: #2196f3;\n\n}\n\n#u-search .modal .modal-body {\n    padding: 15px;\n    height: calc(100% - 85px);\n    overflow: auto;\n\n}\n\n#u-search .modal .modal-body::-webkit-scrollbar{\n    width: 5px;\n    height: 5px;\n    /**/\n}\n#u-search .modal .modal-body::-webkit-scrollbar-track{\n    background: rgb(239, 239, 239);\n    border-radius:2px;\n}\n#u-search .modal .modal-body::-webkit-scrollbar-thumb{\n    background: #bfbfbf;\n    border-radius:10px;\n}\n#u-search .modal .modal-body::-webkit-scrollbar-thumb:hover{\n    background: #333;\n}\n#u-search .modal .modal-body::-webkit-scrollbar-corner{\n    background: #179a16;\n}\n\n#u-search .modal .modal-body .modal-results {\n    list-style: none;\n    padding-left: 0;\n    margin: 0px;\n}\n\n#u-search .modal .modal-body .modal-results .result-item {\n    padding: 15px;\n}\n\n#u-search .modal .modal-body .modal-results .result-item:hover {\n    background: #e8f4fd;\n}\n\n#u-search .modal .modal-body .modal-results .result-item .result-item-detail {\n    display: flex;\n    flex-direction: column;\n}\n\n#u-search .modal .modal-body .modal-results .result-item .result-item-detail .title {\n    color: #6e6e6e;\n    font-weight: 700;\n    font-size: 18px;\n    margin-bottom: 10px;\n}\n\n#u-search .modal .modal-body .modal-results .result-item .result-item-detail .content {\n    display: block;\n    white-space: inherit;\n    word-break: break-all;\n    text-overflow: ellipsis;\n    font-size: 14px;\n    color: rgba(85,85,85,0.65);\n    letter-spacing: 1px;\n    user-select: none;\n}\n\n#u-search .search-keyword {\n    color: #0c7cd5;\n    text-decoration: underline;\n    font-weight: bold;\n    font-style:normal\n}\n\n#u-search .modal-body .no-result {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n#u-search .modal-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.7);\n    z-index: 1;\n}\n\n@media screen and (max-width: 680px) {\n    #u-search {\n        padding: 0px;\n        display: none;\n    }\n\n    #u-search .modal {\n        box-shadow: none;\n        max-width: none;\n        top: 0;\n        left: 0;\n        margin: 0;\n        height: 100%;\n        border-radius: 0;\n    }\n    #u-search .modal-header {\n        border-radius: 0;\n        padding: 0px;\n    }\n} \n\n.modal-active {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n\n\n\n\n\n/* 以下是搜索框 */\n.search {\n    margin-right: 6px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.search .form-search {\n    padding: 10px 8px;\n}\n\n.search .form-search .input {\n    display: block;\n    line-height: 1.3;\n    color: #555;\n    background: #e8e8e8;\n    padding: 5px 8px;\n    box-shadow: none;\n    box-sizing: border-box;\n    font-size: 1rem;\n    border-radius: 8px;\n    border: none;\n    outline: none;\n}        \n\n.search .search-btn {\n    width: 22px;\n    height: 22px;\n    line-height: 22px;\n    margin-right: 5px;\n}\n\n.search .search-btn .search-btn-img {\n    height: 100%;\n    width: 100%;\n}\n\n\n/* 搜索框修改 */\n@media screen and (max-width: 479px) {\n    /* 此处添加了内容 */\n     .mobile-title-hidden {\n         transition: all 0.5s;\n         transform: translateX(-300%);\n     }\n     /* 上面的是添加的内容 */\n     .navbar-mobile-right {\n         display: flex;\n         flex-direction: row;\n         align-items: center;\n     }\n     .search .search-btn {\n         cursor: pointer;\n     }\n     .search .form-search {\n         display: none;\n     }\n     .mobile-search {\n         transition: width 0.3s;\n         position: absolute;\n         top: 0px;\n         left: 0px;\n         right: 50px;\n         padding-left: 15px;\n         background: transparent;\n         height: 80px;\n         display: flex;\n         flex-direction: row;\n         margin-right: 15px;\n         box-sizing: border-box;\n     }\n     .mobile-search .form-search {\n         display: block; \n         flex: 1;\n     }\n     .mobile-search .input {\n         width: 100%;\n     } \n    /* 此处添加了内容 */\n     .open-search {\n         position: absolute;\n         top: 0;\n         right: 15px;\n     }\n }\n\n\n/* 原始内容 */\n/* @media screen and (max-width: 479px) {\n\n    .navbar-mobile-right {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n\n    .search .search-btn {\n        cursor: pointer;\n    }\n\n    .search .form-search {\n        display: none;\n    }\n\n    .mobile-search {\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        right: 50px;\n        padding-left: 15px;\n        background: #fff;\n        height: 80px;\n        display: flex;\n        flex-direction: row;\n        margin-right: 15px;\n    }\n\n    .mobile-search .form-search {\n        display: block; \n        flex: 1;\n    }\n\n    .mobile-search .input {\n        width: 100%;\n    } \n} */\n/* 以上是搜索框 */\n```\n\n> * p.s. 由于css需要被style.styl引用，故需在/themes/Chic/source/css/style.styl文件首行加入@import \"_lib/search.css\"\n\n\n# 创建搜索栏\n* 在`./themes/Chic/layout/_partial/`下新建文件`search.ejs`，写入以下代码：\n```ejs\n<% if(config.search && config.search.enable ) { %>\n    <div class=\"search \">\n        <div class=\"search-btn\" onClick=\"searchToggle()\">\n            <img src=\"<%- url_for(theme.searchImg) %>\" class=\"search-btn-img\" />\n        </div>\n        <form class=\"form-search\">\n            <input class=\"input\" placeholder=\"点此搜索\" autocomplete=\"off\" id=\"<%= name %>-search-input\"/>\n        </form>\n    </div>\n<% } %>\n```\n\n> * p.s. 这里还要提一点，该增加的搜索框会与原页面的排版有冲突，故在此步我们还需要对/themes/Chic/source/css/中的layout.styl修改如下（注意只对.navbar-right进行了修改）：\n> * Before\n```styl\n.navbar   \n    height 4rem  \n    line-height 4rem  \n    width 100%  \n    .container   \n        width auto  \n        max-width 1200px  \n        text-align center  \n        margin 0 auto  \n        display flex  \n        justify-content space-between\n```\n\n> * After\n```styl\n.navbar \n  height 4rem\n  line-height 4rem\n  width 100%\n  .container \n    width auto\n    max-width 1200px\n    text-align center\n    padding-left 1em\n    padding-right 1em\n    margin 0 auto\n    display flex\n    justify-content space-between\n    .navbar-right\n      display flex\n      flex-direction row\n      align-items center\n```\n\n# header内添加搜索框\n打开`/themes/Chic/layout/_partial/header.ejs`，将下面代码的5-6行，23-27行分别添加到相应位置完成pc和mobile搜索框的添加。\n```ejs\n<nav class=\"navbar\">\n    <div class=\"container\">\n        <!-- <div class=\"navbar-header header-logo\"><a href=\"<%- config.root %>\"><%= theme.navname %></a></div> -->\n        <div class=\"navbar-header header-logo\"><a href=\"<%- config.root %>\"><i class=\"iconfont icon-zhuye\" style=\"font-size: 1em;\"></i><%= theme.navname %></a></div>\n        <div class=\"menu navbar-right\">\n            <!-- 这里表示的是pc端搜索框 -->\n            <% var defaultName = 'pc' %>\n            <%- partial('_partial/search', { name: defaultName }) %>\n            <% for (var i in theme.nav){ %>\n            <a class=\"menu-item\" href=\"<%- url_for(theme.nav[i]) %>\"><%= i %></a>\n            <% } %>\n            <input id=\"switch_default\" type=\"checkbox\" class=\"switch_default\">\n            <label for=\"switch_default\" class=\"toggleBtn\"></label>\n        </div>\n    </div>\n</nav>\n\n<%# mobile %>\n<nav class=\"navbar-mobile\" id=\"nav-mobile\">\n    <div class=\"container\">\n        <div class=\"navbar-header\">\n            <div>\n                <a href=\"<%- config.root %>\"><%= theme.navname %></a><a id=\"mobile-toggle-theme\">·&nbsp;Light</a>\n            </div>\n            <div class=\"navbar-mobile-right\">\n                <% var type = 'mobile' %>\n                <%- partial('_partial/search', { name: type }) %>\n                <div class=\"menu-toggle\" onclick=\"mobileBtn()\">&#9776; 目录</div>\n            </div>\n\n        </div>\n        <div class=\"menu\" id=\"mobile-menu\">\n            <% for (var i in theme.nav){ %>\n            <a class=\"menu-item\" href=\"<%- url_for(theme.nav[i]) %>\"><%= i %></a>\n            <% } %>\n        </div>\n    </div>\n</nav>\n```\n\n# 添加搜索框的js\n* 在`./themes/Chic/layout/_plugin/`下新建文件`search.ejs`，并写入以下代码：\n```ejs\n<script>\n    // function searchToggle() {\n    //     const width = $(document.body).width()\n    //     if(width > 479) {\n    //         return;\n    //     }\n    //     const search = $('.search');\n    //     const searchForm = $('.form-search')\n\n    //     if(!search.hasClass(\"mobile-search\")) {\n    //         search.addClass(\"mobile-search\");\n    //     } else {\n    //         search.removeClass(\"mobile-search\");\n    //     } \n    // }\n\n    function searchToggle() {\n        const width = $(document.body).width()\n        if(width > 479) {\n            return;\n        }\n        const search = $('.search');\n        const searchForm = $('.form-search');\n        const menuToggle = $('.menu-toggle');\n        const title = $('.navbar-header-title ');\n\n        if(!search.hasClass(\"mobile-search\")) {\n            search.addClass(\"mobile-search\");\n            menuToggle.addClass(\"open-search\")\n            title.addClass(\"mobile-title-hidden\")\n        } else {\n            search.removeClass(\"mobile-search\");\n            menuToggle.removeClass(\"open-search\")\n            // title.css({visibility: 'visible'})\n            title.removeClass(\"mobile-title-hidden\")\n        } \n    }\n\n\n\n    function search(searchInputEl, formEl, flag) {\n        const path = \"<%= config.root %>\" + \"<%= config.search.path %>\"; // 可以在public 下查看这个search.json\n        $(formEl).submit(function(e){\n            e.preventDefault();\n            let target = null\n            if(searchInputEl == null) {\n                const screenWidth = $(document.body).width();\n                target = screenWidth > 479 ? $('#pc-search-input') : $('#mobile-search-input');\n                console.log(target);\n            } else {\n                target = $(searchInputEl)\n            }\n\n            if(!flag && target.val() === '') {\n                return ;\n            }\n\n            $(\"#u-search\").fadeIn(500, function() {\n                $(\"body > .wrapper\").addClass(\"modal-active\");\n\n                $.ajax({\n                    url: path,\n                    dataType: \"json\",\n                    beforeSend: function (xhr) {\n                        $input = target.val();\n                        $(\".form-input\").val($input);\n                        const loadingBar = $('.search-loading-bar') \n                        loadingBar.css({\n                            width:'100%',\n                            display: 'block'\n                        });\n                    },\n                    success: function( datas ) {\n                        console.log(datas);\n                        const $resultPanel = $(\".modal-body\")[0];\n                        let str = `<ul class=\"modal-results\">`;\n                        var keywords = $(\".form-input\").val().trim().toLowerCase().split(/[\\s\\-]+/);\n                        $resultPanel.innerHTML = \"\";\n                        let hasResult = false\n                        let text = `<div class=\"no-result\">找不到与关键词相关的内容....</div>`;\n\n                        if ($(\".form-input\").val().trim().length <= 0) {\n                            // 没有结果\n                            $resultPanel.innerHTML = text;\n                            return;\n                        }\n                        datas.forEach(function (data, index) {\n                            var isMatch = true;\n                            if (!data.title || data.title.trim() === '') {\n                                data.title = \"Untitled\";\n                            }\n                            var data_title = data.title.trim().toLowerCase();\n                            var data_content = data.content && data.content.trim().replace(/<[^>]+>/g, \"\").toLowerCase() || '';\n                            var data_url = data.url;\n                            var index_title = -1;\n                            var index_content = -1;\n                            var first_occur = -1;\n                            // only match artiles with not empty contents\n                            if (data_content !== '') {\n                                keywords.forEach(function (keyword, i) {\n                                    index_title = data_title.indexOf(keyword);\n                                    index_content = data_content.indexOf(keyword);\n\n                                    if (index_title < 0 && index_content < 0) {\n                                        isMatch = false;\n                                    } else {\n                                        hasResult = true\n                                        if (index_content < 0) {\n                                            index_content = 0;\n                                        }\n                                        if (i == 0) {\n                                            first_occur = index_content;\n                                        }\n                                    }\n                                });\n                            } else {\n                                isMatch = false;\n                            }\n                            // show search results\n                            if (isMatch) {\n                                str += `<li class='result-item'><a href='${data_url}' class='result-item-detail'> <span class=\"title\">${data_title}</span>`;\n                                var content = data.content.trim().replace(/<[^>]+>/g, \"\");\n                                if (first_occur >= 0) {\n                                    // cut out 200 characters\n                                    var start = first_occur - 40;\n                                    var end = first_occur + 160;\n\n                                    if (start < 0) {\n                                        start = 0;\n                                    }\n\n                                    if (start == 0) {\n                                        end = 200;\n                                    }\n\n                                    if (end > content.length) {\n                                        end = content.length;\n                                    }\n\n                                    var match_content = content.substring(start, end);\n\n                                    // highlight all keywords\n                                    keywords.forEach(function (keyword) {\n                                        var regS = new RegExp(keyword, \"gi\");\n                                        match_content = match_content.replace(regS, `<em class=\"search-keyword\">${keyword}</em>`);\n                                    });\n\n                                    str += `<span class=\"content\"> ${match_content} ...</span></a>`;\n                                }\n                                str += \"</li>\";\n                            }\n                        });\n                        str += \"</ul>\";\n                        if(hasResult) {\n                            $resultPanel.innerHTML = str;\n                        } else {\n                            $resultPanel.innerHTML = text;\n                        }\n\n                    },\n                    complete: function() {\n                        setTimeout(() => {\n                                const loadingBar = $('.search-loading-bar') \n                                loadingBar.css({\n                                    width:'0%',\n                                    display: 'none'\n                                });\n                        }, 300)\n                    }\n                });\n            })\n\n        });\n    }\n\n    $(document).ready(function() {\n        $('.modal-close').click(function () { \n            $(\"#u-search\").fadeOut();\n            $(\"body > .wrapper\").removeClass(\"modal-active\")\n        })\n\n        $('.modal-overlay').click(function() {\n            $(\"#u-search\").fadeOut();\n            $(\"body > .wrapper\").removeClass(\"modal-active\")\n        })\n        search(null, \".form-search\", false)\n        search(\"#u-search-modal-form .form-input\", \".u-search-modal-form\", true)\n    })\n</script>\n```\n\n# 启动搜索框的js\n* 注意此部分会最终决定显示效果，若产生了错误的配置，会产生如下图的错误，解决思路见[[Hexo部署的页面出现错误，一个debug思路与工具]]\n* 打开`./themes/Chic/layout/_partial/head.ejs`，尾行添加以下代码：\n\n```ejs\n<!-- 搜索的部分 -->\n<%# search %>\n\n<% if(config.search && config.search.enable ) { %>\n    <%- partial('_plugins/search.ejs') %>\n<% } %>\n\n```\n\n![image-20220329232026029](Hexo-Chic模板添加搜索栏/image-20220329232026029.png)\n\n\n# 手机端源码调整\n\n* 打开`themes\\Chic\\layout\\_plugins\\search.ejs`，进行修改\n\n**修改前**\n\n```ejs\n function searchToggle() {\n \tconst width = $(document.body).width()\n \tif(width > 479) {\n \t\treturn;\n \t}\n\n\tconst search = $('.search');\n \tconst searchForm = $('.form-search')\n\n \tif(!search.hasClass(\"mobile-search\")) {\n \tsearch.addClass(\"mobile-search\");\n\t } else {\n\tsearch.removeClass(\"mobile-search\");\n        }\n     }\n\n```\n\n\n**修改后**\n```ejs:search.ejs\n\n    function searchToggle() {\n        const width = $(document.body).width()\n        if(width > 479) {\n            return;\n        }\n        const search = $('.search');\n        const searchForm = $('.form-search');\n        const menuToggle = $('.menu-toggle');\n        const title = $('.navbar-header-title ');\n\n        if(!search.hasClass(\"mobile-search\")) {\n            search.addClass(\"mobile-search\");\n            menuToggle.addClass(\"open-search\")\n            title.addClass(\"mobile-title-hidden\")\n        } else {\n            search.removeClass(\"mobile-search\");\n            menuToggle.removeClass(\"open-search\")\n            // title.css({visibility: 'visible'})\n            title.removeClass(\"mobile-title-hidden\")\n        } \n    }\n\n```\n\n\n* 修改 `Chic\\source\\css\\_lib\\search.css` 样式文件\n\n**修改前**\n\n```css:search.css\n/* 搜索框修改 */\n@media screen and (max-width: 479px) {\n     .navbar-mobile-right {\n         display: flex;\n         flex-direction: row;\n         align-items: center;\n     }\n     .search .search-btn {\n         cursor: pointer;\n     }\n     .search .form-search {\n         display: none;\n     }\n     .mobile-search {\n         transition: width 0.3s;\n         position: absolute;\n         top: 0px;\n         left: 0px;\n         right: 50px;\n         padding-left: 15px;\n         background: transparent;\n         height: 80px;\n         display: flex;\n         flex-direction: row;\n         margin-right: 15px;\n         box-sizing: border-box;\n     }\n     .mobile-search .form-search {\n         display: block; \n         flex: 1;\n     }\n     .mobile-search .input {\n         width: 100%;\n     } \n }\n```\n\n**修改后**\n```css:search.css\n/* 搜索框修改 */\n@media screen and (max-width: 479px) {\n    /* 此处添加了内容 */\n     .mobile-title-hidden {\n         transition: all 0.5s;\n         transform: translateX(-300%);\n     }\n     /* 上面的是添加的内容 */\n     .navbar-mobile-right {\n         display: flex;\n         flex-direction: row;\n         align-items: center;\n     }\n     .search .search-btn {\n         cursor: pointer;\n     }\n     .search .form-search {\n         display: none;\n     }\n     .mobile-search {\n         transition: width 0.3s;\n         position: absolute;\n         top: 0px;\n         left: 0px;\n         right: 50px;\n         padding-left: 15px;\n         background: transparent;\n         height: 80px;\n         display: flex;\n         flex-direction: row;\n         margin-right: 15px;\n         box-sizing: border-box;\n     }\n     .mobile-search .form-search {\n         display: block; \n         flex: 1;\n     }\n     .mobile-search .input {\n         width: 100%;\n     } \n    /* 此处添加了内容 */\n     .open-search {\n         position: absolute;\n         top: 0;\n         right: 15px;\n     }\n }\n\n```\n\n\n# Ref\n\n* [Hexo建站工具贴3_Chow Bill搜索功能](https://maojinyuan.github.io/2020/07/25/20200725Hexo%E5%BB%BA%E7%AB%99%E5%B7%A5%E5%85%B7%E8%B4%B43_Chow%20Bill%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/)\n* [jQuery下载和安装详细教程](https://blog.csdn.net/p445098355/article/details/103995541)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"npm无法在PowerShell运行解决办法","url":"/article/4add822c.html","content":"\n---\n\n**创建时间**：2022年3月29日20:15:45\n**最新更新**：2022年3月29日20:15:50\n\n\n---\n\n* 以管理员身份打开`Windows Powershell`，输入如下指令→输入`Y`→按回车\n\n```PowerShell\nset-ExecutionPolicy RemoteSigned\n```\n![image-20220329201612274](npm无法在PowerShell运行解决办法/image-20220329201612274.png)\n\n\n\n\n# Ref\n* [npm无法在powershell运行](https://blog.csdn.net/only_neo/article/details/116979393?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-116979393.pc_agg_new_rank&utm_term=npm+powershell+%E5%AE%89%E8%A3%85&spm=1000.2123.3001.4430)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Git-Bash，WSL2内GitHub无法访问、443 Operation timed out，使用Clash却无法在Git-Bash内访问GitHub的解决办法","url":"/article/7faf135d.html","content":"\n---\n\n\n**创建时间**：2022年3月29日20:11:01\n**最新更新**：2022年3月29日20:11:07\n\n\n---\n\n**核心思路**：设置代理端口为对应的代理软件端口\n\n---\n\n* 打开`Git-Bash`，输入如下指令，端口修改为Clash界面内对应的端口，同时记得打开`Allow LAN`\n\n```Git\n\n git config --global https.proxy http://127.0.0.1:7890\n git config --global http.proxy http://127.0.0.1:7890\n\n```\n\n![image-20220329201203592](Git-Bash，WSL2内GitHub无法访问、443-Operation-timed-out，使用Clash却无法在Git-Bash内访问GitHub的解决办法/image-20220329201203592.png)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"安装Hexo，npm install -g hexo的npm ERR报错解决","url":"/article/f63f7dc2.html","content":"\n---\n\n**创建时间**：2022年3月29日20:08:51\n**最新更新**：2022年3月29日20:08:58\n\n---\n\n**环境**：\n\n* Windows 10\n\n* Linux 20.04 ( WSL2 )\n\n---\n\n**报错信息**\n\n```bash\nroot@I:/mnt/e/001Code/MyBlog# npm install -g hexo\nnpm ERR! Cannot read property 'resolve' of undefined\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /mnt/nodejs/node_cache/_logs/2022-03-06T11_47_24_966Z-debug.log\n```\n\n---\n\n\n* 错误原因：这个错误是在使用WSL时出现的，需要使用Windows下的Windows Terminal或者Git-Bash安装。\n* 具体解决方法见[Hexo安装+个人网站建立+推送至GitHub](./4f595d21.html)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo生成时提示FATAL Permission denied. You can't use port 4000.解决办法","url":"/article/9e13174d.html","content":"\n---\n\n**创建时间**：2022年3月29日20:07:15\n**最新更新**：2022年3月29日20:07:20\n\n\n---\n\n\n**核心思路**：端口被占用，切换端口\n\n---\n\n* 打开`Git-Bash`，进入对应文件夹，输入以下指令，使用5000端口运行\n\n```bash\n\nhexo s -g -p 5000\n\n```\n\n# Ref\n* [FATAL Permission denied. You can't use port 4000.](https://blog.csdn.net/weixin_42429718/article/details/104310410)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo deploy部署后的页面图片引用路径如何检查？","url":"/article/b9c842e3.html","content":"\n---\n\n**创建时间**：2022年3月29日20:00:47\n**最新更新**：2022年3月29日20:00:55\n\n---\n\n**核心思路**：\n\n* 打开`GitHub`对应代码仓\n* 打开对应页面生成的`.html`文件\n* 根据正文找到对应代码内容\n\n---\n\n# 打开页面.html文件\n* 打开对应代码仓，打开对应文件夹，默认是`archives`，我设置成了`article`→打开对应页面`.html`文件→根据自己写的内容找到图片引用的对应代码句，可对图片引用路径进行检测\n\t* 这个是在根目录下的配置文件`_config.yml`中的`permalink: article/:abbrlink.html`这一句处修改，具体见\n\n![image-20220312193756172](Hexo-deploy部署后的页面图片引用路径如何检查？/image-20220312193756172.png)\n\n![image-20220312193820770](Hexo-deploy部署后的页面图片引用路径如何检查？/image-20220312193820770.png)\n\n![image-20220312193826758](Hexo-deploy部署后的页面图片引用路径如何检查？/image-20220312193826758.png)\n\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"GitHub的个人博客，blog，GitHub Pages如何修改地址，如何修改published site？","url":"/article/b3031f8a.html","content":"\n---\n\n**创建时间**：2022年3月29日19:53:25\n**最新更新**：2022年3月29日19:53:37\n\n\n---\n\n**核心思路**：\n\n1.改仓名\n2.调**Blog源码根目录**配置文件\n\n---\n\n# 改仓名\n\n* 进入设置页面修改代码仓名，`Settings`→`General`→`Repository name`→`Rename`，修改为对应的`.github.io`路径\n![image-20220329195625984](GitHub的个人博客，blog，GitHub-Pages如何修改地址，如何修改published-site？/image-20220329195625984.png)\n# 调整Blog源码根目录下配置文件\n\n* 调配置文件，打开**Blog源码根目录**的配置文件，下图是用`Visual Studio Code`打开整个文件夹，选中`_config.yml`配置文件\n\t* 修改url后面的地址为上面对应的仓名\n\t* 修改对应的repo地址为对应仓地址，进入代码仓→`Code`→复制→到**Blog源码目录**下的配置文件里repo后面粘贴\n\n![image-20220329195637088](GitHub的个人博客，blog，GitHub-Pages如何修改地址，如何修改published-site？/image-20220329195637088.png)\n![image-20220329195643350](GitHub的个人博客，blog，GitHub-Pages如何修改地址，如何修改published-site？/image-20220329195643350.png)\n\n![image-20220329195648919](GitHub的个人博客，blog，GitHub-Pages如何修改地址，如何修改published-site？/image-20220329195648919.png)\n\n![image-20220329195655481](GitHub的个人博客，blog，GitHub-Pages如何修改地址，如何修改published-site？/image-20220329195655481.png)\n\n# 确认代码仓Source源\n* 回到代码仓，确认Source源，点击`Settings`→`Pages`→`Source`看是否选中了对应的`Branch`\n\t* 这个主要是因为此处用另外一个`Branch`备份Blog源码\n* 点开网址，即可\n\n![image-20220329195702504](GitHub的个人博客，blog，GitHub-Pages如何修改地址，如何修改published-site？/image-20220329195702504.png)\n\n\n\n\n\n# 额外的话\n\n* 目前我采用的是公仓放网页部署后的码，另一个私仓放源码，分离开操作更稳\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo安装+个人网站建立+推送至GitHub","url":"/article/4f595d21.html","content":"\n---\n\n**创建时间**：2022年3月28日22:30:41\n**最新更新**：2022年3月29日20:13:53\n\n\n---\n\n**报错信息**：GitHub无法访问，报403错误\n\n解决方法见[Git-Bash，WSL2内GitHub无法访问、443 Operation timed out的解决办法](./7faf135d.html)\n\n---\n\n# 在Windows下部署Git\n* [Git下载地址](https://git-scm.com/)\n* 或可以在下载GitHub-Desktop时，会一并安装\n\n> 本节内的下部分内容，来自`学为所用（博客园）`，链接见Ref\n\n* 下载软件，见[下载页面](https://git-scm.com/downloads)\n\n![image-20220328223132197](Hexo安装-个人网站建立-推送至GitHub/image-20220328223132197.png)\n* 安装，记得修改路径\n\n![image-20220328223143065](Hexo安装-个人网站建立-推送至GitHub/image-20220328223143065.png)\n![image-20220328223150274](Hexo安装-个人网站建立-推送至GitHub/image-20220328223150274.png)\n\n> * 下图红框内的选项是默认勾选的，建议不要动。绿色框1是决定是否在桌面创建快捷方式的。绿色框2是决定在所有控制台窗口中使用TrueType字体和是否每天检查Git是否有Windows更新的。这些根据自己需要选择。\n\n> * 点击“Next”按钮进入下图界面\n\n\n![image-20220328223158953](Hexo安装-个人网站建立-推送至GitHub/image-20220328223158953.png)\n* 选择开始菜单\n\n![image-20220328223207209](Hexo安装-个人网站建立-推送至GitHub/image-20220328223207209.png)\n* 选择默认编译器\n\n![image-20220328223213521](Hexo安装-个人网站建立-推送至GitHub/image-20220328223213521.png)\n\n* 配置PATH环境\n\n> * 这个界面是调整您的PATH环境。\n> * 第一种配置是“仅从Git Bash使用Git”。这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。但是这将不能通过第三方软件使用。\n> * 第二种配置是“从命令行以及第三方软件进行Git”。该选项被认为是安全的，因为它仅向PATH添加了一些最小的Git包装器，以避免使用可选的Unix工具造成环境混乱。  \n> * 您将能够从Git Bash，命令提示符和Windows PowerShell以及在PATH中寻找Git的任何第三方软件中使用Git。这也是推荐的选项。\n> * 第三种配置是“从命令提示符使用Git和可选的Unix工具”。警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。\n> * 建议选择推荐的选项第二种配置\n\n![image-20220328223221564](Hexo安装-个人网站建立-推送至GitHub/image-20220328223221564.png)\n* 选择HTTPS后端传输\n\n> * 这个界面是选择HTTPS后端传输。\n> * 第一个选项是“使用 OpenSSL 库”。服务器证书将使用ca-bundle.crt文件进行验证。这也是我们常用的选项。\n> * 第二个选项是“使用本地 Windows 安全通道库”。服务器证书将使用Windows证书存储验证。此选项还允许您使用公司的内部根CA证书，例如通过Active Directory Domain Services 。\n> * 建议使用默认选项第一项\n\n![image-20220328223228898](Hexo安装-个人网站建立-推送至GitHub/image-20220328223228898.png)\n\n* 配置行尾符号转换\n\n> * 这个界面是配置行尾符号转换。\n> * 第一个选项是“签出Windows风格，提交Unix风格的行尾”。签出文本文件时，Git会将LF转换为CRLF。提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Windows上的推荐设置（“ core.autocrlf”设置为“ true”）\n> * 第二个选项是“按原样签出，提交Unix样式的行尾”。签出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Unix上的建议设置（“ core.autocrlf”设置为“ input”）\n> * 第三种选项是“按原样签出，按原样提交”。当签出或提交文本文件时，Git不会执行任何转换。不建议跨平台项目选择此选项（“ core.autocrlf”设置为“ false”）\n> * 建议选择第一种选项\n\n![image-20220328223236649](Hexo安装-个人网站建立-推送至GitHub/image-20220328223236649.png)\n\n* 配置终端模拟器以与Git Bash一起使用\n\n> * 这个界面是配置终端模拟器以与Git Bash一起使用。\n> * 第一个选项是“使用MinTTY（MSYS2的默认终端）”。Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和Unicode字体。Windows控制台程序（例如交互式Python）必须通过“ winpty”启动才能在MinTTY中运行。\n> * 第二个选项是“使用Windows的默认控制台窗口”。Git将使用Windows的默认控制台窗口（“cmd.exe”），该窗口可以与Win32控制台程序（如交互式Python或node.js）一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。\n> * 建议选择默认的第一种选项\n\n\n![image-20220328223244207](Hexo安装-个人网站建立-推送至GitHub/image-20220328223244207.png)\n\n* 配置配置额外的选项\n\n> * 这个界面是配置配置额外的选项。\n> * 第一个选项是“启用文件系统缓存”。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）。 这提供了显著的性能提升。\n> * 第二个选项是“启用Git凭证管理器”。Windows的Git凭证管理器为Windows提供安全的Git凭证存储，最显着的是对Visual Studio Team Services和GitHub的多因素身份验证支持。 （需要.NET Framework v4.5.1或更高版本）。\n> * 第三个选项是“启用符号链接”。启用符号链接（需要SeCreateSymbolicLink权限）。请注意，现有存储库不受此设置的影响。\n> * 建议勾选默认的第一、第二选项\n\n![image-20220328223251275](Hexo安装-个人网站建立-推送至GitHub/image-20220328223251275.png)\n\n* 配置实验选项，点击`Next`，等待安装完成\n\n> * 这个界面是配置实验选项。\n> * 启用实验性的内置添加 -i / -p。（新！）使用实验性的内置交互式add（“ git add -i”或“ git add -p”）。这使其速度更快（尤其是启动！），但尚未被认为是可靠的。\n> * 默认不勾选\n\n![image-20220328223258723](Hexo安装-个人网站建立-推送至GitHub/image-20220328223258723.png)\n\n# 在Windows下部署Node.js\n\n> 此部分内容，部分图片来自`蜡笔小柯南（CSDN）`，链接见Ref\n\n\n* 下载并安装node.js，[node.js下载页面](https://nodejs.org/en/)，记得修改安装目录\n\n![image-20220328223310440](Hexo安装-个人网站建立-推送至GitHub/image-20220328223310440.png)\n* 安装选择默认选项即可\n\n![image-20220328223322095](Hexo安装-个人网站建立-推送至GitHub/image-20220328223322095.png)\n\n![image-20220328223332967](Hexo安装-个人网站建立-推送至GitHub/image-20220328223332967.png)\n\n![image-20220328223340455](Hexo安装-个人网站建立-推送至GitHub/image-20220328223340455-16484780211051.png)\n\n![image-20220328223349160](Hexo安装-个人网站建立-推送至GitHub/image-20220328223349160.png)\n\n![image-20220328223355545](Hexo安装-个人网站建立-推送至GitHub/image-20220328223355545.png)\n\n![image-20220328223400941](Hexo安装-个人网站建立-推送至GitHub/image-20220328223400941.png)\n\n![image-20220328223406555](Hexo安装-个人网站建立-推送至GitHub/image-20220328223406555.png)\n\n\n\n\n\n* 检查一下环境变量是否写入，`win`+`R`打开运行→输入`cmd`→回车→`node -v`与`npm -v`查看对应版本\n  * 若无报错信息，意味着配置完成\n\n![image-20220328223426298](Hexo安装-个人网站建立-推送至GitHub/image-20220328223426298.png)\n\n\n\n![image-20220328223432826](Hexo安装-个人网站建立-推送至GitHub/image-20220328223432826.png)\n\n\n\n\n# Hexo部署\n\n* 先做好这两步\n\t* [npm无法在PowerShell运行解决办法](./4add822c.html)\n\t* [[Windows Terminal如何以管理员模式打开对应的Bash？]]\n\n\n* 如果在管理员模式下的`Windows Terminal`内输入`node -v`与`npm -v`如下正常显示后，意味着环境变量配置完成\n\n![image-20220328223447109](Hexo安装-个人网站建立-推送至GitHub/image-20220328223447109.png)\n\n![image-20220328223452219](Hexo安装-个人网站建立-推送至GitHub/image-20220328223452219.png)\n\n\n\n\n* 安装Hexo，在管理员模式下的PowerShell内，进入到对应路径，输入如下指令\n\n```PowerShell\nnpm install -g hexo\n```\n\n* 为了在下面步骤中顺利使用`hexo d`指令，需要安装`hexo-deployer-git`，在管理员模式下的PowerShell内，输入如下指令\n\t* [[ERROR Deployer not found报错解决]]\n\n\n```PowerShell\nnpm install hexo-deployer-git --save\n```\n\n# GitHub新建含GitHub Pages的代码仓\n[[如何使用GitHub搭建个人网站，博客，blog？]]\n\n* 创建一个新的代码仓，必须选用`Public`\n\t* ![image-20220328223533689](Hexo安装-个人网站建立-推送至GitHub/image-20220328223533689.png)\n* 创建代码仓后，进入`Settings`→`Options`→`GitHub Pages`→`Check it out here!`或者直接`Settings`→`Pages`\n\t* ![image-20220328223546631](Hexo安装-个人网站建立-推送至GitHub/image-20220328223546631.png)\n\t* ![image-20220328223559862](Hexo安装-个人网站建立-推送至GitHub/image-20220328223559862.png)\n* 选择一个`Theme`，另外页面的访问网址也在此\n\t* ![image-20220328223607671](Hexo安装-个人网站建立-推送至GitHub/image-20220328223607671.png)\n\t* ![image-20220328223615236](Hexo安装-个人网站建立-推送至GitHub/image-20220328223615236.png)\n\n\n* 通过`Git-Bash`进入空文件夹，将上述代码仓`git clone`到本地对应路径\n\n# 本地创建个人blog环境\n* 记得要完成这个[[Windows Terminal如何以管理员模式打开对应的Bash？]]\n\n* 以管理员模式打开`Git-Bash`，进入你想要存放blog源码的文件夹，输入`hexo init`，然后将上一步里头，`git clone`下来的`GitHub Pages`源码内的`.git`文件夹，复制粘贴到你进行`hexo init`的文件夹，这一步是为了实现blog源码的备份\n\t* 具体见[GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？](./f338e400.html)\n\n\n\n* 在[Themes | Hexo](https://hexo.io/themes/)内挑选喜欢的Theme，左键点击对应Theme→进入对应GitHub页面→进入一个空文件夹→输入`hexo init`→在`Git-Bash`内`cd blog文件夹/themes`→`git clone 对应模板`\n\t* 例如`git clone https://github.com/Siricee/hexo-theme-Chic.git Chic`\n\n![image-20220328223635487](Hexo安装-个人网站建立-推送至GitHub/image-20220328223635487.png)\n\n![image-20220328223642924](Hexo安装-个人网站建立-推送至GitHub/image-20220328223642924.png)\n\n![image-20220328223649679](Hexo安装-个人网站建立-推送至GitHub/image-20220328223649679.png)\n\n* 进行配置，此时你有2类`_config.yml`\n\t* 一类在你存放blog源码的根目录下\n\t* 一类存放在`./themes/对应主题`下，如`./themes/Chic/`下\n* 对根目录下配置文件`_config.yml`进行配置，此处仅讲必要的设置，`title`等个性化设置可以自行摸索，设置完记得`Ctrl`+`S`保存\n\t* `url: `后填写`GitHub Pages`的`publish site`，见GitHub代码仓→`Settings`→`Pages`，记住此处的`Source`要正确选择`branch`\n\t* `theme: `后填写你选中的主题的项目名，比如此处是`Chic`\n\t* `deploy: `后新建3行\n\t\t* `type: `填写`git`\n\t\t* `repo: `填写你代码仓的地址\n\t\t* `branch: `填写对应的分支，这个分支用于`hexo`上传网页源码用\n\t\t\t* 注意我们这边有2种上传，一种是`hexo d`，一种是`git push`\n\t\t\t\t* `hexo d`用于提供网页显示的源码，通常在代码仓默认分支\n\t\t\t\t* `git push`用于保存全部blog源码，通常在代码仓非默认分支\n\n![image-20220328223713052](Hexo安装-个人网站建立-推送至GitHub/image-20220328223713052.png)\n\n\n\n![image-20220328223720970](Hexo安装-个人网站建立-推送至GitHub/image-20220328223720970.png)\n\n\n\n![image-20220328223730262](Hexo安装-个人网站建立-推送至GitHub/image-20220328223730262.png)\n\n\n\n* 回到管理员模式打开的`Git-Bash`，准备部署blog，cd到存放Blog源码的根目录→输入`hexo clean`→`hexo s -g`部署并启动本地预览→在浏览器里打开`https://localhost:4000`即可看到部署的个人页面→回到`Git-Bash`→`Ctrl`+`C`停止预览→`hexo d`将源码上传到对应代码仓\n\n* 点开代码仓右下角可以查看编译进度，等`pending`变为`Active`即可，点击右侧`View deployment`即可进入自己的blog查看\n\n![image-20220328223739971](Hexo安装-个人网站建立-推送至GitHub/image-20220328223739971.png)\n\n\n\n![image-20220328223748149](Hexo安装-个人网站建立-推送至GitHub/image-20220328223748149.png)\n\n\n\n\n# 分支备份源码思路\n[GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？](./f338e400.html)\n\n\n# Ref\n* [Windows系统Git安装教程（详解Git安装过程）](https://www.cnblogs.com/xueweisuoyong/p/11914045.html)\n* [Node.js最新最详细安装教程（2020）](https://blog.csdn.net/Small_Yogurt/article/details/104968169)\n* [hexo:ERROR Deployer not found: github](https://stackoverflow.com/questions/34452547/hexoerror-deployer-not-found-github)\n","tags":["Hexo"],"categories":["博客搭建"]},{"title":"Hexo部署的页面出现错误，一个debug思路与工具","url":"/article/17fd3736.html","content":"\n---\n\n\n\n**创建时间**：2022年3月28日22:23:14\n**最新更新**：2022年3月28日22:23:24\n\n\n---\n\n* 在打开的网页按`F12`打开调试器（我是Firefox是`F12`），`选取页面中的元素`→移动到想查看的元素处→在下面的`查看器`找一些特征，比如那个注释\n\n![image-20220328222516405](Hexo部署的页面出现错误，一个debug思路与工具/image-20220328222516405.png)\n\n* 通过特征定位出错代码位置\n\n![image-20220328222535224](Hexo部署的页面出现错误，一个debug思路与工具/image-20220328222535224.png)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 配置教程归纳","url":"/article/551b025b.html","content":"\n---\n\n**创建时间**：2022年3月28日21:07:27\n**最新更新**：2022年4月28日09:29:07\n\n\n---\n\n**核心思路**：按页面分类教程，其实本质都是调`HTML`和`CSS`\n\n---\n\n# 基本操作\n\n* 创建新的文章，进入对应文件夹，`hexo new` + `\"`文章名`\"`\n\t* 如`hexo new \"教程 这是一个测试\"`，能生成一篇`教程 这是一个测试`的博文页面\n\n\n* 每次在本地更新好页面以后，在`Git-Bash`内通过如下指令上传\n  * 操作1\n    * `hexo clean`\n    * `hexo s -g`，点开网址开没问题后`Ctrl`+`C`\n    * `hexo d`推送上去\n  * 操作2\n    * `hexo clean`\n    * `hexo g`，部署\n    * `hexo d`推送上去\n* 更新\n  * `npm update hexo -g`\n* 清理缓存，生成，发布，在`Git-Bash`上输入如下指令\n  * `hexo clean && hexo g && hexo d`\n\n---\n\n# 教程总表\n| 序号              | 备注                       | 链接                                                         |\n| ----------------- | -------------------------- | ------------------------------------------------------------ |\n| 基础操作          | -                          | -                                                            |\n| 1                 | 部署报错                   | [Hexo部署的页面出现错误，一个debug思路与工具](./17fd3736.html) |\n| 2                 | 推送GitHub                 | [Hexo安装+个人网站建立+推送至GitHub](./4f595d21.html)        |\n| 3                 | 源码备份                   | [GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？](./f338e400.html) |\n| 4                 | 修改博客路径为`.github.io` | [GitHub的个人博客，blog，GitHub Pages如何修改地址，如何修改published site？](./b3031f8a.html) |\n| 5                 | 检查图片路径               | [Hexo deploy部署后的页面图片引用路径如何检查？](./b9c842e3.html) |\n| 6                 | 安装插件报错处理           | [Hexo安装插件遇上5 vulnerabilities (2 moderate, 2 high, 1 critical)类似的报错，让使用npm fund寻求更多细节，如何解决](./9762d0c6.html) |\n| 7                 | 端口报错处理               | [Hexo生成时提示FATAL Permission denied. You can't use port 4000.解决办法](./9e13174d.html) |\n| 8                 | 安装报错处理               | [安装Hexo，npm install -g hexo的npm ERR报错解决](./f63f7dc2.html) |\n| 9                 | 443报错处理                | [Git-Bash，WSL2内GitHub无法访问、443 Operation timed out的解决办法](./7faf135d.html) |\n| 10                | npm无法运行                | [npm无法在PowerShell运行解决办法](./4add822c.html)           |\n|                   |                            |                                                              |\n| 首页              |                            |                                                              |\n| 1                 | ①搜索                      | [Hexo Chic模板添加搜索栏](./1650c0d7.html)                   |\n| 2                 | ②css样式                   | ②样式引用参考[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html)<br>②部署见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html) |\n| 3                 | ③新建页面                  | [Hexo如何新建一个新的页面，page，栏目？](./6376ffa2.html)    |\n| 4                 | ④Chic去logo                | [Hexo + Chic 去除首页的圆形头像logo](./ebea8ed0.html)        |\n| 5                 | ⑤超链接                    | [Hexo + Chic 首页实现带文字的超链接](./fd9baec8.html)        |\n| 6                 | ⑥加icon                    | [Hexo + Chic如何添在link处加新的icon（svg）图标](./9a3fd1d.html) |\n| 7                 | ⑦加icon（任意位置）        | ⑦见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)<br>若⑦涉及样式全局引用问题，见[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html) |\n| 8                 | ⑧站点浏览统计              | ⑧见[Hexo + Chic 增加站点浏览统计](./a976f1c7.html)<br>⑧数据未加载出来前样式见[Hexo + Chic busuanzi未显示阅读字数、时长等情况下的等待图标添加（旋转菊花等）](./785e20b9.html) |\n|                   |                            |                                                              |\n| 分栏-文章         |                            |                                                              |\n| 1                 | ①                          | ①见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)<br>①无法正常显示见[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html) |\n| 2                 | ②                          | ②见[Hexo + Chic过长博文名如何实现省略，过长博文名，实现三个点省略方案](./321a7025.html) |\n|                   |                            |                                                              |\n| 特殊页面-CV       |                            |                                                              |\n| 1                 | CV简历页面                 | 基础实现见[Hexo + Chic 在同一行实现左中右内容布局，Markdown（Typora）与Obsidian亦可参考](./46fb7fa8.html) |\n| 特殊页面-类别     |                            |                                                              |\n| 2                 | 类别页面                   | 类别页面过长博文名省略，见[Hexo + Chic 类别category页面过长博文名的三个点省略方案](./9ff0cec8.html) |\n|                   |                            |                                                              |\n| 文章-文章头       |                            |                                                              |\n| 1                 | ①emoji                     | ①见[Hexo + Chic 添加emoji支持，并使用emoji](./a150dc7d.html) |\n| 2                 | ②字数、阅读时长            | ②见[Hexo + Chic 添加文章字数和阅读时长](./11459889.html)     |\n| 3                 | ③浏览量                    | ③见[Hexo + Chic 增加单篇文章浏览统计](./a976f1c7.html)       |\n| 文章-文章中       |                            |                                                              |\n| 1                 | ①引用自己写的别的博文      | ①见[Hexo如何实现对博客内，同一个文件夹下其他文章的引用？](./9d63668d.html) |\n| 2                 | ②mermaid                   | ②见[Hexo + Chic + mermaid配置](./751fbb63.html)              |\n| 文章-数学公式     |                            |                                                              |\n| 1                 | LaTeX                      | 见[Hexo + Chic如何支持数学公式，特别是复杂LaTeX公式，公式会重复显示、LaTeX公式本地预览可以显示deploy上去无法显示解决办法](./3d095f62.html) |\n| 文章-kbd样式      |                            |                                                              |\n| 1                 | kbd样式                    | 见[Hexo + Chic设置kbd样式，code、samp等样式亦可参考](./96b62d8a.html) |\n| 文章-表格与文章尾 |                            |                                                              |\n| 1                 | ①表格+代码块               | ①见[Hexo, Obsidian, Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？](./f5721cb9.html) |\n| 2                 | ②表格+滚动条               | ②见[Hexo + Chic 过长的表格使用滚动条](./ea970ca1.html)       |\n| 3                 | ③插图片                    | ③见[Hexo + Chic + Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？](./d101e67c.html) |\n| 4                 | ④修改Tags                  | ④见[Hexo + Chic修改Tag(s)前面的井号](./ccd6f7fe.html)        |\n| 5                 | ⑤打赏按钮                  | ⑤见[Hexo + Chic实现打赏按钮，鼠标移动、浮过去会显示对应图片](./cb001f78.html) |\n| 6                 | ⑥评论区                    | ⑥见[Chic配置Gitalk，添加评论区](./b1784561.html)<br>⑥常见错误见[Hexo + Chic配置Gitalk显示error=redirect_uri_mismatch&，点击登录GitHub返回主页解决办法](./eab12f60.html) |\n|                   |                            |                                                              |\n| 功能-搜索         |                            |                                                              |\n| 1                 | 搜索                       | [Hexo + Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法](./264c6a00.html)<br>[Hexo + Chic 如何上交网站地图sitemap.xml给Google？如果显示无法获取Couldn't Fetch应该怎么办？](./67414c31.html) |\n|                   |                            |                                                              |\n\n\n\n\n\n# 基础操作\n\n| 序号 | 备注                       | 链接                                                         |\n| ---- | -------------------------- | ------------------------------------------------------------ |\n| 1    | 部署报错                   | [Hexo部署的页面出现错误，一个debug思路与工具](./17fd3736.html) |\n| 2    | 推送GitHub                 | [Hexo安装+个人网站建立+推送至GitHub](./4f595d21.html)        |\n| 3    | 源码备份                   | [GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？](./f338e400.html) |\n| 4    | 修改博客路径为`.github.io` | [GitHub的个人博客，blog，GitHub Pages如何修改地址，如何修改published site？](./b3031f8a.html) |\n| 5    | 检查图片路径               | [Hexo deploy部署后的页面图片引用路径如何检查？](./b9c842e3.html) |\n| 6    | 安装插件报错处理           | [Hexo安装插件遇上5 vulnerabilities (2 moderate, 2 high, 1 critical)类似的报错，让使用npm fund寻求更多细节，如何解决](./9762d0c6.html) |\n| 7    | 端口报错处理               | [Hexo生成时提示FATAL Permission denied. You can't use port 4000.解决办法](./9e13174d.html) |\n| 8    | 安装报错处理               | [安装Hexo，npm install -g hexo的npm ERR报错解决](./f63f7dc2.html) |\n| 9    | 443报错处理                | [Git-Bash，WSL2内GitHub无法访问、443 Operation timed out的解决办法](./7faf135d.html) |\n| 10   | npm无法运行                | [npm无法在PowerShell运行解决办法](./4add822c.html)           |\n|      |                            |                                                              |\n\n\n\n[Hexo部署的页面出现错误，一个debug思路与工具](./17fd3736.html)\n\n[Hexo安装+个人网站建立+推送至GitHub](./4f595d21.html)\n\n[GitHub+Hexo的个人博客，blog，GitHub Page如何实现一个分支作为博客源码，一个分支用于全部源码备份？](./f338e400.html)\n\n[GitHub的个人博客，blog，GitHub Pages如何修改地址，如何修改published site？](./b3031f8a.html)\n\n[Hexo deploy部署后的页面图片引用路径如何检查？](./b9c842e3.html)\n\n[Hexo安装插件遇上5 vulnerabilities (2 moderate, 2 high, 1 critical)类似的报错，让使用npm fund寻求更多细节，如何解决](./9762d0c6.html)\n\n[Hexo生成时提示FATAL Permission denied. You can't use port 4000.解决办法](./9e13174d.html)\n\n[安装Hexo，npm install -g hexo的npm ERR报错解决](./f63f7dc2.html)\n\n[Git-Bash，WSL2内GitHub无法访问、443 Operation timed out的解决办法](./7faf135d.html)\n\n[npm无法在PowerShell运行解决办法](./4add822c.html)\n\n# 首页\n* ![image-20220328222033259](Hexo-Chic-配置教程归纳/image-20220328222033259.png)\n\n\n\n| 序号 | 备注 | 链接                                                         |\n| ---- | ---- | ------------------------------------------------------------ |\n| 1    | ①    | [Hexo Chic模板添加搜索栏](./1650c0d7.html)                   |\n| 2    | ②    | ②样式引用参考[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html)<br>②部署见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html) |\n| 3    | ③    | [Hexo如何新建一个新的页面，page，栏目？](./6376ffa2.html)    |\n| 4    | ④    | [Hexo + Chic 去除首页的圆形头像logo](./ebea8ed0.html)        |\n| 5    | ⑤    | [Hexo + Chic 首页实现带文字的超链接](./fd9baec8.html)        |\n| 6    | ⑥    | [Hexo + Chic如何添在link处加新的icon（svg）图标](./9a3fd1d.html) |\n| 7    | ⑦    | ⑦见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)<br>若⑦涉及样式全局引用问题，见[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html) |\n| 8    | ⑧    | ⑧见[Hexo + Chic 增加站点浏览统计](./a976f1c7.html)<br>⑧数据未加载出来前样式见[Hexo + Chic busuanzi未显示阅读字数、时长等情况下的等待图标添加（旋转菊花等）](./785e20b9.html) |\n\n\n\n①见[Hexo Chic模板添加搜索栏](./1650c0d7.html)\n\n②样式引用参考[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html)\n②部署见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)\n\n③见[Hexo如何新建一个新的页面，page，栏目？](./6376ffa2.html)\n\n\n④见[Hexo + Chic 去除首页的圆形头像logo](./ebea8ed0.html)\n\n⑤见[Hexo + Chic 首页实现带文字的超链接](./fd9baec8.html)\n\n⑥见[Hexo + Chic如何添在link处加新的icon（svg）图标](./9a3fd1d.html)\n\n⑦部署见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)\n若⑦涉及样式全局引用问题，见[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html)\n\n⑧见[Hexo + Chic 增加站点浏览统计](./a976f1c7.html)\n⑧数据未加载出来前样式见[Hexo + Chic busuanzi未显示阅读字数、时长等情况下的等待图标添加（旋转菊花等）](./785e20b9.html)\n\n\n\n# 分栏-文章\n\n* ![image-20220328222041499](Hexo-Chic-配置教程归纳/image-20220328222041499.png)\n\n\n\n| 序号 | 备注 | 链接                                                         |\n| ---- | ---- | ------------------------------------------------------------ |\n| 1    | ①    | ①见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)<br>①无法正常显示见[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html) |\n| 2    | ②    | ②见[Hexo + Chic过长博文名如何实现省略，过长博文名，实现三个点省略方案](./321a7025.html) |\n|      |      |                                                              |\n\n\n\n①见[Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例](./32a77ca1.html)\n①无法正常显示见[Hexo + Chic，全局引用css样式，从标签、分类or打开文章第二面，icon无法正常显示解决办法](./c2a5d481.html)\n\n②见[Hexo + Chic过长博文名如何实现省略，过长博文名，实现三个点省略方案](./321a7025.html)\n\n\n\n# 特殊页面\n\n| 序号 | 备注       | 链接                                                         |\n| ---- | ---------- | ------------------------------------------------------------ |\n| 1    | CV简历页面 | 基础实现见[Hexo + Chic 在同一行实现左中右内容布局，Markdown（Typora）与Obsidian亦可参考](./46fb7fa8.html) |\n|      |            |                                                              |\n| 2    | 类别页面   | 类别页面过长博文名省略，见[Hexo + Chic 类别category页面过长博文名的三个点省略方案](./9ff0cec8.html) |\n|      |            |                                                              |\n\n\n\n## CV简历页面\n* 基础实现见[Hexo + Chic 在同一行实现左中右内容布局，Markdown（Typora）与Obsidian亦可参考](./46fb7fa8.html)\n\n\n## 类别\n\n\n\n* ![image-20220404134517607](Hexo-Chic-配置教程归纳/image-20220404134517607.png)\n\n\n\n* 类别页面过长博文名省略，见[Hexo + Chic 类别category页面过长博文名的三个点省略方案](./9ff0cec8.html)\n\n\n\n\n\n## 置顶\n\n| 序号 | 备注     | 链接                                                        |\n| ---- | -------- | ----------------------------------------------------------- |\n| 1    | 置顶页面 | [Hexo + Chic 实现文章置顶栏、文章置顶功能](./fee5a0e2.html) |\n|      |          |                                                             |\n\n[Hexo + Chic 实现文章置顶栏、文章置顶功能](./fee5a0e2.html)\n\n# 文章\n\n## 文章头\n* ![image-20220328222049474](Hexo-Chic-配置教程归纳/image-20220328222049474.png)\n\n\n\n| 序号 | 备注            | 链接                                                         |\n| ---- | --------------- | ------------------------------------------------------------ |\n| 1    | ①emoji          | ①见[Hexo + Chic 添加emoji支持，并使用emoji](./a150dc7d.html) |\n| 2    | ②字数、阅读时长 | ②见[Hexo + Chic 添加文章字数和阅读时长](./11459889.html)     |\n| 3    | ③浏览量         | ③见[Hexo + Chic 增加单篇文章浏览统计](./a976f1c7.html)       |\n|      |                 |                                                              |\n\n\n\n①见[Hexo + Chic 添加emoji支持，并使用emoji](./a150dc7d.html)\n\n②见[Hexo + Chic 添加文章字数和阅读时长](./11459889.html)\n\n③见[Hexo + Chic 增加单篇文章浏览统计](./a976f1c7.html)\n\n\n## 文章中\n\n* ![image-20220328222102979](Hexo-Chic-配置教程归纳/image-20220328222102979.png)\n\n\n\n| 序号 | 备注                  | 链接                                                         |\n| ---- | --------------------- | ------------------------------------------------------------ |\n| 1    | ①引用自己写的别的博文 | ①见[Hexo如何实现对博客内，同一个文件夹下其他文章的引用？](./9d63668d.html) |\n| 2    | ②mermaid              | ②见[Hexo + Chic + mermaid配置](./751fbb63.html)              |\n|      |                       |                                                              |\n\n\n\n①见[Hexo如何实现对博客内，同一个文件夹下其他文章的引用？](./9d63668d.html)\n\n②见[Hexo + Chic + mermaid配置](./751fbb63.html)\n\n\n\n## 数学公式\n\n![image-20220408191606900](Hexo-Chic-配置教程归纳/image-20220408191606900.png)\n\n\n| 序号 | 备注  | 链接                                                         |\n| ---- | ----- | ------------------------------------------------------------ |\n| 1    | LaTeX | 见[Hexo + Chic如何支持数学公式，特别是复杂LaTeX公式，公式会重复显示、LaTeX公式本地预览可以显示deploy上去无法显示解决办法](./3d095f62.html) |\n|      |       |                                                              |\n\n\n\n* 见[Hexo + Chic如何支持数学公式，特别是复杂LaTeX公式，公式会重复显示、LaTeX公式本地预览可以显示deploy上去无法显示解决办法](./3d095f62.html)\n\n\n\n## kbd样式\n* ![image-20220409200645814](Hexo-Chic-配置教程归纳/image-20220409200645814.png)\n  \n\n\n\n| 序号 | 备注    | 链接                                                         |\n| ---- | ------- | ------------------------------------------------------------ |\n| 1    | kbd样式 | 见[Hexo + Chic设置kbd样式，code、samp等样式亦可参考](./96b62d8a.html) |\n|      |         |                                                              |\n\n\n\n* 见[Hexo + Chic设置kbd样式，code、samp等样式亦可参考](./96b62d8a.html)\n\n\n\n## 表格及文章尾\n\n* ![image-20220328222113550](Hexo-Chic-配置教程归纳/image-20220328222113550.png)\n\n  \n\n\n\n| 序号 | 备注         | 链接                                                         |\n| ---- | ------------ | ------------------------------------------------------------ |\n| 1    | ①表格+代码块 | ①见[Hexo, Obsidian, Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？](./f5721cb9.html) |\n| 2    | ②表格+滚动条 | ②见[Hexo + Chic 过长的表格使用滚动条](./ea970ca1.html)       |\n| 3    | ③插图片      | ③见[Hexo + Chic + Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？](./d101e67c.html) |\n| 4    | ④修改Tags    | ④见[Hexo + Chic修改Tag(s)前面的井号](./ccd6f7fe.html)        |\n| 5    | ⑤打赏按钮    | ⑤见[Hexo + Chic实现打赏按钮，鼠标移动、浮过去会显示对应图片](./cb001f78.html) |\n| 6    | ⑥评论区      | ⑥见[Chic配置Gitalk，添加评论区](./b1784561.html)<br>⑥常见错误见[Hexo + Chic配置Gitalk显示error=redirect_uri_mismatch&，点击登录GitHub返回主页解决办法](./eab12f60.html) |\n\n\n\n* ①见[Hexo, Obsidian, Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？](./f5721cb9.html)\n* ②见[Hexo + Chic 过长的表格使用滚动条](./ea970ca1.html)\n* ③见[Hexo + Chic + Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？](./d101e67c.html)\n* ④见[Hexo + Chic修改Tag(s)前面的井号](./ccd6f7fe.html)\n* ⑤见[Hexo + Chic实现打赏按钮，鼠标移动、浮过去会显示对应图片](./cb001f78.html)\n* ⑥见[Chic配置Gitalk，添加评论区](./b1784561.html)\n  * ⑥常见错误见[Hexo + Chic配置Gitalk显示error=redirect_uri_mismatch&，点击登录GitHub返回主页解决办法](./eab12f60.html)\n\n\n\n# 功能\n## 搜索\n\n\n\n\n\n| 序号 | 备注 | 链接                                                         |\n| ---- | ---- | ------------------------------------------------------------ |\n| 1    | 搜索 | [Hexo + Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法](./264c6a00.html)<br>[Hexo + Chic 如何上交网站地图sitemap.xml给Google？如果显示无法获取Couldn't Fetch应该怎么办？](./67414c31.html) |\n|      |      |                                                              |\n\n\n\n* [Hexo + Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法](./264c6a00.html)\n* [Hexo + Chic 如何上交网站地图sitemap.xml给Google？如果显示无法获取Couldn't Fetch应该怎么办？](./67414c31.html)\n","tags":["Hexo","Chic","置顶"],"categories":["博客搭建","置顶"]},{"title":"Hexo + Chic 去除首页的圆形头像logo","url":"/article/ebea8ed0.html","content":"\n---\n\n**创建时间**：2022年3月28日17:46:33\n**最新更新**：2022年3月28日17:52:25\n\n\n---\n\n**核心思路**：注释掉首页对应的样式\n\n---\n\n# 配置\n\n* 用代码编辑器打开`themes\\Chic\\layout\\_page\\profile.ejs`，这个是首页的样式文件，注释掉以下代码\n```ejs\n<a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a>\n<a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a>\n```\n\n* 即\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```ejs\n<!-- 这个文件是首页 -->\n<!-- 再进行代码编写 -->\n<div class=\"container profile-container\">\n    <div class=\"intro\">\n        <div class=\"avatar\">\n            <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a>\n            <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a>\n        </div>\n        <div class=\"nickname\"><%- theme.nickname %></div>\n        <div class=\"description\"><%- markdown(theme.description) %></div>\n        <div class=\"links\">\n            <% if (theme.links !== undefined) { %>\n                <% for (var key in theme.links){ %>\n                    <a class=\"link-item\" title=\"<%- key %>\" href=\"<%= theme.links[key] %>\">\n                        <% if(theme.links_text_enable) { %>\n                            <%= key %>\n                        <%}%>\n                        <%if(theme.links_icon_enable){ %>\n                            <i class=\"iconfont icon-<%- key.toLowerCase() %>\"></i>\n                        <%}%>\n                    </a>\n                <% } %>\n            <% } %>\n        </div>\n    </div>\n</div>\n```\n</td>\n<td>\n```ejs\n<!-- 这个文件是首页 -->\n<!-- 先要引用这个icon库 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont2/iconfont.css\"> \n<!-- 再进行代码编写 -->\n<div class=\"container profile-container\">\n    <div class=\"intro\">\n        <!-- <div class=\"avatar\"> -->\n            <!-- <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a> -->\n            <!-- <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a> -->\n        <!-- </div> -->\n        <div class=\"nickname\"><%- theme.nickname %></div>\n        <div class=\"description\"><%- markdown(theme.description) %></div>\n        <div class=\"links\">\n            <% if (theme.links !== undefined) { %>\n                <% for (var key in theme.links){ %>\n                    <a class=\"link-item\" title=\"<%- key %>\" href=\"<%= theme.links[key] %>\">\n\n                        <% if(theme.links_text_enable) { %>\n                            <%= key %>\n                        <%}%>\n                        <%if(theme.links_icon_enable){ %>\n                            <i class=\"iconfont icon-<%- key.toLowerCase() %>\"></i>\n                        <%}%>\n                    </a>\n                <% } %>\n            <% } %>\n        </div>\n    </div>\n</div>\n\n```\n</td>\n</table>\n</div>\n```\n\n* 打开`Git-Bash`，输入`hexo clean`，`hexo g`，`hexo d`或`hexo clean`，`hexo s -g`就能看到对应效果，首页的原型头像Logo没了，如下图\n\n![image-20220330194056002](Hexo-Chic-去除首页的圆形头像logo/image-20220330194056002.png)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 如何上交网站地图sitemap.xml给Google？如果显示无法获取Couldn't Fetch应该怎么办？","url":"/article/67414c31.html","content":"\n---\n\n**创建时间**：2022年3月27日22:19:18\n**最新更新**：2022年3月28日17:09:59\n\n\n---\n\n**核心思路**：装生成sitemap的插件，谷歌站长控制台提交网站地图，再提示谷歌爬取\n\n---\n\n# 装插件\n\n* 装插件，在`Git-Bash`内进入Blog代码根目录，输入如下指令\n\n```bash\nnpm install hexo-generator-sitemap --save \nnpm install hexo-generator-baidu-sitemap --save\n```\n\n\n* 用代码编辑器打开Blog源码根目录下的配置文件`_config.yml`，在最下方添加如下代码\n\n```yml\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n* 在`Git-Bash`内通过`hexo clean`，`hexo g`部署后，在`public`文件夹下能看到这两个文件，就算是配置成功\n\n![image-20220330202126175](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202126175.png)\n\n\n# 推送至谷歌站长控制台\n* 打开[谷歌站长控制台](https://search.google.com/search-console)，点击`站点地图`→在Blog地址后输入`sitemap.xml`，下下图是一个示例→点击提交→过1、2天or1周左右，`状态`会显示`成功`\n\n![image-20220330202134454](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202134454.png)\n\n![image-20220330202142231](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202142231.png)\n\n\n# 状态出现无法获取、Cloudn't Fetch咋办？\n\n## 网址检查\n* 首先要确保提交的网址没有问题，可以通过`网址检查`→输入网址（sitemap的网址，比如`https://myoontyee.github.io/sitemap.xml`）→`测试实际网址`，如果没问题，那就走下面的办法，如果有问题..那就对应调整问题..看看不是大小写啊，`https`打成`http`，或者多打了一个斜杆`/`啥的\n\n![image-20220330202156089](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202156089.png)\n\n## 开始给谷歌邦邦两拳\n* 显示这个的原因，是因为目前谷歌的控制台，即便他正在爬取，也给你显示无法获取，所以你不晓得到底是正在爬取，还是网址出了别的啥问题\n* 几个方法，先查看一下自己源码目录下的`robot.txt`文件，调整好后，以防万一再通过第三方网站生成`sitemap.xml`，放在`public`文件夹下，然后提示谷歌抓紧爬取，具体方法如下\n\n### 检查robot.txt文件\n* 直接在Blog源码所在文件夹里搜索，挨个改\n\n![image-20220330202207917](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202207917.png)\n\n* `robot.txt`是用来定义爬取规则的，所以如果你`robot.txt`里头有以下内容，都要删掉，下面相当于告诉谷歌这些东西不准爬\n\n```txt\nUser-agent: Googlebot\nDisallow: /\n```\n\n```txt\nUser-agent: *\nDisallow: /\n```\n\n\n### 第三方网站生成sitemap.xml\n* 打开[xml-sitemaps](https://www.xml-sitemaps.com/)→输入网址，如下图，输的是Blog网址，如我的是`https://myoontyee.github.io`→点`START`\n\n![image-20220330202256213](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202256213.png)\n* 点`VIEW SITEMAP DETAILS`→点`DOWNLOAD YOUR XML SITEMAP FILE`下载到Blog源码根目录下的`public`文件夹内→在`Git-Bash`内`hexo d`部署到网站上→在[谷歌站长控制台](https://search.google.com/search-console)提交这个sitemap对应的网址试试，比如你下载的名字是`sitemap_gene.xml`，那么此时你提交给谷歌站长控制台的网站地图就`https://myoontyee.github.io/sitemap_gene.xml`，要把我的Blog地址改成你自己的\n\n![image-20220330202335225](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202335225.png)\n\n![image-20220330202343395](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202343395.png)\n\n### 提醒谷歌网站地图更新了，赶紧爬取一下哎\n\n* 在你的浏览器输入以下网址\n* `http://www.google.com/ping?sitemap=<完整的网站地图地址>`\n\t* 比如我的是`https://www.google.com/ping?sitemap=https://myoontyee.github.io/sitemap.xml`，记住修改成对应的sitemap地址\n\n\n\n# 结果\n* 我隔了2-3天才成功..\n\n\n![image-20220330202406086](Hexo-Chic-如何上交网站地图sitemap-xml给Google？如果显示无法获取Couldn-t-Fetch应该怎么办？/image-20220330202406086.png)\n\n# Ref\n* [10个让谷歌索引网站的方法（真实可行）](https://ahrefs.com/blog/zh/google-index/)\n* [hexo(3)-生成sitemap站点地图](https://www.jianshu.com/p/9c2d6db2f855)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 首页实现带文字的超链接","url":"/article/fd9baec8.html","content":"\n---\n\n**创建时间**：2022年3月26日22:55:19\n**最新更新**：2022年3月28日17:42:42\n\n\n---\n\n**核心思路**：HTML语法\n\n---\n\n# 配置文件直接写\n* 用代码编辑器打开`themes\\Chic\\_config.yml`，使用`<a href=\"\">文字</a>`的语法结构添加超链接，如`<a href=\"categories/函数/\">函数</a>`\n* 打开`Git-Bash`，进入Blog源码所在目录，`hexo clean`，`hexo g`，`hexo d`部署源码，也可以通过`hexo clean`，`hexo s -g`在本地预览\n* 效果如下图，变为可点击的超链接\n\n![image-20220330194738418](Hexo-Chic-首页实现带文字的超链接/image-20220330194738418.png)\n\n\n# Ref\n* [SVG添加链接](https://blog.csdn.net/fengda2870/article/details/78109610)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Python pandas numpy 实现n-sigma滤波，n-sigma滤波与groupby联合使用返回Dataframe","url":"/article/ccd63a75.html","content":"\n---\n\n**创建时间**：2022年3月24日15:16:08\n**最新更新**：2022年3月26日14:23:02\n\n\n---\n\n**核心思路**：符合条件返回索引，取符合条件的索引\n\n---\n\n# 引入所需库\n```Python\nimport pandas as pd\nimport numpy as np\nimport math\n```\n\n# 函数块\n```Python\ndef n_sigma(data,n):\n    '''\n    进行3sigma剔除\n    :param data:传入的数据\n    :return:剔除之后的数据，或者剔除异常值之后的行索引名称\n    '''\n    #均值-标准差\n    #如果结果在（u-3sigma，u+3sigma）之间则认为是正确数据。\n    if math.isnan(data.std()):\n        bool_num = ((data.mean()-n*0) <= data) & ((data.mean()+n*0) >= data)\n    else:\n        bool_num = ((data.mean()-n*data.std()) <= data) & ((data.mean()+n*data.std()) >= data)\n\n    #按布尔类型返回正确的数据\n    return bool_num\n    # return data.loc[bool_num,:]\n```\n\n\n# 使用\n* 读数据\n```Python\ndf = pd.read_csv('./test.csv')\n```\n\n## 独立使用\n* 针对整体DataFrame的某一列数值（列名是下面代码的`colName`，对应替换即可），进行使用\n```Python\n# 3sigma滤波\ndf_3sigma = df.loc[n_sigma(df.loc[:,'colName'], n = 3),:]\n```\n\n# 与groupby结合使用\n* 与`groupby`结合使用，即先分组，再对每组的特定列进行n-sigma滤波，最后返回一个DataFrame（返回的不是group结果，是一个Dataframe）\n\t* `groupbyName`修改为`groupby`所针对的列的列名\n\t* `colName`修改为进行3sigma滤波的列的列名\n```Python\ndf = df.groupby('groupbyName').apply(lambda x:x.loc[n_sigma(x.loc[:,'colName'], n = 3)]) # 3sigma滤波\ndf = df.reset_index(drop=True)\ndf.index.name = None\n```\n\n\n# 完整代码\n```Python\n# 导入库\nimport pandas as pd\nimport numpy as np\nimport math\n\n# 函数定义\ndef n_sigma(data,n):\n    '''\n    进行3sigma剔除\n    :param data:传入的数据\n    :return:剔除之后的数据，或者剔除异常值之后的行索引名称\n    '''\n    #均值-标准差\n    #如果结果在（u-3sigma，u+3sigma）之间则认为是正确数据。\n    if math.isnan(df['b'].std()):\n        bool_num = ((data.mean()-n*0) <= data) & ((data.mean()+n*0) >= data)\n    else:\n        bool_num = ((data.mean()-n*data.std()) <= data) & ((data.mean()+n*data.std()) >= data)\n        # print(\"(data.mean()-n*data.std())\",(data.mean()-n*data.std()))\n        # print(\"(data.mean()-n*data.std())\",(data.mean()+n*data.std()))\n\n    #按布尔类型返回正确的数据\n    return bool_num\n    # return data.loc[bool_num,:]\n\n\n# 读数据\ndf = pd.read_csv('./test.csv')\n\n# 使用\ndf_3sigma = df.loc[n_sigma(df.loc[:,'colName'], n = 3),:]\n\n\ndf = df.groupby('groupbyName').apply(lambda x:x.loc[n_sigma(x.loc[:,'colName'], n = 3)]) # 3sigma滤波\ndf = df.reset_index(drop=True)\ndf.index.name = None\n```\n\n\n# Ref\n* [用3-sigma原则处理DataFrame中的异常值](https://blog.csdn.net/baidu_38963740/article/details/117547331)\n","tags":["Python","numpy","pandas"],"categories":["函数"]},{"title":"Python DataFrame转为矩阵，DataFrame中包含行列等坐标信息和值信息，如何转换为numpy矩阵？（为OpenCV使用提供方便）","url":"/article/bbfbe18f.html","content":"\n---\n\n**创建时间**：2022年3月23日16:05:04\n**最新更新**：2022年3月30日20:30:09\n\n\n---\n\n**核心思路**：\n* 针对的情况是坐标是整数的情况\n* 三个方法\n  * 法1：for循环嵌套，按对应索引输入元素\n  * 法2：`pivot`+`fillna`+`reindex`+`values`\n  * 法3：`set_index`+`unstack`\n* 注意法1需要矩阵`Mat`初始化，法2、法3不用\n\n---\n\n**输入**：DataFrame\n**输出**：Matrix（np.array）\n\n---\n\n# 通用\n\n* 导入库\n\n```Python\n# 基础库\nimport pandas as pd\nimport numpy as np\n\n# 进度条\nfrom tqdm import tqdm_notebook\n\n# warnings设置\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n\n* 读一个测试用数据\n\n```Python\ndf = pd.read_excel('./meshgridTest.xlsx')\n```\n* 测试用的数据长这样，`row`代表行索引，`col`代表列索引，`value`代表对应索引要填入的元素值\n\t* 注意`Python`的索引是从0开始\n```bash\n\trow\tcol\tvalue\n0\t1\t1\t2\n1\t2\t1\t3\n2\t3\t2\t1\n```\n\n# 法1\n## 具体使用\n* 注意法1需要矩阵`Mat`初始化，法2、法3不用\n* 生成矩阵，并显示进度条\n\n```Python\nrows = df['row'].max()+1\ncols = df['col'].max()+1\n\nMat = np.zeros((rows,cols),np.uint8)\n\n\nfor row in tqdm_notebook(range(rows)):\n    for col in range(0, cols):\n        value = df[(df['row'] == row) & (df['col'] == col)]['value'].values\n\n        if value:\n            Mat[row, col] = value\n        else:\n            pass\n```\n\n```Bash\narray([[0, 0, 0],\n       [0, 2, 0],\n       [0, 3, 0],\n       [0, 0, 1]], dtype=uint8)\n```\n\n## 完整代码块\n```Python\n# 基础库\nimport pandas as pd\nimport numpy as np\n\n# 进度条\nfrom tqdm import tqdm_notebook\n\n# warnings设置\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ====================================================\n# 数据集在这改\n# ====================================================\n# 读数据集\ndf = pd.read_excel('./meshgridTest.xlsx')\n# ====================================================\n\n# 功能块\nrows = df['row'].max()+1\ncols = df['col'].max()+1\n\nMat = np.zeros((rows,cols),np.uint8)\n\n# 运行\nfor row in tqdm_notebook(range(rows)):\n    for col in range(0, cols):\n        value = df[(df['row'] == row) & (df['col'] == col)]['value'].values\n\n        if value:\n            Mat[row, col] = value\n        else:\n            pass\t\n```\n\n* 输出\n```Bash\narray([[0, 0, 0],\n       [0, 2, 0],\n       [0, 3, 0],\n       [0, 0, 1]], dtype=uint8)\n```\n\n# 法2\n* 注意法1需要矩阵`Mat`初始化，法2、法3不用\n* `pivot`+`fillna`+`reindex`+`values`\n\n## 具体使用\n\n```Python\nrows = np.arange(df.row.max()+1)\ncols = np.arange(df.col.max()+1)\n\nMat = df.pivot('row', 'col', 'value').fillna(0).reindex(index=rows, columns=cols, fill_value=0).values\nprint(Mat)\n```\n```Bash\n[[0. 0. 0.]\n [0. 2. 0.]\n [0. 3. 0.]\n [0. 0. 1.]]\n```\n\n## 完整代码块\n```Python\n# 基础库\nimport pandas as pd\nimport numpy as np\n\n# 进度条\nfrom tqdm import tqdm_notebook\n\n# warnings设置\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ====================================================\n# 数据集在这改\n# ====================================================\n# 读数据集\ndf = pd.read_excel('./meshgridTest.xlsx')\n# ====================================================\n\n# 功能块\nrows = np.arange(df.row.max()+1)\ncols = np.arange(df.col.max()+1)\n\nMat = df.pivot('row', 'col', 'value').fillna(0).reindex(index=rows, columns=cols, fill_value=0).values\n\n# 打印\nprint(Mat)\n```\n\n* 输出\n```Bash\n[[0. 0. 0.]\n [0. 2. 0.]\n [0. 3. 0.]\n [0. 0. 1.]]\n```\n\n# 法3\n* 注意法1需要矩阵`Mat`初始化，法2、法3不用\n* `set_index`+`unstack`\n\n## 具体使用\n\n```Python\nrows = np.arange(df.row.max()+1)\ncols = np.arange(df.col.max()+1)\n\nMat = df.set_index(['row', 'col'])['value'].unstack(fill_value=0).reindex(index=rows, columns=cols, fill_value=0).values\nprint(Mat)\n```\n```Bash\narray([[0, 0, 0],\n       [0, 2, 0],\n       [0, 3, 0],\n       [0, 0, 1]])\n```\n\n## 完整代码块\n```Python\n# 基础库\nimport pandas as pd\nimport numpy as np\n\n# 进度条\nfrom tqdm import tqdm_notebook\n\n# warnings设置\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ====================================================\n# 数据集在这改\n# ====================================================\n# 读数据集\ndf = pd.read_excel('./meshgridTest.xlsx')\n# ====================================================\n\n# 功能块\nrows = np.arange(df.row.max()+1)\ncols = np.arange(df.col.max()+1)\n\nMat = df.set_index(['row', 'col'])['value'].unstack(fill_value=0).reindex(index=rows, columns=cols, fill_value=0).values\n\n# 打印\nprint(Mat)\n```\n\n* 输出\n\n```Bash\narray([[0, 0, 0],\n       [0, 2, 0],\n       [0, 3, 0],\n       [0, 0, 1]])\n```\n\n# Ref\n* [How do I put values od dataframe column in 2d matrix?](https://stackoverflow.com/questions/45646966/how-do-i-put-values-od-dataframe-column-in-2d-matrix)\n","tags":["Python","numpy","pandas","Matrix"],"categories":["函数"]},{"title":"Hexo + Chic + mermaid配置","url":"/article/751fbb63.html","content":"\n---\n\n**创建时间**：2022年3月23日11:14:10\n**最新更新**：2022年3月28日17:42:48\n\n\n---\n\n**核心思路**：下插件，做配置\n\n---\n\n# 下插件\n* 用`Git-Bash`打开Blog源码所在文件夹，输入以下代码安装插件\n```bash\nnpm install hexo-filter-mermaid-diagrams --save\n```\n\n\n# 配置\n* 用代码编辑器打开`themes\\Chic\\_config.yml`，在最下方添加如下代码\n\t* `version`对应的版本可以去[mermaid官网](https://github.com/mermaid-js/mermaid)找，看看旁边Releases啥版本了\n\n```yml\nmermaid:\n  version: 8.14.0 \n  enable: true # 默认为 True\n  # Available themes: default | dark | forest | neutral\n  # theme: forest\n```\n\n![image-20220330200431863](Hexo-Chic-mermaid配置/image-20220330200431863.png)\n\n* 添加`mermaid`支持，用代码编辑器打开`themes\\Chic\\layout\\_partial\\footer.ejs`，在对应位置添加如下代码，你想要的`mermaid`的`theme`，通过替换`theme`后的`neural`修改，支持的主题有`default | dark | forest | neutral`\n\n```ejs\n<% if (theme.mermaid.enable) { %>\n\t<script src='https://unpkg.com/mermaid@<%= theme.mermaid.version %>/dist/mermaid.min.js'></script>\n\t<script>\n\t  if (window.mermaid) {\n\t\tmermaid.initialize({\n\t\t\t\t\t\tstartOnLoad: true,\n\t\t\t\t\t\ttheme: 'neural',\n\t\t\t\t\t\t\t });\n\t  }\n\t</script>\n<% } %>\n```\n\n* 即\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```ejs\n<footer id=\"footer\" class=\"footer\">\n    <div class=\"copyright\">\n        <!-- <span>© <%= config.author %> | Powered by <a href=\"https://hexo.io\" target=\"_blank\">Hexo</a> & <a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\">Chic</a> -->\n            <span>© <%= config.author %>  \n            <!-- 访客数量 -->\n            <!-- <div> -->\n            <% if (theme.visit_counter) { %>\n                <%- partial(\"../_plugins/site-visitor\") %>\n            <% } %>\n            <!-- </div> -->\n        </span>\n    </div>\n</footer>\n```\n</td>\n<td>\n```ejs\n<footer id=\"footer\" class=\"footer\">\n    <div class=\"copyright\">\n        <!-- 2022年3月23日 添加mermaid支持 -->\n        <% if (theme.mermaid.enable) { %>\n            <script src='https://unpkg.com/mermaid@<%= theme.mermaid.version %>/dist/mermaid.min.js'></script>\n            <script>\n              if (window.mermaid) {\n                mermaid.initialize({\n                                startOnLoad: true,\n                                theme: 'neural',\n                                     });\n              }\n            </script>\n        <% } %>\n        <!-- <span>© <%= config.author %> | Powered by <a href=\"https://hexo.io\" target=\"_blank\">Hexo</a> & <a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\">Chic</a> -->\n            <span>© <%= config.author %>  \n            <!-- 访客数量 -->\n            <!-- <div> -->\n            <% if (theme.visit_counter) { %>\n                <%- partial(\"../_plugins/site-visitor\") %>\n            <% } %>\n            <!-- </div> -->\n        </span>\n    </div>\n</footer>\n```\n</td>\n</table>\n</div>\n\n* 打开`Git-Bash`，通过`hexo clean`，`hexo g`，`hexo d`上传部署Blog代码\n\t\t\t\n# 效果\n![image-20220330200443359](Hexo-Chic-mermaid配置/image-20220330200443359.png)\n\t\t\t\n# Ref\n* [Hexo中增加对mermaid支持](http://computetechnologydaily.com:5000/2021/02/24/020894327eb14852b5ff98dc468835d8/)\n* [About Mermaid](https://mermaid-js.github.io/mermaid/#/?id=about-mermaid)\n* [Hexo中插入mermaid diagrams](https://blog.csdn.net/Olivia_Vang/article/details/92987859)\n* [Hexo中插入mermaid diagrams](https://clarkchen.com/Hexo/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5mermaid-diagrams/)\n* [hexo-filter-mermaid-diagrams](https://github.com/webappdevelp/hexo-filter-mermaid-diagrams)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Python如何基于uproot库读取.root文件，如何查看其内部数据，如何将其转化为DataFrame","url":"/article/b20a8a22.html","content":"\n---\n\n**创建时间**：2022年3月23日10:09:53\n**最新更新**：2022年3月23日10:28:35\n\n\n---\n\n**核心思路**：`uproot`和`uproot3`是两个库，`uproot`库好用点，用`uproot`库读一下数据，转换成`DataFrame`\n\n---\n\n# 导入库\n```Python\nimport uproot\nimport numpy as np\nimport pandas as pd\n```\n\n# 读取.root文件\n```Python\nfile = uproot.open('./test.root')\n```\n\n# 查看索引\n* 查看索引与你设计的数据存储形式有关\n* 假设的文件结构如下\n\n```mermaid\ngraph TD\nA[\"test.root\"]\nB1[\"B1\"]\nB2[B2]\nB3[B3]\nB4[B4]\nB5[B5]\nC1[C1]\nC2[C2]\nD1[D1]\nD2[D2]\nA-->B1\nA-->B2\nA-->B3\nA-->B4\nA-->B5\nB1-->C1\nC1-->D1\nB1-->C2\nC1-->D2\n```\n\n\n\n\n\n## 查看根级索引\n* 查看根层级下的索引\n```Python\nfile.keys()\n```\n* 示例的返回\n```bash\n['B1;1',\n 'B2;1',\n 'B3;1',\n 'B4;1',\n 'B5;1',]\n```\n\n\n## 查看子级索引\n* 类似`pandas`的用法\n```Python\nfile['B1;1'].keys()\n```\n* 示例的返回\n```bash\n['C1;1',\n 'C2;1',]\n```\n\n* 更下一级的查看，可以使用以下形式\n\n```Python\nfile['B1;1']['C1;1']\n```\n* 示例的返回\n```bash\n['D1;1',\n 'D2;1',]\n```\n\n# 查看对应目录下的数据\n* 两种方法\n\n\n## 法1\n```Python\nfile['B2;1'].arrays()\n```\n* 示例的返回\n\n```Bash\n<Array [{Energy: 10}] type='1 * {\"Energy\": float64}'>\n```\n\n## 法2\n```Python\nfile['B2;1'].array()\n```\n\n* 示例的返回\n```Bash\n<Array [10] type='1 * float64'>\n```\n\n\n# 批量转换为DataFrame格式\n* 下述代码将根层级下的`B2`，`B3`，`B4`，`B5`批量导出转换为`DataFrame`形式\n```Python\ndf = pd.DataFrame(file.arrays(   \n        ['B2;1',\n         'B3;1',\n         'B4;1',\n         'B5;1',],\n      \t\tlibrary=\"pd\"))\n```\n\n* 下述代码将`B1`子层级下的`C1`，`C2`批量导出转换为`DataFrame`格式\n```Python\ndf = pd.DataFrame(file['B1;1'].arrays(   \n        ['C1;1',\n         'C2;1',],\n      \t\tlibrary=\"pd\"))\n```\n\n\n\n# 整体代码\n```Python\nimport uproot\nimport numpy as np\nimport pandas as pd\n\nfile.keys()\n\ndf = pd.DataFrame()\ndf = pd.DataFrame(file.arrays(   \n        ['B2;1',\n         'B3;1',\n         'B4;1',\n         'B5;1',],\n      \t\tlibrary=\"pd\"))\n\ndf.to_csv('./test.csv')\n```\n\n\n\n# Ref\n\n* [uproot document](https://uproot.readthedocs.io/en/latest/basic.html)\n","tags":["CERN ROOT","Geant4","B5","Python","uproot"],"categories":["Geant4"]},{"title":"WSL如何开启与关闭？","url":"/article/ad32aed1.html","content":"\n---\n\n**创建时间**：2022年3月23日10:06:51\n**最新更新**：2022年3月23日10:07:24\n\n\n---\n\n**核心思路**：WSL基于`LxssManager`服务进行，因此开关该服务即可\n\n---\n\n* 关闭与启动WSL，都需要以管理员模式打开`Windows Powershell`，WSL基于`LxssManager`服务进行，因此开关该服务即可\n  * 输入`net stop LxssManager`，停止`LxssManager`服务，从而停止WSL\n  * 输入`net start LxssManager`，开启`LxssManager`服务，从而启动WSL\n\n\n![image-20220323100819230](WSL如何开启与关闭？/image-20220323100819230.png)\n","tags":["WSL"],"categories":["WSL"]},{"title":"Hexo + Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例","url":"/article/32a77ca1.html","content":"\n---\n\n**创建时间**：2022年3月20日23:42:21\n**最新更新**：2022年3月28日22:12:55\n\n\n---\n\n**核心思路**：下`icon`，全局调样式\n\n---\n\n* 参考[Hexo + Chic如何添在link处加新的icon（svg）图标](./9a3fd1d.html)，完成下述步骤\n\t* 挑icon，下载并放到对应文件夹\n\t* 看iconfont代码，挑选需要的icon\n\n\n# icon配置\n\n* 用代码编辑器（如`Visual Studio Code`）打开`themes\\Chic\\_config.yml`，添加对应的样式文件如`../fonts/iconfont3/iconfont.css`\n\n```yml\nstylesheets:\n  - /css/style.css\n  - ../fonts/iconfont2/iconfont.css\n  - ../fonts/iconfont3/iconfont.css\n  - //cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css # 访客量的旋转等待logo\n```\n\n# 首页布局\n* 用代码编辑器打开`themes\\Chic\\layout\\_page\\profile.ejs`，添加以下样式\n\n```ejs\n<div class=\"friends_link\">\n<a href=\"https://www.github.com/\"><i class=\"iconfont icon-youlian\"></i></a>\n</div>\n```\n\n* `themes\\Chic\\layout\\_page\\profile.ejs`修改前后对比见下\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```ejs\n<!-- 这个文件是首页 -->\n<!-- 先要引用这个icon库 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont2/iconfont.css\"> \n<!-- 再进行代码编写 -->\n<div class=\"container profile-container\">\n    <div class=\"intro\">\n        <!-- <div class=\"avatar\"> -->\n            <!-- <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a> -->\n            <!-- <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a> -->\n        <!-- </div> -->\n        <div class=\"nickname\"><%- theme.nickname %></div>\n        <div class=\"description\"><%- markdown(theme.description) %></div>\n        <div class=\"links\">\n            <% if (theme.links !== undefined) { %>\n                <% for (var key in theme.links){ %>\n                    <a class=\"link-item\" title=\"<%- key %>\" href=\"<%= theme.links[key] %>\">\n                        <% if(theme.links_text_enable) { %>\n                            <%= key %>\n                        <%}%>\n                        <%if(theme.links_icon_enable){ %>\n                            <i class=\"iconfont icon-<%- key.toLowerCase() %>\"></i>\n                        <%}%>\n                    </a>\n                <% } %>\n            <% } %>\n        </div>\n    </div>\n</div>\n```\n</td>\n<td>\n```ejs\n<!-- 这个文件是首页 -->\n<!-- 先要引用这个icon库 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont2/iconfont.css\"> \n<!-- 再进行代码编写 -->\n<div class=\"container profile-container\">\n    <div class=\"intro\">\n        <!-- <div class=\"avatar\"> -->\n            <!-- <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a> -->\n            <!-- <a href=\"<%- url_for(theme.nav.Posts) %>\"><img src=\"<%- url_for(theme.avatar) %>\"></a> -->\n        <!-- </div> -->\n        <div class=\"nickname\"><%- theme.nickname %></div>\n        <div class=\"description\"><%- markdown(theme.description) %></div>\n        <div class=\"links\">\n            <% if (theme.links !== undefined) { %>\n                <% for (var key in theme.links){ %>\n                    <a class=\"link-item\" title=\"<%- key %>\" href=\"<%= theme.links[key] %>\">\n                        <% if(theme.links_text_enable) { %>\n                            <%= key %>\n                        <%}%>\n                        <%if(theme.links_icon_enable){ %>\n                            <i class=\"iconfont icon-<%- key.toLowerCase() %>\"></i>\n                        <%}%>\n                    </a>\n                <% } %>\n            <% } %>\n        </div>\n\n        <div class=\"friends_link\">\n            <!-- 友链: -->\n        <a href=\"https://www.github.com/\"><i class=\"iconfont icon-youlian\"></i></a>\n        </div>\n    </div>\n</div>\n\n```\n</td>\n</table>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n# 定义样式\n* 用代码编辑器打开`themes\\Chic\\source\\css\\_page\\profile.styl`，添加`friends_link`样式如下（可以直接复制`links`的样式）\n\t\t\t\t\t\t\n```styl\n.friends_link\n  a\n    padding: 0 5px\n    &:hover\n      background-color: transparent\n  .iconfont\n    font-size: 2em\t\t\t\t\n```\n\n* `themes\\Chic\\source\\css\\_page\\profile.styl`修改前后对比见下\n\t\t\t\t\t\t\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```ejs\n/** Profile **/\n.profile-container\n  justify-content center\n  align-items center\n.intro\n  text-align center\n  .avatar\n    padding 10px\n    img\n      width 128px\n      height auto\n      display inline-block\n      -webkit-border-radius 100%\n      border-radius 100%\n      -webkit-box-shadow 0 0 0 0.3618em rgba(0, 0, 0, 0.05)\n      box-shadow 0 0 0 0.3618em rgba(0, 0, 0, 0.05)\n      margin 0 auto\n      -webkit-transition all ease 0.4s\n      -moz-transition all ease 0.4s\n      -o-transition all ease 0.4s\n      transition all ease 0.4s\n      cursor pointer\n      &:hover\n        position relative\n        -webkit-transform translateY(-0.75em)\n        -moz-transform translateY(-0.75em)\n        -ms-transform translateY(-0.75em)\n        -o-transform translateY(-0.75em)\n        transform translateY(-0.75em)\n        cursor pointer\n.nickname\n  font-size 2em\n  font-weight normal\n.links\n  a\n    padding: 0 5px\n    &:hover\n      background-color: transparent\n  .iconfont\n    font-size: 2em\n```\n</td>\n<td>\n```ejs\n/** Profile **/\n.profile-container\n  justify-content center\n  align-items center\n.intro\n  text-align center\n  .avatar\n    padding 10px\n    img\n      width 128px\n      height auto\n      display inline-block\n      -webkit-border-radius 100%\n      border-radius 100%\n      -webkit-box-shadow 0 0 0 0.3618em rgba(0, 0, 0, 0.05)\n      box-shadow 0 0 0 0.3618em rgba(0, 0, 0, 0.05)\n      margin 0 auto\n      -webkit-transition all ease 0.4s\n      -moz-transition all ease 0.4s\n      -o-transition all ease 0.4s\n      transition all ease 0.4s\n      cursor pointer\n      &:hover\n        position relative\n        -webkit-transform translateY(-0.75em)\n        -moz-transform translateY(-0.75em)\n        -ms-transform translateY(-0.75em)\n        -o-transform translateY(-0.75em)\n        transform translateY(-0.75em)\n        cursor pointer\n.nickname\n  font-size 2em\n  font-weight normal\n.links\n  a\n    padding: 0 5px\n    &:hover\n      background-color: transparent\n  .iconfont\n    font-size: 2em\n.friends_link\n  a\n    padding: 0 5px\n    &:hover\n      background-color: transparent\n  .iconfont\n    font-size: 2em\n```\n</td>\n</table>\n</div>\n\n# 部署，预览\n* 效果如下，蓝色是鼠标移动上去的效果\n\n![image-20220328221140288](Hexo-Chic如何在任意位置添加新的icon（svg）图标——以首页添加友链及其logo为例/image-20220328221140288.png)\n","tags":["Hexo","Chic","icon"],"categories":["博客搭建"]},{"title":"Hexo + Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法","url":"/article/264c6a00.html","content":"\n---\n\n**创建时间**：2022年3月20日23:41:34\n**最新更新**：2022年3月27日22:09:51\n\n\n---\n\n**核心思路**：谷歌站长控制台，使用`HTML标记`验证所有权，避免每次`hexo clean`删掉`HTML文件`\n\n---\n\n# 网址验证所有权\n* 打开[谷歌站长控制台](https://search.google.com/search-console)，点击`搜索资源`→`添加资源`→在`网址前缀`输入你的Blog地址，如`https://myoontyee.github.io/`→点击继续\n\n![image-20220330201838701](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201838701.png)\n![image-20220330201847700](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201847700.png)\n\n* 验证方式选择`HTML标记`→`复制`→用代码编辑器（如`Visual Studio Code`打开`themes\\Chic\\layout\\_partial\\head.ejs`），在`<meta charset=\"UTF-8\">`下面一行粘贴这个`HTML标记`的代码\n\n![image-20220330201858790](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201858790.png)\n\n* 打开`Git-Bash`，进入Blog源码根目录，输入`hexo clean`，回车，输入`hexo g`回车，输入`hexo d`\n\n![image-20220330201915791](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201915791.png)\n* 待博客部署成功后，回到以下页面，点击`验证`，成功后如下下图\n\n![image-20220330201926727](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201926727.png)\n![image-20220330201934764](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201934764.png)\n\n* 点击`网址检查`→输入Blog网址，如`https://myoontyee.github.io/`，注意是`https`还是`http`，要填写正确，下图里头`http`就是错误的\n\n![image-20220330201943143](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201943143.png)\n* 点击`请求编入索引`，然后等待即可\n\n![image-20220330201949893](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201949893.png)\n\n* 我是等到第二天，在谷歌搜`site:https://myoontyee.github.io/`就能搜到自己的Blog了\n\n![image-20220330201957022](Hexo-Chic如何部署到搜索引擎如Google上使得其能被搜索到？提交到谷歌搜索（谷歌收录）解决办法/image-20220330201957022.png)\n\n---\n\n# Ref\n* [提交到谷歌搜索（谷歌收录）](https://www.hansion.win/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic 过长的表格使用滚动条","url":"/article/ea970ca1.html","content":"\n---\n\n**创建时间**：2022年3月20日17:44:45\n**最新更新**：2022年3月20日20:50:14\n\n\n---\n\n**核心思路**：调用`HTML`的`<div><table>`样式\n\n---\n\n\n* 表格前改为`<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">`，表格后添加`</table></div>`\n\n如\n\n```html\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\nimport pandas as pd\ndf = pd.read_csv(\"这是一个测试的很长很长很长很长很长很长很长很长很长的文件名.csv\")\n</td>\n<td>\nimport pandas as pd\ndf = pd.read_csv(\"这是一个测试的很长很长很长很长很长很长很长很长很长的文件名.csv\")\n</td>\n</table>\n</div>\n```\n\n# 效果       \n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td>\n```Python\nimport pandas as pd\ndf = pd.read_csv(\"这是一个测试的很长很长很长很长很长很长很长很长很长的文件名.csv\")\n```\n</td>\n<td>\n```Python\nimport pandas as pd\ndf = pd.read_csv(\"这是一个测试的很长很长很长很长很长很长很长很长很长的文件名.csv\")\n```\n</td>\n</table>\n</div>\n\n\n![image-20220320180454281](Hexo-Chic-过长的表格使用滚动条/image-20220320180454281.png)\n\n# Ref\n* [当table列宽过长时设置滚动条](https://blog.csdn.net/weixin_41634885/article/details/102891402)\n","tags":["Hexo","Chic","表格"],"categories":["博客搭建"]},{"title":"Hexo + Chic busuanzi未显示阅读字数、时长等情况下的等待图标添加（旋转菊花等）","url":"/article/785e20b9.html","content":"\n---\n\n**创建时间**：2022年3月19日15:21:42\n**最新更新**：2022年3月27日21:20:33\n\n\n---\n\n**核心思路**：引入**font-awesome**字体，调用`fa-spinner`旋转小菊花\n\n---\n\n# 引用样式\n* 用代码编辑器（如`Visual Studio Code`）打开`themes\\Chic\\_config.yml`，将等待logo的样式进行全局引用\n\n```yml\n# stylesheets loaded in the <head>\nstylesheets:\n  - /css/style.css\n  - //cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css # 访客量的旋转等待logo\n```\n\n# 调整样式\n* 用代码编辑器打开`themes\\Chic\\layout\\_plugins\\site-visitor.ejs`，按如下内容调整样式\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n    <tr>\n        <td><div align = center>修改前</center></td>\n        <td><div align = center>修改后</center></td>\n    </tr>\n    <tr>\n        <td>\n```C++\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<% if (theme.visit_counter.site_uv) { %>\n<span class=\"site-uv\">\n    | 总访客量:\n    <i class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></i>\n</span>&nbsp;\n<% } %>\n<% if (theme.visit_counter.site_pv) { %>\n<span class=\"site-pv\">\n    | 总访问量:\n    <i class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></i>\n</span>\n<% } %>\n```\n</td>\n<td>\n```C++\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<% if (theme.visit_counter.site_uv) { %>\n<span class=\"site-uv\">\n    | 总访客量:\n    <i class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"><i class=\"fa fa-spinner fa-spin\"></i></i>\n</span>&nbsp;\n<% } %>\n<% if (theme.visit_counter.site_pv) { %>\n<span class=\"site-pv\">\n    | 总访问量:\n    <i class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"><i class=\"fa fa-spinner fa-spin\"></i></i>\n</span>\n<% } %>\n```\n</td>\n</tr>\n</table>\n</div>\n​\t\n\n# 最终样式\n* 如下图\n\n![image-20220327213431115](Hexo-Chic-busuanzi未显示阅读字数、时长等情况下的等待图标添加（旋转菊花等）/image-20220327213431115.png)\n\n\n\n# Ref\n* [不蒜子](http://ibruce.info/2015/04/04/busuanzi/)\n","tags":["Hexo","Chic","busuanzi"],"categories":["博客搭建"]},{"title":"Hexo, Obsidian, Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？","url":"/article/f5721cb9.html","content":"\n---\n\n**创建时间**：2022年3月19日12:10:56\n**最新更新**：2022年3月20日17:32:35\n\n\n---\n\n**核心思路**：\n* 法1，基于`|`，使用`<pre>`与`<code>`\n\t* 用`HTML`的`<pre>`样式，表头居中用`HTML`的`<center>`样式\n\t* 再通过[tablesgenerator在线网站](https://www.tablesgenerator.com/markdown_tables)生成markdown样式\n\t\n* 法2，基于`<table>`，使用三个点语法\n\t* 使用`HTML`的`<table>`样式\n\t* 通过[HTML 表格 转换为 HTML 表格](https://tableconvert.com/zh-CN/HTML-to-HTML)生成`HTML`样式\n* 法3，基于`<table>`，使用`<pre>`与`<code>`\n\t* 使用`HTML`的`<table>`样式\n\t* 通过[HTML 表格 转换为 HTML 表格](https://tableconvert.com/zh-CN/HTML-to-HTML)生成`HTML`样式\n* 推送到blog过长的表格若需要滚动条见[Hexo + Chic 过长的表格使用滚动条](./ea970ca1.html)\n\n---\n\n**方法特点**：\n* 法1属于便捷方法，Obsidian、Typora与Hexo都可以顺利显示代码块，但无法显示代码行号\n* 法2在Hexo可以顺利显示代码块与行号，在Obsidian、Typora内需去除所有空行回车才能显示代码块，但无法显示代码行号\n* 法3在Hexo未测试过，在Obsidian内可以显示代码块与行号\n\n---\n\n# 法1\n## 生成表格\n* 在[tablesgenerator在线网站](https://www.tablesgenerator.com/markdown_tables)按照要求绘制表格，如下图，勾选`Line breaks as <br>`\n\t* 表头居中用`HTML`的`<center>`样式，如`<div align = center>修改前</center>`\n\t* 代码写法，表格内显示代码用`HTML`的`<pre>`与`<code>`样式，如`<pre><code>coding here</code></pre>`\n\n\n![image-20220320180011295](Hexo-Obsidian-Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？/image-20220320180011295.png)\n* 填写完成后点`Preview`预览一下表格效果，符合要求点`Copy to clipboard`，并粘贴到`Obsidian`内\n\n## 最终样式\n\n\n| <div align = center>修改前</center>                          | <div align = center>修改后</center> |\n| ------------------------------------------------------------ | ----------------------------------- |\n| <pre><br>import pandas as pd<br>pd.read_csv('.')<br><br></pre> | <pre><br>aaa<br>bbb<br><br></pre>   |\n\n# 法2\n## 生成表格\n\n* 在[HTML 表格 转换为 HTML 表格](https://tableconvert.com/zh-CN/HTML-to-HTML)按照要求绘制表格，如下图\n\t* 表头写法，为了居中，使用`<div>`语法，如`<div align = center>修改前</center>`\n\t* 代码写法，直接使用三个点+代码类型，如下\n\t* 取消勾选`转移HTML表格`\n\n```C++\ncoding here\n```\n\n![image-20220320180033494](Hexo-Obsidian-Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？/image-20220320180033494.png)\n\n\n* 填写完成点`复制到剪切版`，粘贴到对应位置即可\n\n## 最终样式\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n<tr>\n\t\t<td><div align = center>修改前</center></td>\n        <td><div align = center>修改后</center></td>\n</tr>\n<tr>\n<td>\n```C++\n{\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"windows-msvc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n}\n```\n</td>\n<td>\n```C++\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}/src\",                                       // 链接source\n                    \"${workspaceFolder}/include\",                                   // 链接include\n                    \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件\n                ],\n                \"limitSymbolsToIncludedHeaders\": true\n            },\n            \"includePath\": [\n                \"${workspaceFolder}/src\",                                       // 链接source\n                \"${workspaceFolder}/include\",                                   // 链接include\n                \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件\n            ],\n            // \"defines\": [\n            //     \"_DEBUG\",\n            //     \"UNICODE\",\n            //     \"_UNICODE\"\n            // ],\n            \"defines\": [\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            // \"intelliSenseMode\": \"windows-msvc-x64\"\n            \"intelliSenseMode\": \"clang-x64\"\n        }\n    ],\n    \"version\": 4\n}\n```\n</td>\n</tr>\n</table>\n</div>\n\n* `Typora`内效果如下图\n\n![image-20220320180044456](Hexo-Obsidian-Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？/image-20220320180044456.png)\n\n# 法3\n## 生成表格\n* 在[HTML 表格 转换为 HTML 表格](https://tableconvert.com/zh-CN/HTML-to-HTML)按照要求绘制表格，如下图\n\t* 表头写法，为了居中，使用`<div>`语法，如`<div align = center>修改前</center>`\n\t* 代码写法，表格内显示代码用`HTML`的`<pre>`与`<code>`样式，如`<pre><code>coding here</code></pre>`\n\t* 取消勾选`转移HTML表格`\n\n\n![image-20220320180052791](Hexo-Obsidian-Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？/image-20220320180052791.png)\n\n* 填写完成点`复制到剪切版`，粘贴到对应位置即可\n\n## 最终样式\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">\n    <tr>\n\t\t<td><div align = center>修改前</center></td>\n        <td><div align = center>修改后</center></td>\n    </tr>\n    <tr>\n        <td><pre><code>\n{\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"windows-msvc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n}\n</code></pre>\n\t\t</td>\n        <td>\n\t\t\t<pre><code>\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}/src\",                                       // 链接source\n                    \"${workspaceFolder}/include\",                                   // 链接include\n                    \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件\n                ],\n                \"limitSymbolsToIncludedHeaders\": true\n            },\n            \"includePath\": [\n                \"${workspaceFolder}/src\",                                       // 链接source\n                \"${workspaceFolder}/include\",                                   // 链接include\n                \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件\n            ],\n            // \"defines\": [\n            //     \"_DEBUG\",\n            //     \"UNICODE\",\n            //     \"_UNICODE\"\n            // ],\n            \"defines\": [\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            // \"intelliSenseMode\": \"windows-msvc-x64\"\n            \"intelliSenseMode\": \"clang-x64\"\n        }\n    ],\n    \"version\": 4\n}\n\t</code></pre></td>\n    </tr>\n</table>\n</div>\n\n* `Typora`内样式如下图\n\n![image-20220320180101398](Hexo-Obsidian-Typora等如何制作包含代码在内的表格？如果需要有代码行数呢？/image-20220320180101398.png)\n\n\n\n\n# Ref\n* [MarkDown怎么设置表格的表头居中？](https://bbs.csdn.net/topics/392215863)\n* [tablesgenerator](https://www.tablesgenerator.com/markdown_tables)\n* [HTML怎么插入一段代码](https://blog.csdn.net/Morris_/article/details/105681040)\n* [code block inside table row in Markdown](https://stackoverflow.com/questions/28508141/code-block-inside-table-row-in-markdown)\n","tags":["Hexo","Chic","Obsidian","Typora","表格","markdown"],"categories":["博客搭建","Obsidian","Typora","markdown"]},{"title":"WSL + Visual Studio Code 配置 Geant4","url":"/article/430dd3f2.html","content":"\n---\n\n**创建时间**：2022年3月18日22:33:08\n**最新更新**：2022年3月19日10:54:04\n\n\n---\n\n# Visual Studio Code配置WSL\n具体见[WSL + Visual Studio Code + Anaconda配置方案](./495264bf.html)\n\n## VS Code装Remote - WSL插件\n\n* 打开`VS Code`，点击`扩展`→搜索`Remote - WSL`→点`安装`\n\n![image-20220319095546037](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095546037.png)\n\n## 通过VS Code进入WSL，装插件\n* 注意从这一步起，`VS Code`一直是链接`WSL`的状态，左下角得如图\n\t* 即，在`Windows`下打开`VS Code`，在`VS Code`内链接`WSL`，再进行本步及以下步骤\n\n![image-20220319095801315](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095801315.png)\n\n![image-20220319095811018](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095811018.png)\n* 注意此处打开的文件夹，可以从Windows下进入（默认打开是`\\\\wsl$\\Ubuntu-20.04`），可以从下图侧进入\n\n\n![image-20220319095816041](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095816041.png)\n\n# 安装库\n* 在`WSL`内的某一特定文件夹，安装如下拓展\n\t* `C/C++`\n\t* `C++ Intellisense`\n\t* `CMake Tools`\n\n![image-20220319095821722](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095821722.png)\n\n![image-20220319095827380](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095827380.png)\n\n* 在`Visual Studio Code`内按`Ctrl`+`Shift`+`P`，输入`C/C++ :Edit Configurations`→`C/C++:编辑配置(JSON)`，修改代码如下下图所示\n\n![image-20220319095833112](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095833112.png)\n\n![image-20220319095837038](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095837038.png)\n\n\n\n<div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\"> \n<tr>\n<td> <div align = center> <strong>修改前</strong></div> </td> <td> <div align = center> <strong>修改后</strong></div> </td>\n</tr>\n<tr>\n<td> \n\n```C++\n{\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"windows-msvc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n}\n```\n\n</td>\n<td>\n\n```C++\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}/src\",                                       // 链接source\n                    \"${workspaceFolder}/include\",                                   // 链接include\n                    \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件\n\n                ],\n                \"limitSymbolsToIncludedHeaders\": true\n            },\n            \"includePath\": [\n                \"${workspaceFolder}/src\",                                       // 链接source\n                \"${workspaceFolder}/include\",                                   // 链接include\n                \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件\n\n            ],\n            // \"defines\": [\n            //     \"_DEBUG\",\n            //     \"UNICODE\",\n            //     \"_UNICODE\"\n            // ],\n            \"defines\": [\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            // \"intelliSenseMode\": \"windows-msvc-x64\"\n            \"intelliSenseMode\": \"clang-x64\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n</td>\n</table>\n</div>\n\n\n\n\n<!-- <div style=\"overflow:auto;width:100%\"> <table width=\"auto\" style=\"white-space:nowrap\">   \n\n| <div align = center> 修改前</div>                            | <div align = center> 修改后</div>                            |\n| :----------------------------------------------------------- | ------------------------------------------------------------ |\n| <pre><code>{<br>    \"configurations\": [<br>        {<br>            \"name\": \"Win32\",<br>            \"includePath\": [<br>                \"${workspaceFolder}/**\"<br>            ],<br>            \"defines\": [<br>                \"_DEBUG\",<br>                \"UNICODE\",<br>                \"_UNICODE\"<br>            ],<br>            \"cStandard\": \"c17\",<br>            \"cppStandard\": \"c++17\",<br>            \"intelliSenseMode\": \"windows-msvc-x64\"<br>        }<br>    ],<br>    \"version\": 4<br>}<br></code></pre> | <pre><code>{<br>    \"configurations\": [<br>        {<br>            \"name\": \"Win32\",<br>            \"browse\": {<br>                \"path\": [<br>                    \"${workspaceFolder}/src\",                                       // 链接source<br>                    \"${workspaceFolder}/include\",                                   // 链接include<br>                    \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件<br><br>                ],<br>                \"limitSymbolsToIncludedHeaders\": true<br>            },<br>            \"includePath\": [<br>                \"${workspaceFolder}/src\",                                       // 链接source<br>                \"${workspaceFolder}/include\",                                   // 链接include<br>                \"/mnt/d/Geant4/main/geant4.10.07.p02/install/include/Geant4\"    // 链接Geant4头文件<br><br>            ],<br>            // \"defines\": [<br>            //     \"_DEBUG\",<br>            //     \"UNICODE\",<br>            //     \"_UNICODE\"<br>            // ],<br>            \"defines\": [<br>            ],<br>            \"cStandard\": \"c17\",<br>            \"cppStandard\": \"c++17\",<br>            // \"intelliSenseMode\": \"windows-msvc-x64\"<br>            \"intelliSenseMode\": \"clang-x64\"<br>        }<br>    ],<br>    \"version\": 4<br>}<br></code></pre> |\n\n</table> </div> -->\n\n\n\n# 配置完成\n\n* 配置完成后代开代码，有自动补全，且库引用正常\n![image-20220319095847313](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095847313.png)\n![image-20220319095856462](WSL-Visual-Studio-Code-配置-Geant4/image-20220319095856462.png)\n\n# Ref\n* [VS Code中添加Geant4、Root的外部库](https://www.bilibili.com/read/cv6037918)\n","tags":["Geant4","B5","WSL"],"categories":["Geant4"]},{"title":"Hexo + Chic如何添在link处加新的icon（svg）图标","url":"/article/9a3fd1d.html","content":"\n---\n\n**核心思路**：\n* 在iconfont+挑icon并下载，放到对应文件夹\n* 看iconfont的代码，设置对应内容\n* 引用iconfont\n* 运行，预览\n\n---\n\n# 挑icon，下载并放到对应文件夹\n\n* 打开[iconfont+](https://www.iconfont.cn)，登录后搜索想要的icon→选中喜欢的→`添加入库`→去购物车→`下载代码`\n\n![image-20220315201653220](Hexo-Chic如何添在link处加新的icon图标/image-20220315201653220.png)\n\n![image-20220315201703330](Hexo-Chic如何添在link处加新的icon图标/image-20220315201703330.png)\n\n![image-20220315201709686](Hexo-Chic如何添在link处加新的icon图标/image-20220315201709686.png)\n\n![image-20220315201714294](Hexo-Chic如何添在link处加新的icon图标/image-20220315201714294.png)\n\n\n* 进入`themes\\Chic\\source\\fonts`，解压上面下载的压缩包至该路径下，可以起名为`iconfont2`\n\n![image-20220315201723107](Hexo-Chic如何添在link处加新的icon图标/image-20220315201723107.png)\n\n# 看iconfont代码，进行配置\n\n* `iconfont2`文件夹下有个文件，`demo_index.html`，相对路径是`themes\\Chic\\source\\fonts\\iconfont2\\demo_index.html`，双击打开这个文件→在浏览器中打开→点击`Font class`→查看代码，为下下图画红色箭头的部分\n\t* 此处代码指的是`icon-`后面的字母，如`youlian`、`jianshu`、`csdn`，要注意大小写\n\n![image-20220315201729195](Hexo-Chic如何添在link处加新的icon图标/image-20220315201729195.png)\n\n![image-20220315201746814](Hexo-Chic如何添在link处加新的icon图标/image-20220315201746814.png)\n\n* 接下来，比如要在`themes\\Chic\\_config.yml`的`links`内添加并使用`jianshu`这个icon，我们需要配置如下文件\n\t* `themes\\Chic\\source\\css\\style.styl`引用`iconfont2`的`iconfont.css`\n\t* `themes\\Chic\\layout\\_page\\profile.ejs`引用`iconfont2`的`iconfont.css`\n\t* `themes\\Chic\\_config.yml`的`links`\n\n* 一步一步来，打开`themes\\Chic\\source\\css\\style.styl`，输入如下代码，注意是`iconfont2`\n\n```css:themes\\Chic\\source\\css\\style.styl\n@import \"../fonts/iconfont2/iconfont.css\"  // CSDN、简书、友链\n```\n\n* 打开`themes\\Chic\\layout\\_page\\profile.ejs`，在最上方添加如下代码，注意是`iconfont2`\n```css:themes\\Chic\\layout\\_page\\profile.ejs\n<!-- 先要引用这个icon库 -->\n<link rel=\"stylesheet\" href=\"../fonts/iconfont2/iconfont.css\"> \n<!-- 再进行代码编写 -->\n```\n\n* 打开`themes\\Chic\\_config.yml`，在`links`内添加对应的内容，比如下面内容\n\n```css:themes\\Chic\\_config.yml\nlinks:\n  jianshu: https://github.com/\n  csdn: https://github.com/\n```\n\n# 部署预览\n* 打开`Git-Bash`，输入`hexo clean`，`hexo s -g`，进入`localhost:4000`看一下页面，可以正常使用这些新添加的icon了\n\n![image-20220315201758140](Hexo-Chic如何添在link处加新的icon图标/image-20220315201758140.png)\n\n# Ref\n* [关于文章标题 markdown语法 “##”关键字创建的标题，为什么渲染后的页面还会出现“#”？](https://github.com/Siricee/hexo-theme-Chic/issues/5)\n* [关于图标iconfont的疑惑](https://github.com/Siricee/hexo-theme-Chic/issues/69)\n","tags":["Hexo","Chic","icon"],"categories":["博客搭建"]},{"title":"WSL + Visual Studio Code + Anaconda配置方案","url":"/article/495264bf.html","content":"\n**核心思路**：\n* `WSL`、`Visual Studio Code（VS Code）`与`Anaconda`安装完成\n* `VS Code`装`Remote - WSL`插件\n* 通过`VS Code`远程链接进`WSL`，装`Jupyter`插件，配置\n* 选对应的内核，运行代码\n\n\n---\n\n\n# WSL、VS Code与Anaconda安装\n暂略\n\n\n# VS Code装Remote - WSL插件\n* 打开`VS Code`，点击`扩展`→搜索`Remote - WSL`→点`安装`\n\n![image-20220314171447853](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171447853.png)\n\n# 通过VS Code进入WSL，装插件\n* 注意从这一步起，`VS Code`一直是链接`WSL`的状态，左下角得如图\n\t* 即，在`Windows`下打开`VS Code`，在`VS Code`内链接`WSL`，再进行本步及以下步骤\n\n![image-20220314171454982](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171454982.png)\n\n* 通过`VS Code`进入`WSL`，左下角`打开远程窗口`→`Open Folder in WSL`→打开对应文件夹→打开对应代码（此时`VS Code`已进入`WSL`环境）→`扩展`→搜索`Jupyter`→安装\n\n\n\n![image-20220314171500828](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171500828.png)\n\n\n\n![image-20220314171505678](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171505678.png)\n\n\n\n![image-20220314171510233](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171510233-16472493965071.png)\n\n# 设置Jupyter插件\n\n* 设置`Python`插件，点击`管理`→`扩展设置`→找到`Python > Auto Complete: Extra Paths`→在`settings.json`中编辑→输入如下指令\n\t* 其中`python.condaPath`要改成自己对应的文件夹\n\n```json\n\n{\n\n\n\n \"[python]\": {},\n\n \"python.condaPath\": \"/mnt/d/Anaconda/main/python.exe\", \n\n}\n\n```\n\n![image-20220314171518194](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171518194.png)\n\n\n\n![image-20220314171522337](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171522337.png)\n\n# 选择对应的内核\n* 点击右上角（或直接运行代码块），选择对应的内核\n\n  \n\n![image-20220314171527431](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171527431.png)\n\n\n\n\n\n![image-20220314171531961](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171531961.png)\n\n* 配置完成，即可顺利运行代码\n\n![image-20220314171536004](WSL-Visual-Studio-Code-Anaconda配置方案/image-20220314171536004.png)\n\n# Ref\n\n* [机器学习Python编程环境：VSCode+Anaconda](https://zhuanlan.zhihu.com/p/40378960)\n* [anaconda+vscode+wsl 配置python运行环境_@（一.一）@的博客-程序员宝宝](https://www.cxybb.com/article/qq_45480755/104613117)\n* [WIN10 WSL Ubuntu+Anaconda+VSCode配置多Python开发环境_takeeasy2的专栏-程序员宅基地](https://www.cxyzjd.com/article/takeeasy2/112800095)\n* [WIN10安装WSL并使用VScode连接WSL](https://blog.csdn.net/weixin_43876113/article/details/105261577)\n","tags":["Python"],"categories":["Python"]},{"title":"Chic过长博文名如何实现省略，过长博文名，如何实现三个点省略方案","url":"/article/321a7025.html","content":"\n---\n\n**核心思路**：调对应页面样式，用`li`\n\n---\n\n# 配置页面样式\n\n* 用代码编辑器，如`Visual Studio Code`打开`themes\\Chic\\layout\\_page\\archive.ejs`，做如下两处修改\n  * 在代码标题前后加`<li></li>`\n  * 在`li`样式里设置宽、高、溢出情况的处理方式\n\n* 添加`<li></li>`\n  修改前\n\n```ejs:themes\\Chic\\layout\\_page\\archive.ejs\n \n <article class=\"archive-item\">\n\n <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n\n <%= post.title %>\n\n </a>\n\n <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n\n </article>\n\n```\n\n修改后\n\n```ejs:themes\\Chic\\layout\\_page\\archive.ejs\n <article class=\"archive-item\">\n\n <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n\n <li>\n\n <%= post.title %>\n\n </li>\n\n </a>\n\n <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n\n </article>\n\n```\n\n* 在`li`样式里设置宽、高、溢出情况的处理方式\n\n在`themes\\Chic\\layout\\_page\\archive.ejs`最下方添加以下内容\n\n```ejs:themes\\Chic\\layout\\_page\\archive.ejs\n \n<style>\n\n li{\n\n width: 650px;\n\n height: 29.5px;\n\n /*不换行*/\n\n white-space: nowrap;\n\n /*溢出的话，隐藏*/\n\n overflow: hidden;\n\n /*文本溢出时，是否....*/\n\n text-overflow: ellipsis;\n\n }\n\n</style>\n\n```\n\n* `themes\\Chic\\layout\\_page\\archive.ejs`整个文件修改前如下\n\n```ejs:themes\\Chic\\layout\\_page\\archive.ejs\n \n<div class=\"post-wrap archive\">\n\n <!-- 添加了页面的头部与空一行 -->\n\n <h2 class=\"post-title\">-&nbsp;📖文章&nbsp;-</h2>\n\n <br>\n\n <!-- 上面是添加的内容 -->\n\n  \n\n <% var last_year = ''; %>\n\n <% page.posts.each(function (post) { %>\n\n <% var cur_year = post.date.year(); %>\n\n  \n\n <% if(last_year !== cur_year){ %>\n\n <h3><%- cur_year %></h3>\n\n <% last_year = cur_year; } %>\n\n  \n\n <article class=\"archive-item\">\n\n <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n\n <%= post.title %>\n\n </a>\n\n <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n\n </article>\n\n <% }) %>\n\n <%- partial('_partial/paginator') %>\n\n  \n\n</div>\n\n\n```\n\n* `themes\\Chic\\layout\\_page\\archive.ejs`整个文件修改后如下\n\n```ejs:themes\\Chic\\layout\\_page\\archive.ejs\n \n<div class=\"post-wrap archive\">\n\n <!-- 添加了页面的头部与空一行 -->\n\n <h2 class=\"post-title\">-&nbsp;📖文章&nbsp;-</h2>\n\n <br>\n\n <!-- 上面是添加的内容 -->\n\n  \n\n <% var last_year = ''; %>\n\n <% page.posts.each(function (post) { %>\n\n <% var cur_year = post.date.year(); %>\n\n  \n\n <% if(last_year !== cur_year){ %>\n\n <h3><%- cur_year %></h3>\n\n <% last_year = cur_year; } %>\n\n  \n\n <article class=\"archive-item\">\n\n <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\">\n\n <!-- <ul> -->\n\n <li>\n\n <%= post.title %>\n\n </li>\n\n <!-- </ul> -->\n\n </a>\n\n <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n\n </article>\n\n <% }) %>\n\n <%- partial('_partial/paginator') %>\n\n  \n\n</div>\n\n  \n  \n\n<style>\n\n li{\n\n width: 650px;\n\n height: 29.5px;\n\n /*不换行*/\n\n white-space: nowrap;\n\n /*溢出的话，隐藏*/\n\n overflow: hidden;\n\n /*文本溢出时，是否....*/\n\n text-overflow: ellipsis;\n\n }\n\n</style>\n\n\n```\n\n\n# 定义和用法\n\n* `<li>`标签定义列表项目。\n\n* `<li>` 标签可用在有序列表 (`<ol>`) 和无序列表 (`<ul>`) 中。\n  * `ol` 有序列表。\n    * 表现为：123的序号\n  * `ul` 无序列表\n    * 表现为`li`前面是大圆点而不是123\n\n| 定义 | 全称            |\n| ---- | --------------- |\n| ul   | unordered lists |\n| ol   | ordered lists   |\n| li   | Lists           |\n\n# 效果\n\n* 部署前，箭头所指是页面布局出现错误的地方\n\n![image-20220312202703121](Chic过长博文名如何实现省略，过长博文名，如何实现三个点省略方案/image-20220312202703121.png)\n\n* 部署后\n\n![image-20220312202710336](Chic过长博文名如何实现省略，过长博文名，如何实现三个点省略方案/image-20220312202710336.png)\n\n\n# Ref\n\n* [HTML中ul等标签的用法](https://blog.51cto.com/slddyb/421853)\n* [css：文章标题过长时，使用省略号](https://www.shuzhiduo.com/A/WpdK0PnMzV/)\n* [HTML  li  标签](https://www.w3school.com.cn/tags/tag_li.asp)\n\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo + Chic + Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？","url":"/article/d101e67c.html","content":"\n---\n\n**核心思路**：\n\n**区别**：\n思路二更麻烦，思路一省个在`Typora`内批量替换图片路径的活儿\n\n**思路一（推荐）**：\n\n* 装`hexo-image-link`\n* 改`Hexo`根目录配置`_config.yml`\n* 改`Typora`图片配置\n* 清理缓存，生成，发布\n\n**思路二**：\n* 装`hexo-asset-image`\n* 改`Hexo`根目录配置`_config.yml`\n* 改`Typora`图片配置\n* `Typora`里写好带图片的文章，批量替换路径\n* 清理缓存，生成，发布\n\n---\n\n* 图片引用路径检查，见[Hexo deploy部署后的页面图片引用路径如何检查？](./b9c842e3.html)\n\n# 思路一（推荐）\n## 装插件\n* 打开`Git-Bash`，进入放置Blog源码的根目录，输入以下代码，安装`hexo-image-link`插件\n\n```bash\nnpm install hexo-image-link --save\n```\n\n* 如果`Git-Bash`内在安装后出现如下提示，则在`Git-Bash`内输入`npm install --no-audit`，见[[Hexo安装插件遇上5 vulnerabilities (2 moderate, 2 high, 1 critical)类似的报错，让使用npm fund寻求更多细节，如何解决]]\n\n```bash\n\nrun `npm audit fix` to fix them, or `npm audit` for details\n\n```\n\n## 配置Hexo\n* 打开`Hexo`根目录下的`_config.yml`，修改`post_asset_folder`为`true\n\n```yml:_config.yml\nhexo-asset-folder: true # 图片 for hexo-image-link\n```\n\n## 配置Typora\n* 打开图片配置，`文件`→`偏好设置`→`图像`，进行设置如下图\n\n![image-20220312173544300](Hexo-Chic-Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？/image-20220312173544300.png)\n![image-20220312173554132](Hexo-Chic-Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？/image-20220312173554132.png)\n\n\n\n\n# 思路二\n\n## 装插件\n* 打开`Git-Bash`，进入放置Blog源码的根目录，输入以下代码，安装`hexo-asset-image`插件\n\n```bash\nnpm install hexo-asset-image --save\n```\n\n* 如果`Git-Bash`内在安装后出现如下提示，则在`Git-Bash`内输入`npm install --no-audit`，见[[Hexo安装插件遇上5 vulnerabilities (2 moderate, 2 high, 1 critical)类似的报错，让使用npm fund寻求更多细节，如何解决]]\n\n```bash\n\nrun `npm audit fix` to fix them, or `npm audit` for details\n\n```\n\n## 配置Hexo\n* 打开`Hexo`根目录下的`_config.yml`，修改`post_asset_folder`为`true\n\n```yml:_config.yml\npost_asset_folder: true # 图片\n```\n\n## 配置Typora\n* 打开图片配置，`文件`→`偏好设置`→`图像`，进行设置如下图\n\n![image-20220312173607265](Hexo-Chic-Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？/image-20220312173607265.png)\n![image-20220312173614527](Hexo-Chic-Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？/image-20220312173614527.png)\n\n## Typora内文章批量替换路径\n\n* 直接插入的图片路径如下图，要把红线标注的部分（即文件名）批量去掉，按`Ctrl`+`H`，输入对应内容，按`全部`\n\n![image-20220312173623003](Hexo-Chic-Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？/image-20220312173623003.png)\n\n![image-20220312173630000](Hexo-Chic-Typora如何实现便捷的文章插入图片方案？Hexo文章图片无法显示问题如何解决？/image-20220312173630000.png)\n\n* 接下来清理缓存，生成，发布即可\n\n\n\n\n\n# Ref\n* [解决Hexo图片无法显示问题](https://blog.csdn.net/weixin_30734435/article/details/98497054)\n* [Hexo不显示图片,不需要插件,超简单](https://blog.csdn.net/as3522/article/details/102972473)\n* [How to fix npm vulnerabilities manually?](https://stackoverflow.com/questions/51377148/how-to-fix-npm-vulnerabilities-manually)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"Hexo安装插件遇上5 vulnerabilities (2 moderate, 2 high, 1 critical)类似的报错，让使用npm fund寻求更多细节，如何解决","url":"/article/9762d0c6.html","content":"\n---\n\n**创建时间**：2022年3月12日17:30:04\n**最新更新**：2022年3月29日20:04:34\n\n---\n\n**核心思路**：`Git-Bash`输入`npm install --no-audit`即可\n\n---\n\n如果`Git-Bash`内在安装后出现如下提示，则在`Git-Bash`内输入`npm install --no-audit`\n\n```bash\n\nup to date, audited 293 packages in 4s\n\n19 packages are looking for funding\n  run `npm fund` for details\n\n5 vulnerabilities (2 moderate, 2 high, 1 critical)\n```\n\n* 输入如下代码即可\n```bash\nnpm install --no-audit\n```\n\n\n# Ref\n* [How to fix npm vulnerabilities manually?](https://stackoverflow.com/questions/51377148/how-to-fix-npm-vulnerabilities-manually)\n","tags":["Hexo","Chic"],"categories":["博客搭建"]},{"title":"如何快速便捷获取包含论文完整信息的EndNote文件？","url":"/article/7ed40a71.html","content":"\n\n\n---\n\n**核心思路**：Google学术搜索按钮插件\n\n---\n\n# 插件部署\n* 在Chrome商店or对应浏览器商店（FireFox也支持）安装`Google学术搜索按钮`\n\n![image-20220311195519174](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195519174.png)\n\n![image-20220311195525372](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195525372.png)\n\n\n\n* 固定到拓展程序栏\n\n![image-20220311195530025](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195530025.png)\n\n# 使用\n\n* 打开论文页面→点击插件→`引用`→对应软件的下载项，如`EndNote`→下载到想要的文件夹→点击该文件（`EndNote`是`.enw`文件）打开→导入到`EndNote`里（注意`EndNote`要提前启动）\n\n\n\n![image-20220311195533545](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195533545.png)\n\n\n\n![image-20220311195537047](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195537047.png)\n\n![image-20220311195540611](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195540611.png)\n\n![image-20220311195543509](如何快速便捷获取包含论文完整信息的EndNote文件？/image-20220311195543509.png)\n\n","tags":["EndNote","论文"],"categories":["EndNote"]},{"title":"3ds Max常用操作","url":"/article/210d6c4f.html","content":"\n\n\n# 清单\n\n| 重要性 | 功能         | 按键                               | 参考 |\n| ------ | ------------ | ---------------------------------- | ---- |\n| ★      | 旋转三维模型 | <kbd>Alt</kbd>+<kbd>鼠标中键</kbd> |      |\n\n","tags":["3ds Max","常用操作"],"categories":["查找表"]},{"title":"CERN ROOT常用操作","url":"/article/c75d34a5.html","content":"\n\n\n| 重要性 | 功能                              | 按键                                                         | 参考                                                         |\n| ------ | --------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ★      | WSL中打开ROOT的图形界面           | 控制台输入```DISPLAY=:0 root```                              | [新手Linux子系统方案：WSL+Xming+cmder+zsh与高能物理Cern Root的安装](https://zhuanlan.zhihu.com/p/81622442) |\n|        | 在Windows10中快速打开对应控制提啊 | 在地址栏输入```bash```或```cmder```等                        | -                                                            |\n|        | 在WSL中打开ROOT                   | 控制台输入```root```                                         | [新手Linux子系统方案：WSL+Xming+cmder+zsh与高能物理Cern Root的安装](https://zhuanlan.zhihu.com/p/81622442) |\n|        | 在ROOT中读取文件                  | 进入ROOT后，在控制台输入```TFile file(\"文件名\")``` file可以修改成其他值，代表变量名，此处读取的是```.root```文件 | [CERN ROOT 数据处理工具包_root文件读取](https://www.bilibili.com/video/BV1fz411B7SG/) |\n|        | 在ROOT中打开可视化界面            | 进入ROOT后，且读取文件后，在控制台输入```new TBrowser```     | [CERN ROOT 数据处理工具包_root文件读取](https://www.bilibili.com/video/BV1fz411B7SG/) |\n|        | 在ROOT实现清除覆盖读入文件        | 进入ROOT后，在控制台输入```TFile file(\"文件名\",\"recreate\")``` file可以修改成其他值，代表变量名，此处读取的是```.root```文件 | [CERN ROOT 数据处理工具包_root文件读取](https://www.bilibili.com/video/BV1fz411B7SG/) |\n|        | 在ROOT实现后续附加读入文件        | 进入ROOT后，在控制台输入```TFile file(\"文件名\",\"update\")``` file可以修改成其他值，代表变量名，此处读取的是```.root```文件 | [CERN ROOT 数据处理工具包_root文件读取](https://www.bilibili.com/video/BV1fz411B7SG/) |\n|        | 在ROOT中浏览读入的文件信息        | 进入ROOT后，且读取文件后，在控制台输入```存放读取文件的参数名.ls()```，如```file.ls()``` | [CERN ROOT 数据处理工具包_root文件读取](https://www.bilibili.com/video/BV1fz411B7SG/) |\n|        | 在ROOT中打印读入的文件信息        | 进入ROOT后，且读取文件后，在控制台输入```存放读取文件的参数名.Print()```，如```file.Print()``` | [CERN ROOT 数据处理工具包_root文件读取](https://www.bilibili.com/video/BV1fz411B7SG/) |","tags":["常用操作","CERN ROOT"],"categories":["查找表"]},{"title":"WSL子系统个人常用操作","url":"/article/ab81a167.html","content":"\n---\n\n**创建日期**：2021年8月18日\n**最后更新**：2021年12月21日\n\n---\n\n| 重要性 | 功能                                              | 按键                                                         | 参考                                                         |\n| ------ | ------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ★      | Obsidian Advanced Tables 侧边栏                   | <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>D</kbd>                | [使用Markdown实现键盘按钮和流程图](https://blog.csdn.net/weixin_43557605/article/details/105403398) |\n|        | Windows10文件管理器中直接进入WSL目录              | <kbd>Win</kbd>+<kbd>R</kbd>或地址栏直接输入````\\\\wsl$````    | [windows10 的linux子系统（windows subsystem for linux)WSL 文件位置](https://www.cnblogs.com/lepeCoder/p/wsl_dir.html) |\n| ★      | LaTeX公式OCR                                      | -                                                            | [LaTeX-OCR](https://github.com/lukas-blecher/LaTeX-OCR)      |\n|        | Windows10 Linux WSL迁移到C盘以外的盘              | -                                                            | [把你的子系统(WSL)搬到非系统盘](https://cloud.tencent.com/developer/article/1594940) |\n|        | Windows10 Linux WSL安装 Anaconda                  | -                                                            | [在WSL内安装Anaconda](https://www.jianshu.com/p/ad49c4405fe7) |\n| ★      | WSL通过VIM打开文件                                | <kbd>vim</kbd>+文件名                                        | [如何在Vim/Vi中保存文件并退出编辑器](https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/) |\n| ★      | VIM进入编辑模式                                   | <kbd>i</kbd>                                                 | [如何在Vim/Vi中保存文件并退出编辑器](https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/) |\n| ★      | VIM保存文件                                       | 按<kbd>ESC</kbd>，后按<kbd>:w</kbd>，再按<kbd>Enter</kbd>    | [如何在Vim/Vi中保存文件并退出编辑器](https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/) |\n| ★      | VIM保存文件并退出                                 | 按<kbd>ESC</kbd>，后按<kbd>:wq</kbd>，再按<kbd>Enter</kbd>   | [如何在Vim/Vi中保存文件并退出编辑器](https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/) |\n| ★      | 在mermaid流程图中使用()                           | ``` \"()\"```两边加上双引号就能使用括号                        | [Mermaid 语法里需要输入括号怎么办](https://ask.csdn.net/questions/1099408) |\n|        | mermaid的子图                                     | ```subgraph```+```end```                                     | [[关于写作那些事之快速上手Mermaid流程图](https://segmentfault.com/a/1190000022544565)](https://segmentfault.com/a/1190000022544565) |\n| ★      | conda查看有多少虚拟环境                           | ```conda env list```<br>```conda info -e```                  | [Anaconda-用conda创建python虚拟环境](https://zhuanlan.zhihu.com/p/94744929) |\n| ★      | conda创建虚拟环境                                 | ```conda create -n your_env_name python=x.x```               | [Anaconda-用conda创建python虚拟环境](https://zhuanlan.zhihu.com/p/94744929) |\n| ★      | conda删除虚拟环境                                 | ```conda remove -n your_env_name --all```                    | [Anaconda-用conda创建python虚拟环境](https://zhuanlan.zhihu.com/p/94744929) |\n|        | Markdown表格换行                                  | ```<br>```                                                   | [markdown表格内如何进行换行？](https://blog.csdn.net/microcosmv/article/details/51868178) |\n|        | Obsidian表格进入下一个单元格                      | <kbd>Tab</kbd>                                               | -                                                            |\n|        | Obsidian表格进入下一行的第一个单元格              | <kbd>Enter</kbd>                                             | -                                                            |\n|        | Windows10下安装Anaconda后Jupyter Notebook无法使用 | 需要另其自动打开浏览器，同时将```NotebookApp.allow_root```取消注释并设为True | [[Windows10下安装Anaconda后Jupyter Notebook无法启动，403Get，Kernel Error解决办法]] |\n|        | Windows10下便捷调整窗口大小，将其紧贴窗口边框     | <kbd>Win</kbd>+<kbd>Tab</kbd>                                | -                                                            |\n| ★      | Windows10下快速进入对应目录的WSL控制台窗口        | 在对应目录下的地址栏输入```bash```                           | [在Win 10子系统（WSL）中安装 Geant 4和Cern Root 的方法整理](https://blog.csdn.net/budong_2017/article/details/102865543) |\n|        | WSL查看jupyter notebook配置文件所在路径           | 在控制台内输入指令```jupyter notebook --generate-config```   | [Jupyter Notebook 文件默认目录的查看](https://blog.csdn.net/u012654981/article/details/89460307) |\n|        | WSL查看系统支持的shell                            | 在控制台内输入```cat /etc/shells```                          | [linux中查看现在使用的shell是ksh还是bash？以及怎样修改？](https://blog.csdn.net/Rainnnbow/article/details/47153021) |\n|        | WSL查看现在使用的shell                            | 在控制台内输入```echo $0```或```echo $SHELL```               | [linux中查看现在使用的shell是ksh还是bash？以及怎样修改？](https://blog.csdn.net/Rainnnbow/article/details/47153021) |\n| ★      | WSL修改默认shell                                  | 在控制台内输入```chsh -s```加上上面显示的支持的shell，如```chsh -s /bin/bash``` | [linux中查看现在使用的shell是ksh还是bash？以及怎样修改？](https://blog.csdn.net/Rainnnbow/article/details/47153021) |\n| ★      | WSL修改shell启动时执行的内容                      | 打开```\\\\wsl$\\Ubuntu-20.04\\root\\.bash_profile```，添加对应内容，如```source ~/.bashrc```，需要关闭zsh也是在此处设置 |                                                              |\n|        | Windows10实现快速窗口布局/系统分屏                | <kbd>Win</kbd>+<kbd>←</kbd>/<kbd>→</kbd>可以将应用窗口缩小一半，其可以左右调整位置<br>  在上一步的基础上，通过<kbd>Win</kbd>+<kbd>↑</kbd>/<kbd>↓</kbd>可以实现窗口按显示器四分之一大小显示 | [Windows 10 让窗口布局更有效率](http://www.haibianshibei.com/1117.html) |\n| ★      | 通过xfce运行WSL桌面GUI/显示桌面                   | ```DISPLAY=:0 startxfce4```<br>或<br>```export=:0 startxfce4``` | [win10子系统(wsl 2)安装图形界面，显示桌面，win+linux，是时候告别虚拟机了](https://blog.csdn.net/Ginger2330/article/details/109390573) |\n|        | 在xfce的WSL桌面GUI内打开文件夹                    | ```mimeopen -d ~/Desktop/```                                 | [\"Failed to execute default File Manager: Input/output error\"](https://askubuntu.com/questions/42682/failed-to-execute-default-file-manager-input-output-error) |\n| ★      | 在WSL中进入prompt                                 | ```source activate```                                        | [Anaconda使用conda activate激活环境出错（待完全解决）2018-06-09](https://www.jianshu.com/p/cd0096b24b43) |\n|        | 获取管理员权限                                    | `sudo -i`                                                    | -                                                            |\n|        |                                                   |                                                              |                                                              |\n","tags":["常用操作","WSL"],"categories":["查找表"]},{"title":"Windows10下安装Anaconda后Jupyter Notebook无法启动，403Get，Kernel Error的一类解决办法","url":"/article/a8f28d7b.html","content":"\n---\n\n核心思路：此处解决方法主要针对非root身份打开Jupyter Notebook时候存在的问题，在Win10早期版本、老电脑中安装可能遇上\n\n\n\n---\n\n**针对情况**：此处解决方法主要针对非root身份打开Jupyter Notebook时候存在的问题，在Win10早期版本、老电脑中安装可能遇上\n\n---\n\n\n\n* 找到根目录\n  * Linux系统文件路径：```./rootfs/root/.jupyter/jupyer_notebook_config.py```\n  * Windows系统文件路径：\n* 添加以下代码，chrome可以改成Firefox，路径也需要做对应修改\n\n```Python\nimport webbrowser\nwebbrowser.register(\"chrome\", None, webbrowser.GenericBrowser(u\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"))\nc.NotebookApp.browser = 'chrome'\n```\n* 将```c.NotebookApp.allow_root```取消注释，并改为True\n\t* 意味着是否允许用户以root身份运行笔记本。\n","tags":["Python","Win10","Jupyter Notebook"],"categories":["Python"]}]